<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[工作生活中常用工具汇总]]></title>
      <url>https://craneyuan.github.io/2019/01/31/tools-choose/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2018年的总结在本地的笔记本中躺着呢，就不公开了。2019年的也很简单，也就不公开了。</p>
<p>最近博客更新的频率降了下来了，不是没有什么东西想去分享，只是总怕自己分享的观点有问题、误人子弟了。想起之前写的一些技术文章，确实是有问题的，时效性太强，可能之前这种观点是合理的，过了一段时间就变得不合理了；这也是本人最近不太愿意更新博客的原因之一。其次，就是人变懒了，没有上学期间那么勤快了，实在是惭愧啊！！！</p>
<p>这篇文章主要分享一些本人平时工作生活中常用的工具。不知道大家会不会遇到这样的情景，有很多同类型的工具都挺不错，难以选择用哪一个，这时候本人会参考下面这几个对比网站来进行抉择（有得选择代表自由，自由的代价就是你得做出选择，哈哈）</p>
<ul>
<li><a href="https://alternativeto.net/" target="_blank" rel="noopener">https://alternativeto.net/</a></li>
<li><a href="https://www.producthunt.com/" target="_blank" rel="noopener">https://www.producthunt.com/</a></li>
</ul>
<h2 id="Google-Chrome-插件篇"><a href="#Google-Chrome-插件篇" class="headerlink" title="Google Chrome 插件篇"></a>Google Chrome 插件篇</h2><ul>
<li>Decentraleyes 网页加速插件 | 预先缓存了一些第三方库文件到本地</li>
<li>Extension Manager 插件管理器</li>
<li>OneTab 标签页管理工具</li>
<li>Proxy SwitchyOmega 代理切换工具</li>
<li>Privacy Badger 隐私保护工具</li>
<li>Raindrop 书签同步工具</li>
<li>Wayback Machine 网页时光机工具</li>
<li>Tampermonkey 脚本管理器</li>
</ul>
<h2 id="编辑器篇"><a href="#编辑器篇" class="headerlink" title="编辑器篇"></a>编辑器篇</h2><ul>
<li>Simplenote 支持 markdown 的一款比较干净的多端笔记工具</li>
<li>MWeb 一款还不错的 Mac 下的笔记工具</li>
<li>Notion 这个笔记工具很炫丽，本人目前正在探索中。这里有篇不错的介绍文章：<a href="https://sspai.com/post/39694" target="_blank" rel="noopener">Notion：重新定义数字笔记</a> | 感兴趣的朋友可以注册试试 <a href="https://www.notion.so/?r=070970cf5ce04d70ae0dfe9b4ad25f99" target="_blank" rel="noopener">邀请码</a></li>
</ul>
<h2 id="杂项篇"><a href="#杂项篇" class="headerlink" title="杂项篇"></a>杂项篇</h2><ul>
<li>Alfred 功能极其强大，workflow 很不错</li>
<li>KeepPassXC 一款不错的本地密码管理工具，配合浏览器插件一起使用更方便</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://github.com/nikitavoloboev/my-mac-os" target="_blank" rel="noopener">My wonderful world of macOS</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Data JPA vs Hibernate JPA vs JPA]]></title>
      <url>https://craneyuan.github.io/2018/07/31/jpa/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从文章的标题，就可以清晰地了解到，本文是来辨析三个容易将新手弄糊涂的技术名词。如果，你一眼看过去就知道这三个名词的区别及关系，那么，这篇文章你可以不用继续读下去了；除非，你是想要看看我有什么解释的不对，来纠错的（来找茬，哈哈），也欢迎留言。</p>
<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><ul>
<li>JPA（Java Persistence API，Java持久化API），它是一个关于如何处理对象关系映射（object-relational mappings）的规范；即，定义了映射Java中的Object到关系数据库Table的标准流程。</li>
<li>Hibernate JPA，它实现了JPA规范，是JPA规范的厂商（想想JDBC规范和MySQL数据库厂商的关系，JPA和Hibernate也是这么一种关系）。<blockquote>
<p>除了Hibernate这个厂商，EclipseLink也是一个比较流行的JPA厂商。</p>
</blockquote>
</li>
<li>Spring Data JPA，它是JPA规范的一个数据访问抽象；Spring Data旨在提供一种一致的数据访问模型，用于访问来自不同存储类型的数据。</li>
</ul>
<h2 id="JPA-背景"><a href="#JPA-背景" class="headerlink" title="JPA 背景"></a>JPA 背景</h2><p>在引入EJB 3.0规范之前，许多企业级Java开发人员使用由持久化框架（例如Hibernate）或数据访问对象（DAO）提供的轻量级持久化对象，来代替实体bean（EJB的一种）。 这是因为在以前的EJB规范中，实体bean需要太多复杂的代码和繁重的资源占用，并且由于bean和DAO对象或持久化框架之间的源代码中的互连和依赖性，使得它们只能在Java EE应用程序服务器中使用。 因此，最初在第三方持久性框架中提供的许多功能都被合并到Java Persistence API中，并且从2006年开始，像Hibernate（版本3.2）和TopLink Essentials这样的项目已经实现Java Persistence API规范。</p>
<h2 id="JPA-编年史"><a href="#JPA-编年史" class="headerlink" title="JPA 编年史"></a>JPA 编年史</h2><ul>
<li>2006年5月， JPA 1.0 规范作为 JCP JSR 220 的一部分最终被发布。</li>
<li>2009年12月，JPA 2.0 规范发布（JSR 317，Java EE 6 平台，依赖于 JPA 2.0。） </li>
<li>2013年4月， JPA 2.1 规范发布（JSR 338，Java EE 7 平台，依赖于 JPA 2.1。）</li>
<li>2017年6月， JPA 2.2 规范发布（JSR 338）</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://en.wikipedia.org/wiki/Java_Persistence_API" target="_blank" rel="noopener">Java Persistence API，维基百科定义</a></li>
<li><a href="https://spring.io/projects/spring-data-jpa#overview" target="_blank" rel="noopener">Spring Data JPA，Spring官方介绍</a></li>
<li><a href="https://stackoverflow.com/questions/23862994/what-is-the-difference-between-hibernate-and-spring-data-jpa" target="_blank" rel="noopener">What is the difference between Hibernate and Spring Data JPA</a></li>
<li><a href="http://www.infoq.com/cn/news/2018/01/improvements-jpa-22" target="_blank" rel="noopener">JPA 2.2改进了易用性</a></li>
<li><a href="https://github.com/javaee/jpa-spec" target="_blank" rel="noopener">Java Persistence API specification，官方GitHub存档</a></li>
<li><a href="http://www.in28minutes.com/jpa-hibernate-tutorial-for-beginners" target="_blank" rel="noopener">JPA and Hibernate in 10 Steps with Spring Boot and H2</a></li>
<li><a href="https://www.cnblogs.com/zhujiabin/p/5861319.html" target="_blank" rel="noopener">JPA与Hibernate的关系</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 规范 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《Effective Java 第三版》新条目介绍]]></title>
      <url>https://craneyuan.github.io/2018/06/03/effective-java-3e-new-items/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从去年的3月份起我就在开始读《Effective Java 第二版》，当然，我读的是中文版的；可能是我理解能力还不行，对于书中的内容总是感觉理解困难；就拿第一章的内容「创建和销毁对象」来说吧，这是我读的次数最多的一章，想必原因大家也是明白的，每次我读不下去的时候，我就从头开始读，所以，现在我对这本书的第一章是最为熟悉的了。后来，有一次我上网看到有网友说这本书确实和绝大部分的翻译书籍一样，对于有些原文中的内容翻译的不是很流畅，所以会导致阅读的人感觉难以理解；于是，我就斗胆下了本英文的原版来对照着来看，发现确实这样理解起来就更容易了，所以最后花了一两个月的时间就把整本书给啃完了（好吧，真实的情况是，这段时间我参与了几个项目，编程经验也因此积累了不少，所以对于《Effective Java》这本书里推荐的「最佳实践」有了一点点的思考与理解。）</p>
<p>其实，到目前为止，我还是会时不时地拿起这本书来翻看，每次读都感觉与上一次不一样，这也许就是「温故知新」的意思吧。</p>
<h2 id="第三版新条目"><a href="#第三版新条目" class="headerlink" title="第三版新条目"></a>第三版新条目</h2><p>上面的絮絮叨叨大家可以不用关心，现在我就来介绍下第三版中加入的一些新的条目。</p>
<p>大家可以先看下下面这张图，有个整体的概念。<br><img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1528040591/blog/15280317412354.jpg" alt="Java新特性对照表"></p>
<p>因为，《Effective Java 第二版》的原版是2008年出版的，至今（2018）年已经有十年了，Java 语言在这十年里发展的也比较迅速，Java语言中又有了些新的「最佳实践」了，幸好作者 Joshua Bloch 大叔重操旧笔为我们这群麻瓜带来了与时俱进地「最佳实践」。</p>
<p>这本书的原版是去年完稿的（2017年12月18号），作者正好补充了 Java 7、Java 8 和 Java 9 的一些「最佳实践」。另外，想必关注 Java 发展的麻瓜们已经了解到了 Java 之后的发版规则改了，<a href="http://www.infoq.com/cn/news/2017/09/Java6Month" target="_blank" rel="noopener">「Java版本发布周期变更为每六个月一次」</a>。是不是一下子觉得有点紧张了啊，其实也没什么好担心的，新特性的快速添加，对我们也是好事，可以减少一些低效的操作，使用新特性来解放生产力。</p>
<h3 id="Java-7-新特性"><a href="#Java-7-新特性" class="headerlink" title="Java 7 新特性"></a>Java 7 新特性</h3><ul>
<li>try-with-resources | 一种新的资源关闭处理方式</li>
<li>@SafeVarargs | 忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告</li>
</ul>
<h3 id="Java-8-新特性"><a href="#Java-8-新特性" class="headerlink" title="Java 8 新特性"></a>Java 8 新特性</h3><ul>
<li>Lambdas | 引入函数式编程</li>
<li>Streams | 流式数据处理</li>
<li>Optionals | 参考Google的Guava类库实现的，用来解决空指针异常（NullPointerException，NPE）问题</li>
<li>Default methods in interfaces | 接口中可以有默认实现方法了</li>
</ul>
<h3 id="Java-9-新特性"><a href="#Java-9-新特性" class="headerlink" title="Java 9 新特性"></a>Java 9 新特性</h3><ul>
<li>Modules | 将 JDK 源代码重新组织为模块，对构建系统进行增强以使之支持对模块的编译，并在构建时强制对模块边界的应用</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇文章只是大概的介绍了下新添加的条目，具体的内容还是需要读者去阅读书籍去了解，本人目前也在阅读当中，后续有什么阅读感悟会及时与诸君分享的。那么，重要的问题来了，如何去获取这本书籍呢？因为中文翻译版本还没有那么快，那么，如果你对你的英文还感到有点自信，可以试试阅读英文原版。这里我就造福下大家了。下载地址：<a href="https://pan.baidu.com/s/1mTEtBGCSbZay9hy8k_rp-Q" target="_blank" rel="noopener">《Effective Java 第三版原版pdf》</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.infoq.com/cn/news/2018/02/JavaSupportJan18" target="_blank" rel="noopener">Oracle加快终止对以往Java版本的免费支持期</a></li>
<li><a href="http://www.oracle.com/technetwork/java/javase/jdk-relnotes-index-2162236.html" target="_blank" rel="noopener">JDK 官方发版说明</a></li>
<li><a href="http://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html" target="_blank" rel="noopener">JDK 8 新特性</a></li>
<li><a href="http://www.infoq.com/cn/news/2014/06/java8-learning-resources" target="_blank" rel="noopener">Java 8学习资料汇总</a></li>
<li><a href="https://pan.baidu.com/s/1mTEtBGCSbZay9hy8k_rp-Q" target="_blank" rel="noopener">《Effective Java 第三版原版pdf》</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 书籍 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> best-practice </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git 常用命令小结]]></title>
      <url>https://craneyuan.github.io/2018/05/07/git-flow-daily/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>阅读本篇文章需要读者了解 Git 的基本用法，如果你对 Git 完全不了解，请先行移步了解 Git 基础。<br>下面是几份本人觉得不错的 Git 入门教程，新手可以参考。</p>
<ul>
<li><a href="http://www.worldhello.net/gotgit/index.html" target="_blank" rel="noopener">《Git权威指南》| 国内一位大牛写的介绍 Git 用法的开源书籍，很详实</a></li>
<li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">《Pro Git》| Git 官方社区编著的介绍 Git 用法的书籍</a></li>
</ul>
<h2 id="创建新分支，并且切换到新分支"><a href="#创建新分支，并且切换到新分支" class="headerlink" title="创建新分支，并且切换到新分支"></a>创建新分支，并且切换到新分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">&gt; git checkout -b &lt;new_branch_name&gt; # 根据当前所在分支，创建新分支</span>
<span class="line">&gt; git checkout -b &lt;new_branch_name&gt; &lt;remote_name&gt;/&lt;remote_branch_name&gt; # 根据远程分支，创建分支</span>
</pre></td></tr></table></figure>
<h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">&gt; git checkout &lt;branch_name&gt;</span>
</pre></td></tr></table></figure>
<h2 id="删除分支（本地-远程）"><a href="#删除分支（本地-远程）" class="headerlink" title="删除分支（本地/远程）"></a>删除分支（本地/远程）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">&gt; git branch -d &lt;branch_name&gt; # 删除本地分支，当该分支没有关联远程分支或者关联的远程分支已经合并过，才会被允许删除</span>
<span class="line">&gt; git branch -D &lt;branch_name&gt; # 强制删除本地分支</span>
<span class="line">&gt; git push &lt;remote_name&gt; -d &lt;branch_name&gt; # 删除远程分支，git v1.7.0（2010年的版本）之后支持</span>
<span class="line">&gt; git push &lt;remote_name&gt; :&lt;branch_name&gt; # 删除远程分支，旧方式，新的也兼容这种</span>
</pre></td></tr></table></figure>
<h2 id="分支重命名"><a href="#分支重命名" class="headerlink" title="分支重命名"></a>分支重命名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">&gt; git branch (-m | -M) [&lt;oldbranch&gt;] &lt;newbranch&gt; # 重命名分支语法，-M 强制重命名，具体参见 git branch --help</span>
<span class="line">&gt; git branch -m &lt;newbranch&gt; # 重命名当前分支</span>
<span class="line">&gt; git branch -m &lt;oldbranch&gt; &lt;newbranch&gt; # 重命名指定分支</span>
</pre></td></tr></table></figure>
<h2 id="重写-commit-信息"><a href="#重写-commit-信息" class="headerlink" title="重写 commit 信息"></a>重写 commit 信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
</pre></td><td class="code"><pre><span class="line">&gt; git rebase -i HEAD~&lt;num&gt; # 交互式地重写 commit 信息，将会用终端默认的编辑器进行操作</span>
<span class="line"></span>
<span class="line">下面的例子中，保存之后，将会使得[328f67b Update Rust]这一条合并到[f55b189 Update cookbook]</span>
<span class="line"></span>
<span class="line">pick 164bf1c Update cookbook</span>
<span class="line">pick f55b189 Update cookbook</span>
<span class="line">f 328f67b Update Rust</span>
<span class="line">pick 9834843 Update cookbook</span>
<span class="line"></span>
<span class="line"># Rebase 0b6762c..9834843 onto 0b6762c (4 commands)</span>
<span class="line">#</span>
<span class="line"># Commands:</span>
<span class="line"># p, pick = use commit</span>
<span class="line"># r, reword = use commit, but edit the commit message</span>
<span class="line"># e, edit = use commit, but stop for amending</span>
<span class="line"># s, squash = use commit, but meld into previous commit</span>
<span class="line"># f, fixup = like &quot;squash&quot;, but discard this commit&apos;s log message</span>
<span class="line"># x, exec = run command (the rest of the line) using shell</span>
<span class="line"># d, drop = remove commit</span>
<span class="line">#</span>
<span class="line"># These lines can be re-ordered; they are executed from top to bottom.</span>
<span class="line">#</span>
<span class="line"># If you remove a line here THAT COMMIT WILL BE LOST.</span>
<span class="line">#</span>
<span class="line"># However, if you remove everything, the rebase will be aborted.</span>
<span class="line">#</span>
<span class="line"># Note that empty commits are commented out</span>
</pre></td></tr></table></figure>
<blockquote>
<p>注意：最好不要重写公共的 commit 信息，这会给协作者带来不必要的困惑，推荐仅仅重写本地没有提交的 commit 信息。假设，你非得重写远程 commit 信息，请使用 git push -f 来强制更新远程代码。</p>
</blockquote>
<h2 id="从一个分支摘取-commit-到另一个分支"><a href="#从一个分支摘取-commit-到另一个分支" class="headerlink" title="从一个分支摘取 commit 到另一个分支"></a>从一个分支摘取 commit 到另一个分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">&gt; git checkout &lt;target-branch&gt; # 切换到目标分支</span>
<span class="line">&gt; git cherry-pick &lt;commit_id&gt; # 将源分支的 commit 摘取到目的分支中</span>
</pre></td></tr></table></figure>
<h2 id="想要切换分支时，发现本地有一些写了一半的代码"><a href="#想要切换分支时，发现本地有一些写了一半的代码" class="headerlink" title="想要切换分支时，发现本地有一些写了一半的代码"></a>想要切换分支时，发现本地有一些写了一半的代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">&gt; git stash # 将当前工作目录内容储藏</span>
<span class="line">&gt; git stash --include-untracked # 如果新添加了文件，将其一并储藏</span>
<span class="line">&gt; git stash pop # 将储藏的内容恢复到当前分支</span>
</pre></td></tr></table></figure>
<h2 id="回版、撤销commit"><a href="#回版、撤销commit" class="headerlink" title="回版、撤销commit"></a>回版、撤销commit</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">&gt; git reset --hard &lt;commit_id&gt; # 彻底回退到指定 commit</span>
</pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1525708747/blog/fmxxmiw2k65o8y8k5qts.svg" alt="git 回版图解"></p>
<h2 id="丢弃本地新添加的文件"><a href="#丢弃本地新添加的文件" class="headerlink" title="丢弃本地新添加的文件"></a>丢弃本地新添加的文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">&gt; git clean --dry-run # 仅展示将会删除的本地 untracked files</span>
<span class="line">&gt; git clean # 添加 -f 选项，强制删除本地 untracked files</span>
</pre></td></tr></table></figure>
<h2 id="丢弃新的改动"><a href="#丢弃新的改动" class="headerlink" title="丢弃新的改动"></a>丢弃新的改动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">&gt; git checkout . # 注意末尾有个句号</span>
</pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.worldhello.net/gotgit/index.html" target="_blank" rel="noopener">《Git权威指南》</a></li>
<li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">《Pro Git》</a></li>
<li><a href="https://github.com/tiimgreen/github-cheat-sheet" target="_blank" rel="noopener">git cheatsheet</a></li>
<li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html" target="_blank" rel="noopener">图解Git</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[朝花夕拾━杂文选编[持续更新中...]]]></title>
      <url>https://craneyuan.github.io/2018/04/22/awesome-meta-blog/</url>
      <content type="html"><![CDATA[<blockquote>
<p>备注：在没有特殊标注的情况下，本文中的「译文」默认指的是「简体中文」，「原文」默认指的是「英文」。</p>
</blockquote>
<h2 id="提问的智慧（How-To-Ask-Questions-The-Smart-Way）"><a href="#提问的智慧（How-To-Ask-Questions-The-Smart-Way）" class="headerlink" title="提问的智慧（How To Ask Questions The Smart Way）"></a>提问的智慧（How To Ask Questions The Smart Way）</h2><blockquote>
<p>这篇文章的作者是<a href="https://zh.wikipedia.org/wiki/埃里克·雷蒙" target="_blank" rel="noopener">Eric S. Raymond</a> ，也就是《大教堂与市集》与《Unix编程艺术》的作者，这两本书的内容很精彩；这两本书对于希望了解开源文化、Unix文化的朋友来说值得一读。</p>
</blockquote>
<p>这篇文章教你如何正确地提出技术问题并获得满意的答案。这篇文章介绍了作者所认为一位发问者在发问之前应该要做好什么，而什么又是不该做的。作者认为这样能让问题容易令人理解，而且发问者自己也能学到较多东西。此文在网络上受到欢迎，被广泛转载而广为人知甚至奉为经典。著名的两个缩写STFW（Search the fxxking web）以及RTFM（Read the fxxking manual）就是出自本文。</p>
<ul>
<li>译文地址：<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md" target="_blank" rel="noopener">提问的智慧</a></li>
<li>原文地址：<a href="http://www.catb.org/~esr/faqs/smart-questions.html" target="_blank" rel="noopener">How To Ask Questions The Smart Way</a></li>
</ul>
<h2 id="如何有效地报告-Bug（How-to-Report-Bugs-Effectively）"><a href="#如何有效地报告-Bug（How-to-Report-Bugs-Effectively）" class="headerlink" title="如何有效地报告 Bug（How to Report Bugs Effectively）"></a>如何有效地报告 Bug（How to Report Bugs Effectively）</h2><blockquote>
<p>这篇文章的作者是<a href="https://www.chiark.greenend.org.uk/~sgtatham/" target="_blank" rel="noopener">Simon Tatham</a> ，他是一名专业的自由软件程序员。</p>
</blockquote>
<p>这篇文章教你如何有效地报告 Bug，在此我想一些处理过「工单」的开发人员应该能够明白一份「有效的 Bug 报告」对于解决问题是多么的重要。</p>
<ul>
<li>译文地址：<a href="https://www.chiark.greenend.org.uk/~sgtatham/bugs-cn.html" target="_blank" rel="noopener">如何有效地报告 Bug</a></li>
<li>原文地址：<a href="https://www.chiark.greenend.org.uk/~sgtatham/bugs.html" target="_blank" rel="noopener">How to Report Bugs Effectively</a></li>
</ul>
<h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2>]]></content>
      
        <categories>
            
            <category> 杂项 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[关于日志的一些事，我想你应该了解]]></title>
      <url>https://craneyuan.github.io/2018/03/29/thinking-of-log/</url>
      <content type="html"><![CDATA[<h2 id="日志：每个软件工程师都应该知道的有关实时数据的统一概念"><a href="#日志：每个软件工程师都应该知道的有关实时数据的统一概念" class="headerlink" title="日志：每个软件工程师都应该知道的有关实时数据的统一概念"></a>日志：每个软件工程师都应该知道的有关实时数据的统一概念</h2><ul>
<li>原文链接：<a href="https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying" target="_blank" rel="noopener">The Log: What every software engineer should know about real-time data’s unifying abstraction</a> - <a href="http://www.linkedin.com/in/jaykreps" target="_blank" rel="noopener">Jay Kreps</a>，2013-12-16   </li>
<li>译文链接：<a href="https://github.com/crane-yuan/translations/tree/master/log-what-every-software-engineer-should-know-about-real-time-datas-unifying" target="_blank" rel="noopener">日志：每个软件工程师都应该知道的有关实时数据的统一概念</a></li>
</ul>
<p>为了方便阅读，我把它给转换成 PDF 格式了。</p>


	<div class="row">
		<iframe src="https://drive.google.com/file/d/1mvjJZMReTYynW22ZRT0G_28mdR1GUtvN/preview" style="width:100%; height:550px"></iframe>
	</div>



<h2 id="最佳日志实践（v2-0）"><a href="#最佳日志实践（v2-0）" class="headerlink" title="最佳日志实践（v2.0）"></a>最佳日志实践（v2.0）</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/27363484" target="_blank" rel="noopener">最佳日志实践（v2.0）</a></li>
</ul>
<h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2>]]></content>
      
        <categories>
            
            <category> 杂项 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo代码块前后空白行问题]]></title>
      <url>https://craneyuan.github.io/2018/02/25/hexo-code-style-redundant-blank-solution/</url>
      <content type="html"><![CDATA[<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>1.找到<code>hexo-util/lib/highlight.js</code>文件<br>一般的路径为<code>${blog_path}/node_modules/hexo-util/lib/highlight.js</code><br>2.修改<code>highlight.js</code>文件中的代码<br>大概在<code>35~38</code>行<br>修改前：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">numbers += <span class="string">'&lt;div class="line"&gt;'</span> + (firstLine + i) + <span class="string">'&lt;/div&gt;'</span>;</span>
<span class="line">content += <span class="string">'&lt;div class="line'</span>;</span>
<span class="line">content += (mark.indexOf(firstLine + i) !== <span class="number">-1</span>) ? <span class="string">' marked'</span> : <span class="string">''</span>;</span>
<span class="line">content += <span class="string">'"&gt;'</span> + line + <span class="string">'&lt;/div&gt;'</span>;</span>
</pre></td></tr></table></figure></p>
<p>修改后：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">numbers += <span class="string">'&lt;span class="line"&gt;'</span> + (firstLine + i) + <span class="string">'&lt;/span&gt;\n'</span>;</span>
<span class="line">content += <span class="string">'&lt;span class="line'</span>;</span>
<span class="line">content += (mark.indexOf(firstLine + i) !== <span class="number">-1</span>) ? <span class="string">' marked'</span> : <span class="string">''</span>;</span>
<span class="line">content += <span class="string">'"&gt;'</span> + line + <span class="string">'&lt;/span&gt;\n'</span>;</span>
</pre></td></tr></table></figure></p>
<blockquote>
<p>注意：主要是将<code>&lt;div&gt;</code>换成了<code>&lt;span&gt;</code></p>
</blockquote>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://leokongwq.github.io/2016/10/14/hexo-codeblock-multiblank.html" target="_blank" rel="noopener">hexo代码块前后空白行问题</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Spring Boot的AOP处理自定义注解]]></title>
      <url>https://craneyuan.github.io/2018/01/11/spring-boot-aop-custom-annotation/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇文章<a href="https://craneyuan.github.io/2017/12/28/java-annotations-introduction/">Java 注解介绍</a>讲解了下Java注解的基本使用方式，并且通过自定义注解实现了一个简单的测试工具；本篇文章将介绍如何使用Spring Boot的AOP来简化处理自定义注解，并将通过实现一个简单的方法执行时间统计工具为样例来讲解这些内容。</p>
<h2 id="AOP概念"><a href="#AOP概念" class="headerlink" title="AOP概念"></a>AOP概念</h2><blockquote>
<p>面向侧面的程序设计（aspect-oriented programming，AOP，又译作面向方面的程序设计、观点导向编程、剖面导向程序设计）是计算机科学中的一个术语，指一种程序设计范型。该范型以一种称为侧面（aspect，又译作方面）的语言构造为基础，侧面是一种新的模块化机制，用来描述分散在对象、类或函数中的横切关注点（crosscutting concern）。</p>
</blockquote>
<p>侧面的概念源于对面向对象的程序设计的改进，但并不只限于此，它还可以用来改进传统的函数。与侧面相关的编程概念还包括元对象协议、主题（subject）、混入（mixin）和委托。</p>
<blockquote>
<p>注释：以上定义源自中文维基百科（如果访问不了，可以通过修改系统的hosts文件访问，<code>198.35.26.96 zh.wikipedia.org #中文维基百科</code>，只能帮到这了，如果还是上不了，那就麻烦上网搜索下怎么修改系统的hosts文件，不同系统下hosts文件位置不一样，如果是Linux或者Mac系统，我就直接告诉你吧，一般文件路径是<code>/etc/hosts</code>），AOP这个词的翻译有点和国内主流叫法不一致，国内主流都把AOP译做「面向切面编程」，大家不要拘泥于叫法，知道指的是同一个东西即可。</p>
</blockquote>
<p>估计，你看了这个定义也是懵的，如果想深入了解可以去知乎看看大佬们是如何掰扯的<a href="https://www.zhihu.com/question/24863332" target="_blank" rel="noopener">什么是面向切面编程AOP？</a>。我这边还是就直接上例子了吧。</p>
<h2 id="Spring-Boot的AOP环境准备"><a href="#Spring-Boot的AOP环境准备" class="headerlink" title="Spring Boot的AOP环境准备"></a>Spring Boot的AOP环境准备</h2><p>在<code>pom.xml</code>中引入相应的依赖模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
</pre></td><td class="code"><pre><span class="line">&lt;!-- Spring Boot依赖包 --&gt;</span>
<span class="line">&lt;parent&gt;</span>
<span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span>
<span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span>
<span class="line">    &lt;version&gt;1.5.1.RELEASE&lt;/version&gt;</span>
<span class="line">&lt;/parent&gt;</span>
<span class="line">&lt;dependencies&gt;</span>
<span class="line">    &lt;!-- AOP依赖模块 --&gt;</span>
<span class="line">    &lt;dependency&gt;</span>
<span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span>
<span class="line">        &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span>
<span class="line">    &lt;/dependency&gt;</span>
<span class="line">    &lt;!-- Web依赖模块 --&gt;</span>
<span class="line">    &lt;dependency&gt;</span>
<span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span>
<span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span>
<span class="line">    &lt;/dependency&gt;</span>
<span class="line">&lt;/dependencies&gt;</span>
</pre></td></tr></table></figure></p>
<h2 id="先实现一个简单的Web请求处理"><a href="#先实现一个简单的Web请求处理" class="headerlink" title="先实现一个简单的Web请求处理"></a>先实现一个简单的Web请求处理</h2><p>一个简单的处理Web请求的Controller。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.craneyuan.controller;</span>
<span class="line"></span>
<span class="line"><span class="keyword">import</span> com.craneyuan.service.IHelloWorldService;</span>
<span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span>
<span class="line"></span>
<span class="line"><span class="meta">@RestController</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span> </span>&#123;</span>
<span class="line">    <span class="meta">@Autowired</span></span>
<span class="line">    <span class="keyword">private</span> IHelloWorldService helloWorldService;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>, method = RequestMethod.GET)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> helloWorldService.getHelloMessage(name);</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<p>一个简单的HelloWorld服务实现类，接口的定义我就不展示代码了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.craneyuan.service.impl;</span>
<span class="line"></span>
<span class="line"><span class="keyword">import</span> com.craneyuan.annotation.AnalysisActuator;</span>
<span class="line"><span class="keyword">import</span> com.craneyuan.service.IHelloWorldService;</span>
<span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span>
<span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span>
<span class="line"></span>
<span class="line"><span class="keyword">import</span> java.util.Optional;</span>
<span class="line"></span>
<span class="line"><span class="meta">@Service</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldServiceImpl</span> <span class="keyword">implements</span> <span class="title">IHelloWorldService</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHelloMessage</span><span class="params">(String name)</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + Optional.ofNullable(name).orElse(<span class="string">"World!"</span>);</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<p>这样一个简单的Web服务就弄好了，你可以启动项目用<code>curl</code>命令调用试下，例如：<code>curl -XGET -i &quot;http://127.0.0.1:8080/hello?name=Java&quot;</code>，如果一切顺利的话，你将会得到类似下面这样的响应：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line">HTTP/1.1 200</span>
<span class="line">Content-Type: text/plain;charset=UTF-8</span>
<span class="line">Content-Length: 11</span>
<span class="line">Date: Thu, 11 Jan 2018 09:45:38 GMT</span>
<span class="line"></span>
<span class="line">Hello Java</span>
</pre></td></tr></table></figure>
<h2 id="使用自定义注解来统计方法的执行时间"><a href="#使用自定义注解来统计方法的执行时间" class="headerlink" title="使用自定义注解来统计方法的执行时间"></a>使用自定义注解来统计方法的执行时间</h2><p>先定义一个用来统计方法执行时间的注解。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.craneyuan.annotation;</span>
<span class="line"></span>
<span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span>
<span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span>
<span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span>
<span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span>
<span class="line"></span>
<span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span>
<span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span>
<span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AnalysisActuator &#123;</span>
<span class="line">    <span class="function">String <span class="title">note</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<p>然后定义一个切面，来处理刚刚定义的注解。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.craneyuan.aspect;</span>
<span class="line"></span>
<span class="line"><span class="keyword">import</span> com.craneyuan.annotation.AnalysisActuator;</span>
<span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span>
<span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span>
<span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span>
<span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span>
<span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span>
<span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span>
<span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span>
<span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span>
<span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span>
<span class="line"></span>
<span class="line"><span class="meta">@Aspect</span></span>
<span class="line"><span class="meta">@Component</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnalysisActuatorAspect</span> </span>&#123;</span>
<span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(AnalysisActuatorAspect.class);</span>
<span class="line"></span>
<span class="line">    ThreadLocal&lt;Long&gt; beginTime = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(analysisActuator)"</span>)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serviceStatistics</span><span class="params">(AnalysisActuator analysisActuator)</span> </span>&#123;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Before</span>(<span class="string">"serviceStatistics(analysisActuator)"</span>)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">(JoinPoint joinPoint, AnalysisActuator analysisActuator)</span> </span>&#123;</span>
<span class="line">        <span class="comment">// 记录请求到达时间</span></span>
<span class="line">        beginTime.set(System.currentTimeMillis());</span>
<span class="line">        log.info(<span class="string">"cy666 note:&#123;&#125;"</span>, analysisActuator.note());</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@After</span>(<span class="string">"serviceStatistics(analysisActuator)"</span>)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfter</span><span class="params">(AnalysisActuator analysisActuator)</span> </span>&#123;</span>
<span class="line">        log.info(<span class="string">"cy666 statistic time:&#123;&#125;, note:&#123;&#125;"</span>, System.currentTimeMillis() - beginTime.get(), analysisActuator.note());</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<p>最后，只要在需要统计执行时间的方法上加上<code>@AnalysisActuator</code>注解就行了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.craneyuan.service.impl;</span>
<span class="line"></span>
<span class="line"><span class="keyword">import</span> com.craneyuan.annotation.AnalysisActuator;</span>
<span class="line"><span class="keyword">import</span> com.craneyuan.service.IHelloWorldService;</span>
<span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span>
<span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span>
<span class="line"></span>
<span class="line"><span class="keyword">import</span> java.util.Optional;</span>
<span class="line"></span>
<span class="line"><span class="meta">@Service</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldServiceImpl</span> <span class="keyword">implements</span> <span class="title">IHelloWorldService</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@AnalysisActuator</span>(note = <span class="string">"获取聊天信息方法"</span>)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHelloMessage</span><span class="params">(String name)</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + Optional.ofNullable(name).orElse(<span class="string">"World!"</span>);</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<p>启动项目，用<code>curl</code>命令随便调用一下，如果顺利的话就可以观察到切面打印的日志了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">...</span>
<span class="line">cy666 statistic time:4, note:获取聊天信息方法</span>
</pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples/spring-boot-sample-aop" target="_blank" rel="noopener">Spring Boot AOP Sample</a></li>
<li><a href="https://juejin.im/entry/5849175db123db0066048508" target="_blank" rel="noopener">Spring 中使用 AOP 切面解析处理自定义注解</a></li>
<li><a href="https://crane-yuan.github.io/2017/12/28/java-annotations-introduction/" target="_blank" rel="noopener">Java 注解介绍</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Java平台 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 注解介绍]]></title>
      <url>https://craneyuan.github.io/2017/12/28/java-annotations-introduction/</url>
      <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote>
<p>Java注解又称Java标注，是Java语言5.0版本开始支持加入源代码的特殊语法元数据（元数据 Metadata：描述数据的数据）。</p>
</blockquote>
<p>Java语言中的类、方法、变量、参数和包等都可以被标注。和Javadoc不同，Java标注可以通过反射获取标注内容。在编译器生成类文件时，标注可以被嵌入到字节码中。Java虚拟机可以保留标注内容，在运行时可以获取到标注内容。 当然它也支持自定义Java标注</p>
<h2 id="内置的注解"><a href="#内置的注解" class="headerlink" title="内置的注解"></a>内置的注解</h2><p>Java 5 定义了一套注解，共有 7 个，3 个在 java.lang 中，剩下 4 个在 java.lang.annotation 中。</p>
<h3 id="作用在代码的注解（java-lang包中）"><a href="#作用在代码的注解（java-lang包中）" class="headerlink" title="作用在代码的注解（java.lang包中）"></a>作用在代码的注解（java.lang包中）</h3><ul>
<li>@Override - 检查该方法是否是重载方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。</li>
<li>@Deprecated - 标记过时方法。如果使用该方法，会报编译警告。</li>
<li>@SuppressWarnings - 指示编译器去忽略注解中声明的警告。</li>
</ul>
<h3 id="作用在其他注解的注解-或者说-元注解，java-lang-annotation包中"><a href="#作用在其他注解的注解-或者说-元注解，java-lang-annotation包中" class="headerlink" title="作用在其他注解的注解(或者说 元注解，java.lang.annotation包中)"></a>作用在其他注解的注解(或者说 元注解，java.lang.annotation包中)</h3><ul>
<li>@Retention - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。</li>
<li>@Documented - 标记这些注解是否包含在用户文档中。</li>
<li>@Target - 标记这个注解应该是哪种 Java 成员。</li>
<li>@Inherited - 标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)</li>
</ul>
<h3 id="从-Java-7-开始，额外添加了-3-个注解"><a href="#从-Java-7-开始，额外添加了-3-个注解" class="headerlink" title="从 Java 7 开始，额外添加了 3 个注解"></a>从 Java 7 开始，额外添加了 3 个注解</h3><ul>
<li>@SafeVarargs - Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。</li>
<li>@FunctionalInterface - Java 8 开始支持，标识一个匿名函数或函数式接口。</li>
<li>@Repeatable - Java 8 开始支持，标识某注解可以在同一个声明上使用多次。</li>
</ul>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>注解可以用于许多不同的目的，最常见的是：</p>
<ul>
<li>给编译器提供信息：编译器可以使用注解来产生警告，甚至根据不同的规则产生错误。 这种用法的一个例子是Java 8 的 @FunctionalInterface 注解。 这使编译器验证注释类，并检查它是否是一个正确的功能接口。</li>
<li>文档化：软件应用程序可以使用注解来测量代码的质量，如FindBugs或PMD，或者像Jenkins，Jira或Teamcity一样自动生成报告。</li>
<li>代码生成：使用注解可以使用代码中存在的元数据信息自动生成代码或XML文件。 JAXB库就是一个很好的例子。</li>
<li>运行时处理：在运行时检查的注解可用于不同的目标，如单元测试（Junit），依赖注入（Spring），验证，日志记录（Log4J），数据访问（Hibernate）等。</li>
</ul>
<h2 id="实际例子"><a href="#实际例子" class="headerlink" title="实际例子"></a>实际例子</h2><p>讲个 <a href="https://docs.oracle.com/javase/1.5.0/docs/guide/language/annotations.html" target="_blank" rel="noopener">Java 官方提供的例子</a>，用注解实现简单的测试框架。</p>
<h3 id="MyTest-注解"><a href="#MyTest-注解" class="headerlink" title="@MyTest 注解"></a>@MyTest 注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span>
<span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span>
<span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span>
<span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span>
<span class="line"></span>
<span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span>
<span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span>
<span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTest &#123;</span>
<span class="line"></span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="FooTest-测试类"><a href="#FooTest-测试类" class="headerlink" title="FooTest 测试类"></a>FooTest 测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooTest</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@MyTest</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@MyTest</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Boom"</span>);</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m4</span><span class="params">()</span> </span>&#123;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@MyTest</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m5</span><span class="params">()</span> </span>&#123;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m6</span><span class="params">()</span> </span>&#123;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@MyTest</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m7</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Crash"</span>);</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m8</span><span class="params">()</span> </span>&#123;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="RunMyTests-测试执行类"><a href="#RunMyTests-测试执行类" class="headerlink" title="RunMyTests 测试执行类"></a>RunMyTests 测试执行类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span>
<span class="line"></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunMyTests</span> </span>&#123;</span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">        <span class="keyword">int</span> passed = <span class="number">0</span>;</span>
<span class="line">        <span class="keyword">int</span> failed = <span class="number">0</span>;</span>
<span class="line"></span>
<span class="line">        <span class="keyword">if</span> (args.length &lt; <span class="number">1</span>) &#123;</span>
<span class="line">            System.out.println(<span class="string">"please give test class."</span>);</span>
<span class="line">            System.exit(<span class="number">1</span>);</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        <span class="keyword">for</span> (Method method : Class.forName(args[<span class="number">0</span>]).getMethods()) &#123;</span>
<span class="line">            <span class="keyword">if</span> (method.isAnnotationPresent(MyTest.class)) &#123;</span>
<span class="line">                <span class="keyword">try</span> &#123;</span>
<span class="line">                    method.invoke(<span class="keyword">null</span>);</span>
<span class="line">                    passed++;</span>
<span class="line">                &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span>
<span class="line">                    System.out.printf(<span class="string">"Test %s failed: %s %n"</span>, method, ex.getCause());</span>
<span class="line">                    failed++;</span>
<span class="line">                &#125;</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;</span>
<span class="line">        System.out.printf(<span class="string">"Passed: %d, Failed %d%n"</span>, passed, failed);</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="编译、运行测试执行类"><a href="#编译、运行测试执行类" class="headerlink" title="编译、运行测试执行类"></a>编译、运行测试执行类</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">&gt; javac FooTest.java MyTest.java RunMyTests.java</span>
<span class="line">&gt; java RunMyTests FooTest</span>
<span class="line">Test public static void FooTest.m3() failed: java.lang.RuntimeException: Boom</span>
<span class="line">Test public static void FooTest.m7() failed: java.lang.RuntimeException: Crash</span>
<span class="line">Passed: 2, Failed 2</span>
</pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.javacodegeeks.com/2014/11/java-annotations-tutorial.html" target="_blank" rel="noopener">Java Annotations Tutorial – The ULTIMATE Guide (PDF Download)</a></li>
<li><a href="https://www.jcp.org/aboutJava/communityprocess/final/jsr175/index.html" target="_blank" rel="noopener">JSR 175 A metadata facility for the Java programming Language</a></li>
<li><a href="https://jcp.org/en/jsr/detail?id=250" target="_blank" rel="noopener">JSR 250 Common Annotations for the Java Platform</a></li>
<li><a href="http://zhangchuzhao.site/2016/09/23/java-annotation/" target="_blank" rel="noopener">Java 注解深入理解</a></li>
<li><a href="https://docs.oracle.com/javase/tutorial/java/annotations/" target="_blank" rel="noopener">Lesson: Annotations</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Java平台 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Greasy Fork 用户脚本简介]]></title>
      <url>https://craneyuan.github.io/2017/03/25/greasyfork-introduction/</url>
      <content type="html"><![CDATA[<h2 id="Greasy-Fork-简介"><a href="#Greasy-Fork-简介" class="headerlink" title="Greasy Fork 简介"></a><a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">Greasy Fork 简介</a></h2><blockquote>
<p>用户脚本为您增强对浏览体验的控制权。在安装之后，它们可自动为您访问的网站添加功能，或使其更加易用、更加清新。在 Greasy Fork 上的用户脚本是由其他用户编写并向全世界发表的，您可以免费和轻松地安装。</p>
</blockquote>
<h2 id="如何使用-Greasy-Fork"><a href="#如何使用-Greasy-Fork" class="headerlink" title="如何使用 Greasy Fork"></a>如何使用 Greasy Fork</h2><h3 id="第一步：安装一个用户脚本管理器"><a href="#第一步：安装一个用户脚本管理器" class="headerlink" title="第一步：安装一个用户脚本管理器"></a>第一步：安装一个用户脚本管理器</h3><p>要使用用户脚本，您首先需要安装一个用户脚本管理器。根据您使用的浏览器不同，可用的用户脚本管理器也有所不同。</p>
<ul>
<li><a href="http://tampermonkey.net/" target="_blank" rel="noopener">Tampermonkey</a>，支持Chrome, Firefox, Microsoft Edge, Safari, Opera Next, Maxthon</li>
<li><a href="https://addons.mozilla.org/firefox/addon/greasemonkey/" target="_blank" rel="noopener">Greasemonkey</a>，支持Firefox</li>
</ul>
<h3 id="第二步：安装一个用户脚本"><a href="#第二步：安装一个用户脚本" class="headerlink" title="第二步：安装一个用户脚本"></a>第二步：安装一个用户脚本</h3><p><a href="https://greasyfork.org/zh-CN/scripts" target="_blank" rel="noopener">浏览此网站</a> 查找您想尝试的用户脚本。</p>
<p>在您找到想要的用户脚本后，点击用户脚本页面上绿色的安装按钮，您的用户脚本管理器将询问您是否安装。</p>
<h3 id="第三步：使用用户脚本"><a href="#第三步：使用用户脚本" class="headerlink" title="第三步：使用用户脚本"></a>第三步：使用用户脚本</h3><p>转至用户脚本适用的网站。它应该已自动启动和生效。在试用用户脚本后，您可以返回用户脚本页面，给用户脚本的作者留下反馈。</p>
<h2 id="「新浪微博一键清空」脚本分享"><a href="#「新浪微博一键清空」脚本分享" class="headerlink" title="「新浪微博一键清空」脚本分享"></a><a href="https://greasyfork.org/zh-CN/scripts/25697-新浪微博一键清空" target="_blank" rel="noopener">「新浪微博一键清空」</a>脚本分享</h2><p>清空您发过的所有微博，目前没有备份功能，慎用！</p>
<p>项目地址：<a href="https://github.com/crane-yuan/delmyweibo" target="_blank" rel="noopener">https://github.com/crane-yuan/delmyweibo</a></p>
<h3 id="演示动画"><a href="#演示动画" class="headerlink" title="演示动画"></a>演示动画</h3><p><img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1521870142/blog/qav3p4kc5nok6n6inj8s.gif" alt="删除微博脚本演示动画"></p>
]]></content>
      
        <categories>
            
            <category> 杂项 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> plugin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[中文文案排版指北]]></title>
      <url>https://craneyuan.github.io/2017/03/15/chinese-copywriting-guidelines/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不知不觉中，写个人博客也有一年多了。记得刚开始写博客时，内心总是很纠结，非常担心自己写得不好，给别人瞧着，被人骂，后来才明白写博客是一件只和自己有关的事。</p>
<p>虽然，写博客是一件个人的事，但是，一份好的排版也是对自己的一种负责任吧！</p>
<p>下面是我从GitHub上了解到的一份<a href="https://github.com/mzlogin/chinese-copywriting-guidelines" target="_blank" rel="noopener">「中文文安排版指北」</a>，记录一下，以后希望都按照这个规范来排版，养成一个好的书写习惯。</p>
<hr>
<h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><p>「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。</p>
<p>与大家共勉之。」——<a href="https://github.com/vinta/pangu.js" target="_blank" rel="noopener">vinta/paranoid-auto-spacing</a></p>
<h3 id="中英文之间需要增加空格"><a href="#中英文之间需要增加空格" class="headerlink" title="中英文之间需要增加空格"></a>中英文之间需要增加空格</h3><p>正确：</p>
<blockquote>
<p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>在LeanCloud上，数据存储是围绕<code>AVObject</code>进行的。</p>
<p>在 LeanCloud上，数据存储是围绕<code>AVObject</code> 进行的。</p>
</blockquote>
<p>完整的正确用法：</p>
<blockquote>
<p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。每个 <code>AVObject</code> 都包含了与 JSON 兼容的 key-value 对应的数据。数据是 schema-free 的，你不需要在每个 <code>AVObject</code> 上提前指定存在哪些键，只要直接设定对应的 key-value 即可。</p>
</blockquote>
<p>例外：「豆瓣FM」等产品名词，按照官方所定义的格式书写。</p>
<h3 id="中文与数字之间需要增加空格"><a href="#中文与数字之间需要增加空格" class="headerlink" title="中文与数字之间需要增加空格"></a>中文与数字之间需要增加空格</h3><p>正确：</p>
<blockquote>
<p>今天出去买菜花了 5000 元。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>今天出去买菜花了 5000元。</p>
<p>今天出去买菜花了5000元。</p>
</blockquote>
<h3 id="数字与单位之间需要增加空格"><a href="#数字与单位之间需要增加空格" class="headerlink" title="数字与单位之间需要增加空格"></a>数字与单位之间需要增加空格</h3><p>正确：</p>
<blockquote>
<p>我家的光纤入户宽带有 10 Gbps，SSD 一共有 20 TB。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>我家的光纤入户宽带有 10Gbps，SSD 一共有 10TB。</p>
</blockquote>
<p>例外：度／百分比与数字之间不需要增加空格：</p>
<p>正确：</p>
<blockquote>
<p>今天是 233° 的高温。</p>
<p>新 MacBook Pro 有 15% 的 CPU 性能提升。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>今天是 233 ° 的高温。</p>
<p>新 MacBook Pro 有 15 % 的 CPU 性能提升。</p>
</blockquote>
<h3 id="全角标点与其他字符之间不加空格"><a href="#全角标点与其他字符之间不加空格" class="headerlink" title="全角标点与其他字符之间不加空格"></a>全角标点与其他字符之间不加空格</h3><p>正确：</p>
<blockquote>
<p>刚刚买了一部 iPhone，好开心！</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>刚刚买了一部 iPhone ，好开心！</p>
</blockquote>
<h3 id="ms-text-autospace-to-the-rescue"><a href="#ms-text-autospace-to-the-rescue" class="headerlink" title="-ms-text-autospace to the rescue?"></a><code>-ms-text-autospace</code> to the rescue?</h3><p>Microsoft 有个 <a href="http://msdn.microsoft.com/en-us/library/ie/ms531164(v=vs.85" target="_blank" rel="noopener"><code>-ms-text-autospace</code></a>.aspx) 的 CSS 属性可以实现自动为中英文之间增加空白。不过目前并未普及，另外在其他应用场景，例如 OS X、iOS 的用户界面目前并不存在这个特性，所以请继续保持随手加空格的习惯。</p>
<h2 id="标点符号"><a href="#标点符号" class="headerlink" title="标点符号"></a>标点符号</h2><h3 id="不重复使用标点符号"><a href="#不重复使用标点符号" class="headerlink" title="不重复使用标点符号"></a>不重复使用标点符号</h3><p>正确：</p>
<blockquote>
<p>德国队竟然战胜了巴西队！</p>
<p>她竟然对你说「喵」？！</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>德国队竟然战胜了巴西队！！</p>
<p>德国队竟然战胜了巴西队！！！！！！！！</p>
<p>她竟然对你说「喵」？？！！</p>
<p>她竟然对你说「喵」？！？！？？！！</p>
</blockquote>
<h2 id="全角和半角"><a href="#全角和半角" class="headerlink" title="全角和半角"></a>全角和半角</h2><p>不明白什么是全角（全形）与半角（半形）符号？请查看维基百科词条『<a href="http://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2" target="_blank" rel="noopener">全角和半角</a>』。</p>
<h3 id="使用全角中文标点"><a href="#使用全角中文标点" class="headerlink" title="使用全角中文标点"></a>使用全角中文标点</h3><p>正确：</p>
<blockquote>
<p>嗨！你知道嘛？今天前台的小妹跟我说「喵」了哎！</p>
<p>核磁共振成像（NMRI）是什么原理都不知道？JFGI！</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>嗨! 你知道嘛? 今天前台的小妹跟我说 “喵” 了哎!</p>
<p>嗨!你知道嘛?今天前台的小妹跟我说”喵”了哎!</p>
<p>核磁共振成像 (NMRI) 是什么原理都不知道? JFGI!</p>
<p>核磁共振成像(NMRI)是什么原理都不知道?JFGI!</p>
</blockquote>
<h3 id="数字使用半角字符"><a href="#数字使用半角字符" class="headerlink" title="数字使用半角字符"></a>数字使用半角字符</h3><p>正确：</p>
<blockquote>
<p>这件蛋糕只卖 1000 元。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>这件蛋糕只卖 １０００ 元。</p>
</blockquote>
<p>例外：在设计稿、宣传海报中如出现极少量数字的情形时，为方便文字对齐，是可以使用全角数字的。</p>
<h3 id="遇到完整的英文整句、特殊名词，其內容使用半角标点"><a href="#遇到完整的英文整句、特殊名词，其內容使用半角标点" class="headerlink" title="遇到完整的英文整句、特殊名词，其內容使用半角标点"></a>遇到完整的英文整句、特殊名词，其內容使用半角标点</h3><p>正确：</p>
<blockquote>
<p>乔布斯那句话是怎么说的？「Stay hungry, stay foolish.」</p>
<p>推荐你阅读《Hackers &amp; Painters: Big Ideas from the Computer Age》，非常的有趣。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>乔布斯那句话是怎么说的？「Stay hungry，stay foolish。」</p>
<p>推荐你阅读《Hackers＆Painters：Big Ideas from the Computer Age》，非常的有趣。</p>
</blockquote>
<h2 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h2><h3 id="专有名词使用正确的大小写"><a href="#专有名词使用正确的大小写" class="headerlink" title="专有名词使用正确的大小写"></a>专有名词使用正确的大小写</h3><p>大小写相关用法原属于英文书写范畴，不属于本 wiki 讨论內容，在这里只对部分易错用法进行简述。</p>
<p>正确：</p>
<blockquote>
<p>使用 GitHub 登录</p>
<p>我们的客户有 GitHub、Foursquare、Microsoft Corporation、Google、Facebook, Inc.。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>使用 github 登录</p>
<p>使用 GITHUB 登录</p>
<p>使用 Github 登录</p>
<p>使用 gitHub 登录</p>
<p>使用 gｲんĤЦ8 登录</p>
<p>我们的客户有 github、foursquare、microsoft corporation、google、facebook, inc.。</p>
<p>我们的客户有 GITHUB、FOURSQUARE、MICROSOFT CORPORATION、GOOGLE、FACEBOOK, INC.。</p>
<p>我们的客户有 Github、FourSquare、MicroSoft Corporation、Google、FaceBook, Inc.。</p>
<p>我们的客户有 gitHub、fourSquare、microSoft Corporation、google、faceBook, Inc.。</p>
<p>我们的客户有 gｲんĤЦ8、ｷouЯƧquﾑгє、๓เςг๏ร๏Ŧt ς๏гק๏гคtเ๏ภn、900913、ƒ4ᄃëв๏๏к, IПᄃ.。</p>
</blockquote>
<p>注意：当网页中需要配合整体视觉风格而出现全部大写／小写的情形，HTML 中请使用标准的大小写规范进行书写；并通过 <code>text-transform: uppercase;</code>／<code>text-transform: lowercase;</code> 对表现形式进行定义。</p>
<h3 id="不要使用不地道的缩写"><a href="#不要使用不地道的缩写" class="headerlink" title="不要使用不地道的缩写"></a>不要使用不地道的缩写</h3><p>正确：</p>
<blockquote>
<p>我们需要一位熟悉 JavaScript、HTML5，至少理解一种框架（如 Backbone.js、AngularJS、React 等）的前端开发者。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>我们需要一位熟悉 Js、h5，至少理解一种框架（如 backbone、angular、RJS 等）的 FED。</p>
</blockquote>
<h2 id="争议"><a href="#争议" class="headerlink" title="争议"></a>争议</h2><p>以下用法略带有个人色彩，既：无论是否遵循下述规则，从语法的角度来讲都是<strong>正确</strong>的。</p>
<h3 id="链接之间增加空格"><a href="#链接之间增加空格" class="headerlink" title="链接之间增加空格"></a>链接之间增加空格</h3><p>用法：</p>
<blockquote>
<p>请 <a href="#">提交一个 issue</a> 并分配给相关同事。</p>
<p>访问我们网站的最新动态，请 <a href="#">点击这里</a> 进行订阅！</p>
</blockquote>
<p>对比用法：</p>
<blockquote>
<p>请<a href="#">提交一个 issue</a> 并分配给相关同事。</p>
<p>访问我们网站的最新动态，请<a href="#">点击这里</a>进行订阅！</p>
</blockquote>
<h3 id="简体中文使用直角引号"><a href="#简体中文使用直角引号" class="headerlink" title="简体中文使用直角引号"></a>简体中文使用直角引号</h3><p>用法：</p>
<blockquote>
<p>「老师，『有条不紊』的『紊』是什么意思？」</p>
</blockquote>
<p>对比用法：</p>
<blockquote>
<p>“老师，‘有条不紊’的‘紊’是什么意思？”</p>
</blockquote>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><table>
<thead>
<tr>
<th>仓库</th>
<th>语言</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/vinta/paranoid-auto-spacing" target="_blank" rel="noopener">vinta/paranoid-auto-spacing</a></td>
<td>JavaScript</td>
</tr>
<tr>
<td><a href="https://github.com/huei90/pangu.node" target="_blank" rel="noopener">huei90/pangu.node</a></td>
<td>Node.js</td>
</tr>
<tr>
<td><a href="https://github.com/huacnlee/auto-correct" target="_blank" rel="noopener">huacnlee/auto-correct</a></td>
<td>Ruby</td>
</tr>
<tr>
<td><a href="https://github.com/sparanoid/space-lover" target="_blank" rel="noopener">sparanoid/space-lover</a></td>
<td>PHP (WordPress)</td>
</tr>
<tr>
<td><a href="https://github.com/NauxLiu/auto-correct" target="_blank" rel="noopener">nauxliu/auto-correct</a></td>
<td>PHP</td>
</tr>
<tr>
<td><a href="https://github.com/hotoo/pangu.vim" target="_blank" rel="noopener">hotoo/pangu.vim</a></td>
<td>Vim</td>
</tr>
<tr>
<td><a href="https://github.com/sparanoid/grunt-auto-spacing" target="_blank" rel="noopener">sparanoid/grunt-auto-spacing</a></td>
<td>Node.js (Grunt)</td>
</tr>
<tr>
<td><a href="https://github.com/hjiang/scripts/blob/master/add-space-between-latin-and-cjk" target="_blank" rel="noopener">hjiang/scripts/add-space-between-latin-and-cjk</a></td>
<td>Python</td>
</tr>
</tbody>
</table>
<h2 id="谁在这样做？"><a href="#谁在这样做？" class="headerlink" title="谁在这样做？"></a>谁在这样做？</h2><table>
<thead>
<tr>
<th>网站</th>
<th>文案</th>
<th>UGC</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.apple.com/cn/" target="_blank" rel="noopener">Apple 中国</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="http://www.apple.com/hk/" target="_blank" rel="noopener">Apple 香港</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="http://www.apple.com/tw/" target="_blank" rel="noopener">Apple 台湾</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="http://www.microsoft.com/zh-cn/" target="_blank" rel="noopener">Microsoft 中国</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="http://www.microsoft.com/zh-hk/" target="_blank" rel="noopener">Microsoft 香港</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="http://www.microsoft.com/zh-tw/" target="_blank" rel="noopener">Microsoft 台湾</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="https://www.zhihu.com/" target="_blank" rel="noopener">知乎</a></td>
<td>Yes</td>
<td>部分用户达成</td>
</tr>
<tr>
<td><a href="https://www.v2ex.com/" target="_blank" rel="noopener">V2EX</a></td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td><a href="https://segmentfault.com/" target="_blank" rel="noopener">SegmentFault</a></td>
<td>Yes</td>
<td>部分用户达成</td>
</tr>
<tr>
<td><a href="http://apple4us.com/" target="_blank" rel="noopener">Apple4us</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="https://www.wandoujia.com/" target="_blank" rel="noopener">豌豆荚</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="https://ruby-china.org/" target="_blank" rel="noopener">Ruby China</a></td>
<td>Yes</td>
<td>标题达成</td>
</tr>
<tr>
<td><a href="https://phphub.org/" target="_blank" rel="noopener">PHPHub</a></td>
<td>Yes</td>
<td>标题达成</td>
</tr>
<tr>
<td><a href="http://sspai.com/" target="_blank" rel="noopener">少数派</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
</tbody>
</table>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="http://grammar.about.com/od/punctuationandmechanics/a/Guidelines-For-Using-Capital-Letters.htm" target="_blank" rel="noopener">Guidelines for Using Capital Letters</a></li>
<li><a href="http://en.wikipedia.org/wiki/Letter_case" target="_blank" rel="noopener">Letter case - Wikipedia</a></li>
<li><a href="http://www.oxforddictionaries.com/words/punctuation" target="_blank" rel="noopener">Punctuation - Oxford Dictionaries</a></li>
<li><a href="https://owl.english.purdue.edu/owl/section/1/6/" target="_blank" rel="noopener">Punctuation - The Purdue OWL</a></li>
<li><a href="http://www.wikihow.com/Use-English-Punctuation-Correctly" target="_blank" rel="noopener">How to Use English Punctuation Corrently - wikiHow</a></li>
<li><a href="https://zh.opensuse.org/index.php?title=Help:%E6%A0%BC%E5%BC%8F" target="_blank" rel="noopener">格式 - openSUSE</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2" target="_blank" rel="noopener">全角和半角 - 维基百科</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E5%BC%95%E8%99%9F" target="_blank" rel="noopener">引号 - 维基百科</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E7%96%91%E5%95%8F%E9%A9%9A%E5%98%86%E8%99%9F" target="_blank" rel="noopener">疑问惊叹号 - 维基百科</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 杂项 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[删除单链表中的倒数第N个节点]]></title>
      <url>https://craneyuan.github.io/2016/10/12/remove-the-nth-node-from-end-of-list/</url>
      <content type="html"><![CDATA[<h2 id="基本问题"><a href="#基本问题" class="headerlink" title="基本问题"></a>基本问题</h2><p>如何删除单链表中的倒数第n个节点？</p>
<h2 id="常规解法"><a href="#常规解法" class="headerlink" title="常规解法"></a>常规解法</h2><p>先遍历一遍单链表，计算出单链表的长度，然后，从单链表头部删除指定的节点。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span>
<span class="line"><span class="comment"> * 删除单链表倒数第n个节点，常规解法.</span></span>
<span class="line"><span class="comment"> */</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span>
<span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="comment">//get length of list</span></span>
<span class="line">    ListNode p = head;</span>
<span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span>
<span class="line">        len++;</span>
<span class="line">        p = p.next;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="comment">//if remove first node</span></span>
<span class="line">    <span class="keyword">int</span> fromStart = len - n + <span class="number">1</span>;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">if</span> (fromStart == <span class="number">1</span>) &#123;</span>
<span class="line">        <span class="keyword">return</span> head.next;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="comment">//remove non-first node</span></span>
<span class="line">    p = head;</span>
<span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span>
<span class="line">        i++;</span>
<span class="line"></span>
<span class="line">        <span class="keyword">if</span> (i == fromStart - <span class="number">1</span>) &#123;</span>
<span class="line">            p.next = p.next.next;</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        p = p.next;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">return</span> head;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="一次遍历法"><a href="#一次遍历法" class="headerlink" title="一次遍历法"></a>一次遍历法</h2><p>使用快慢指针。快指针比慢指针提前n个单元。当快指针到达单链表尾部时，慢指针指向待删除节点的前节点。</p>
<h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span>
<span class="line"><span class="comment"> * 删除单链表倒数第n个节点，快慢指针法.</span></span>
<span class="line"><span class="comment"> */</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span>
<span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    ListNode fast = head;</span>
<span class="line">    ListNode slow = head;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span>
<span class="line">        fast = fast.next;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="comment">//if remove the first node</span></span>
<span class="line">    <span class="keyword">if</span> (fast == <span class="keyword">null</span>) &#123;</span>
<span class="line">        head = head.next;</span>
<span class="line">        <span class="keyword">return</span> head;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">while</span> (fast.next != <span class="keyword">null</span>) &#123;</span>
<span class="line">        fast = fast.next;</span>
<span class="line">        slow = slow.next;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    slow.next = slow.next.next;</span>
<span class="line">    <span class="keyword">return</span> head;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://leetcode.com/articles/remove-nth-node-end-list/" target="_blank" rel="noopener">LeetCode-Remove Nth Node From End of List</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[单链表反转问题]]></title>
      <url>https://craneyuan.github.io/2016/10/10/reverse-the-single-linkedlist/</url>
      <content type="html"><![CDATA[<h2 id="基本问题"><a href="#基本问题" class="headerlink" title="基本问题"></a>基本问题</h2><p>如何将单链表反转？</p>
<h2 id="单链表结构定义"><a href="#单链表结构定义" class="headerlink" title="单链表结构定义"></a>单链表结构定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span>
<span class="line"><span class="comment"> * 单链表定义</span></span>
<span class="line"><span class="comment"> */</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span>
<span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> val;</span>
<span class="line">    <span class="keyword">public</span> ListNode next;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListNode</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span>
<span class="line">        val = x;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span>
<span class="line"><span class="comment"> * 单链表反转</span></span>
<span class="line"><span class="comment"> */</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span>
<span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span>
<span class="line">        <span class="keyword">return</span> head;</span>
<span class="line">    &#125;</span>
<span class="line">    ListNode prev = <span class="keyword">null</span>;</span>
<span class="line">    ListNode current = head;</span>
<span class="line">    ListNode next = <span class="keyword">null</span>;</span>
<span class="line">    <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</span>
<span class="line">        next = current.next;</span>
<span class="line">        current.next = prev;</span>
<span class="line">        prev = current;</span>
<span class="line">        current = next;</span>
<span class="line">    &#125;</span>
<span class="line">    head = prev;</span>
<span class="line">    <span class="keyword">return</span> head;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="进阶问题"><a href="#进阶问题" class="headerlink" title="进阶问题"></a>进阶问题</h2><p>如何将单链表在指定区间内进行反转？</p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>这个问题是上面问题的一个变形，难度也加大了不少，主要的难点之处就在于对边界条件的检查。<br>实现思路，主要就是按照给定的区间得到需要整体反转的一个子链表然后进行反转，最后就是把链表按正确的顺序拼接在一起。</p>
<h2 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span>
<span class="line"><span class="comment"> * 单链表反转，反转指定区间内的节点</span></span>
<span class="line"><span class="comment"> */</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">reverseBetween</span><span class="params">(ListNode head, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span>
<span class="line">    <span class="comment">// 合法性检测</span></span>
<span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || m &gt;= n || m &lt; <span class="number">1</span> || n &lt; <span class="number">1</span>) &#123;</span>
<span class="line">        <span class="keyword">return</span> head;</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="comment">/** 将链表按[m,n]区间分成三段</span></span>
<span class="line"><span class="comment">     *</span></span>
<span class="line"><span class="comment">     * first,second,third分别为每一段的头节点(注意，m=1也就是first与second相等的情况的处理)</span></span>
<span class="line"><span class="comment">     * first --&gt; firstTail</span></span>
<span class="line"><span class="comment">     * second</span></span>
<span class="line"><span class="comment">     * third</span></span>
<span class="line"><span class="comment">     */</span></span>
<span class="line">    ListNode first = head;</span>
<span class="line">    ListNode firstTail = first;</span>
<span class="line">    ListNode second = first;</span>
<span class="line">    ListNode third = first;</span>
<span class="line">    ListNode current = first;</span>
<span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span>
<span class="line">    <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</span>
<span class="line">        i++;</span>
<span class="line">        <span class="keyword">if</span> (i == m - <span class="number">1</span>) &#123;</span>
<span class="line">            firstTail = current;</span>
<span class="line">        &#125;</span>
<span class="line">        <span class="keyword">if</span> (i == m) &#123;</span>
<span class="line">            second = current;</span>
<span class="line">        &#125;</span>
<span class="line">        <span class="keyword">if</span> (i == n) &#123;</span>
<span class="line">            third = current.next;</span>
<span class="line">            <span class="keyword">break</span>;</span>
<span class="line">        &#125;</span>
<span class="line">        current = current.next;</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="comment">// 进行中间second段的reverse</span></span>
<span class="line">    current = second;</span>
<span class="line">    ListNode prev = third;</span>
<span class="line">    ListNode next = <span class="keyword">null</span>;</span>
<span class="line">    <span class="keyword">while</span> (current != third) &#123;</span>
<span class="line">        next = current.next;</span>
<span class="line">        current.next = prev;</span>
<span class="line">        prev = current;</span>
<span class="line">        current = next;</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">if</span> (m == <span class="number">1</span>) &#123;</span>
<span class="line">        first = prev;</span>
<span class="line">    &#125; <span class="keyword">else</span> &#123;</span>
<span class="line">        firstTail.next = prev;</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">return</span> first;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://leetcode.com/problems/reverse-linked-list/" target="_blank" rel="noopener">reverse-linked-list</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[去除已排序链表中的重复元素]]></title>
      <url>https://craneyuan.github.io/2016/09/17/remove-sorted-linkedlist-duplicated-value/</url>
      <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个已排序的单链表，去除单链表中的重复元素，只保留一个重复的元素，并且返回新的单链表。</p>
<p>例如：<br>给出1-&gt;1-&gt;2，你的函数调用之后必须返回1-&gt;2。</p>
<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>一个已排序的单链表，例如1-&gt;1-&gt;2。</p>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>返回1-&gt;2。</p>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span>
<span class="line"><span class="comment"> * 单链表定义</span></span>
<span class="line"><span class="comment"> */</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span>
<span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> val;</span>
<span class="line">    <span class="keyword">public</span> ListNode next;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListNode</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span>
<span class="line">        val = x;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span>
<span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span>
<span class="line">    &#125;</span>
<span class="line">    ListNode cur, prev;</span>
<span class="line">    prev = head;</span>
<span class="line">    cur = head.next;</span>
<span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span>
<span class="line">        <span class="keyword">if</span> (cur.val == prev.val) &#123;</span>
<span class="line">            prev.next = cur.next;</span>
<span class="line">        &#125; <span class="keyword">else</span> &#123;</span>
<span class="line">            prev = cur;</span>
<span class="line">        &#125;</span>
<span class="line">        cur = prev.next;</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">return</span> head;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1521870409/blog/xq0luba6e6xkj26wz6mc.gif" alt="算法演示"></p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>去除单链表中重复元素，不保留任何重复的元素。</p>
<p>例如：<br>1-&gt;1-&gt;2-&gt;3-&gt;3-&gt;4，返回2-&gt;4</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">deleteDuplicatesAll</span><span class="params">(ListNode head)</span> </span>&#123;</span>
<span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span>
<span class="line">        <span class="keyword">return</span> head;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    ListNode dummy = <span class="keyword">new</span> ListNode(Integer.MAX_VALUE); <span class="comment">// 头结点</span></span>
<span class="line">    dummy.next = head;</span>
<span class="line">    ListNode prev, cur;</span>
<span class="line">    prev = dummy;</span>
<span class="line">    cur = head;</span>
<span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span>
<span class="line">        <span class="keyword">boolean</span> duplicated = <span class="keyword">false</span>;</span>
<span class="line">        <span class="keyword">while</span> (cur.next != <span class="keyword">null</span> &amp;&amp; cur.val == cur.next.val) &#123;</span>
<span class="line">            duplicated = <span class="keyword">true</span>;</span>
<span class="line">            cur = cur.next;</span>
<span class="line">        &#125;</span>
<span class="line">        <span class="keyword">if</span> (duplicated) &#123; <span class="comment">// 删除重复的最后一个元素</span></span>
<span class="line">            cur = cur.next;</span>
<span class="line">            <span class="keyword">continue</span>;</span>
<span class="line">        &#125;</span>
<span class="line">        prev.next = cur;</span>
<span class="line">        prev = prev.next;</span>
<span class="line">        cur = cur.next;</span>
<span class="line">    &#125;</span>
<span class="line">    prev.next = cur;</span>
<span class="line">    <span class="keyword">return</span> dummy.next;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/" target="_blank" rel="noopener">remove-duplicates-from-sorted-list</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[去除已排序数组中的重复元素]]></title>
      <url>https://craneyuan.github.io/2016/09/16/remove-sorted-array-duplicated-value/</url>
      <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个已排序的数组，去除数组中的重复元素，只保留一个重复的元素，并且返回新的数组长度。</p>
<p>要求：<br>不要给数组分配额外的空间，你必须使用常量的内存大小进行原地操作。</p>
<p>例如：<br>给出数组A=[1,1,2]，你的函数调用之后必须返回长度length=2，并且A现在变成[1,2]。</p>
<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>一个已排序的数组，例如[1,1,2]。</p>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>返回数组新的长度，例如length=2。</p>
<h2 id="快慢指针法"><a href="#快慢指针法" class="headerlink" title="快慢指针法"></a>快慢指针法</h2><p>设置fast指针遍历数组，slow指针指向不重复元素的下一位。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span>
<span class="line">    <span class="keyword">if</span> (nums.length &lt; <span class="number">1</span>) &#123;</span>
<span class="line">        <span class="keyword">return</span> nums.length;</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">int</span> slow = <span class="number">1</span>;</span>
<span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> fast = <span class="number">1</span>; fast &lt; nums.length; fast++) &#123;</span>
<span class="line">        <span class="keyword">if</span> (nums[fast] != nums[slow - <span class="number">1</span>]) &#123;</span>
<span class="line">            nums[slow++] = nums[fast];</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">return</span> slow;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>动画演示：</p>
<p><img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1521870522/blog/viq29qhdvdn6wux4u635.gif" alt="动画演示"></p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>去除已排序数组中的重复元素，保留指定位数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">removeDuplicatesN</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> repeatN)</span> </span>&#123;</span>
<span class="line">    <span class="keyword">if</span> (nums.length &lt;= repeatN) &#123;</span>
<span class="line">        <span class="keyword">return</span> nums.length;</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">int</span> index = repeatN;</span>
<span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = repeatN; i &lt; nums.length; i++) &#123;</span>
<span class="line">        <span class="keyword">if</span> (nums[i] != nums[index - repeatN]) &#123;</span>
<span class="line">            nums[index++] = nums[i];</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">return</span> index;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener">remove-duplicates-from-sorted-array</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用排序算法总结8一一基数排序]]></title>
      <url>https://craneyuan.github.io/2016/09/05/the-sort-algorithm-of-radix-sort/</url>
      <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote>
<p>基数排序（英文：radix Sort）是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。</p>
</blockquote>
<p><img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1521870769/blog/tzz66ougy2grbcnbiluf.jpg" alt="基数排序过程"></p>
<h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><ul>
<li>将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。</li>
<li>然后，从最低位开始，依次进行一次排序。</li>
<li>这样从最低位排序一直到最高位排序完成以后，数列就变成一个有序序列。</li>
</ul>
<p>基数排序的方式可以采用<strong><em>LSD</em></strong>（Least significant digital）或<strong><em>MSD</em></strong>（Most significant digital），LSD的排序方式由键值的最右边开始，而MSD则相反，由键值的最左边开始。</p>
<blockquote>
<p>注意本次演示采用LSD的方式实现</p>
</blockquote>
<h2 id="代码实现（java）"><a href="#代码实现（java）" class="headerlink" title="代码实现（java）"></a>代码实现（java）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span>
<span class="line"><span class="comment"> * 基数排序的简单实现，目前只能排序正整数</span></span>
<span class="line"><span class="comment"> */</span></span>
<span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] radixSort(<span class="keyword">int</span>[] nums) &#123;</span>
<span class="line">    <span class="keyword">int</span> BASE_NUM = <span class="number">10</span>; <span class="comment">// 整数基数</span></span>
<span class="line">    <span class="keyword">int</span> len = nums.length;</span>
<span class="line">    <span class="keyword">int</span>[] buffer = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span>
<span class="line"></span>
<span class="line">    <span class="keyword">int</span> maxValue = nums[<span class="number">0</span>], exp = <span class="number">1</span>;</span>
<span class="line"></span>
<span class="line">    <span class="comment">// 找出nums数组中最大的数</span></span>
<span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span>
<span class="line">        <span class="keyword">if</span> (nums[i] &gt; maxValue) &#123;</span>
<span class="line">            maxValue = nums[i];</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">while</span> (maxValue / exp &gt; <span class="number">0</span>) &#123;</span>
<span class="line">        <span class="keyword">int</span>[] bucket = <span class="keyword">new</span> <span class="keyword">int</span>[BASE_NUM];</span>
<span class="line"></span>
<span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bucket.length; i++) &#123;</span>
<span class="line">            bucket[i] = <span class="number">0</span>;</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        <span class="comment">// 从数的低位开始进行桶排序</span></span>
<span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span>
<span class="line">            bucket[(nums[i] / exp) % BASE_NUM]++;</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        <span class="comment">// 按照当前位给nums排序</span></span>
<span class="line">        <span class="comment">// 确定各个数对应的大概位置buket[(nums[i] / exp) % BASE]的值</span></span>
<span class="line">        <span class="comment">// 即为新位置的下标</span></span>
<span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; BASE_NUM; i++) &#123;</span>
<span class="line">            bucket[i] += bucket[i - <span class="number">1</span>];</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        <span class="comment">// 按当前位进行排序存入到新数组</span></span>
<span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span>
<span class="line">            <span class="keyword">int</span> index = (nums[i] / exp) % BASE_NUM;</span>
<span class="line">            buffer[--bucket[(nums[i] / exp) % BASE_NUM]] = nums[i];</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span>
<span class="line">            nums[i] = buffer[i];</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        exp *= BASE_NUM;</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">return</span> nums;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/基数排序" target="_blank" rel="noopener">基数排序</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sort </tag>
            
            <tag> algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用排序算法总结7一一堆排序]]></title>
      <url>https://craneyuan.github.io/2016/09/04/the-sort-algorithm-of-heap-sort/</url>
      <content type="html"><![CDATA[<p>在了解堆排序之前，我们有必要清楚“什么是堆呢？”。</p>
<blockquote>
<p>堆（英文：heap）是计算机科学中一类特殊的数据结构的统称。<strong><em>堆通常是一个可以被看做一棵树的数组对象。</em></strong>在队列中，调度程序反复提取队列中第一个作业并运行，因为实际情况中某些时间较短的任务将等待很长时间才能结束，或者某些不短小，但具有重要性的作业，同样应当具有优先权。堆即为解决此类问题设计的一种数据结构。</p>
</blockquote>
<p>堆的逻辑定义：<br><img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1521870976/blog/aolnikhrecm3o25auqzb.png" alt="堆的逻辑定义"></p>
<p>堆的实现通过构造二叉堆（英语：binary heap），实为二叉树的一种；由于其应用的普遍性，当不加限定时，均指该数据结构的这种实现。这种数据结构具有以下性质。</p>
<ul>
<li>任意节点小于（或大于）它的所有后裔，最小元（或最大元）在堆的根上（堆序性）。</li>
<li>堆总是一棵完全树。即除了最底层，其他层的节点都被元素填满，且最底层尽可能地从左到右填入。</li>
</ul>
<p>将根节点最大的堆叫做<strong><em>最大堆</em></strong>或大根堆，根节点最小的堆叫做<strong><em>最小堆</em></strong>或小根堆。常见的堆有<strong><em>二叉堆</em></strong>、斐波那契堆等。</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote>
<p>堆排序（英语：Heap Sort）是指利用<strong><em>堆</em></strong>这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p>
</blockquote>
<p><img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1521870837/blog/uy5o9garsujnzr0mo4ie.gif" alt="堆排序演示动画"></p>
<h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><p>堆排序的根本是进行一次堆的构建过程。</p>
<ul>
<li>得到当前序列的最小(大)的元素 </li>
<li>把这个元素和最后一个元素进行交换,这样当前的最小(大)的元素就放在了序列的最后,而原先的最后一个元素放到了序列的最前面 </li>
<li>这交换可能会破坏堆序列的性质(注意此时的序列是除去已经放在最后面的元素),因此需要对序列进行调整,使之满足于上面堆的性质</li>
<li>重复上面的过程,直到序列调整完毕为止</li>
</ul>
<h3 id="堆的操作"><a href="#堆的操作" class="headerlink" title="堆的操作"></a>堆的操作</h3><p>在堆的数据结构中，堆中的最大值总是位于根节点。堆中定义以下几种操作：</p>
<ul>
<li>最大堆调整（Max_Heapify）：将堆的末端子节点作调整，使得子节点永远小于父节点</li>
<li>创建最大堆（Build_Max_Heap）：将堆所有数据重新排序</li>
<li>堆排序（HeapSort）：移除位在第一个数据的根节点，并做最大堆调整的递归运算</li>
</ul>
<h3 id="堆节点的访问"><a href="#堆节点的访问" class="headerlink" title="堆节点的访问"></a>堆节点的访问</h3><p>通常堆是通过一维数组来实现的。在数组起始位置为0的情形中：</p>
<ul>
<li>父节点i的左子节点在位置(2*i+1);</li>
<li>父节点i的右子节点在位置(2*i+2);</li>
<li>子节点i的父节点在位置floor((i-1)/2);</li>
</ul>
<h2 id="代码实现（java）"><a href="#代码实现（java）" class="headerlink" title="代码实现（java）"></a>代码实现（java）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span>
<span class="line"><span class="comment"> * 堆排序的简单实现</span></span>
<span class="line"><span class="comment"> */</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span>
<span class="line">    <span class="keyword">int</span> count = a.length;</span>
<span class="line"></span>
<span class="line">    <span class="comment">// first place a in max-heap order</span></span>
<span class="line">    heapify(a, count);</span>
<span class="line"></span>
<span class="line">    <span class="keyword">int</span> end = count - <span class="number">1</span>;</span>
<span class="line">    <span class="keyword">while</span> (end &gt; <span class="number">0</span>) &#123;</span>
<span class="line">        <span class="comment">// swap the root(maximum value) of the heap with the</span></span>
<span class="line">        <span class="comment">// last element of the heap</span></span>
<span class="line">        <span class="keyword">int</span> tmp = a[end];</span>
<span class="line">        a[end] = a[<span class="number">0</span>];</span>
<span class="line">        a[<span class="number">0</span>] = tmp;</span>
<span class="line">        <span class="comment">// put the heap back in max-heap order</span></span>
<span class="line">        siftDown(a, <span class="number">0</span>, end - <span class="number">1</span>);</span>
<span class="line">        <span class="comment">// decrement the size of the heap so that the previous</span></span>
<span class="line">        <span class="comment">// max value will stay in its proper place</span></span>
<span class="line">        end--;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> count)</span> </span>&#123;</span>
<span class="line">    <span class="comment">// start is assigned the index in a of the last parent node</span></span>
<span class="line">    <span class="keyword">int</span> start = (count - <span class="number">2</span>) / <span class="number">2</span>; <span class="comment">// binary heap</span></span>
<span class="line"></span>
<span class="line">    <span class="keyword">while</span> (start &gt;= <span class="number">0</span>) &#123;</span>
<span class="line">        <span class="comment">// sift down the node at index start to the proper place</span></span>
<span class="line">        <span class="comment">// such that all nodes below the start index are in heap</span></span>
<span class="line">        <span class="comment">// order</span></span>
<span class="line">        siftDown(a, start, count - <span class="number">1</span>);</span>
<span class="line">        start--;</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="comment">// after sifting down the root all nodes/elements are in heap order</span></span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">siftDown</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span>
<span class="line">    <span class="comment">// end represents the limit of how far down the heap to sift</span></span>
<span class="line">    <span class="keyword">int</span> root = start;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">while</span> ((root * <span class="number">2</span> + <span class="number">1</span>) &lt;= end) &#123; <span class="comment">// While the root has at least one child</span></span>
<span class="line">        <span class="keyword">int</span> child = root * <span class="number">2</span> + <span class="number">1</span>; <span class="comment">// root*2+1 points to the left child</span></span>
<span class="line">        <span class="comment">// if the child has a sibling and the child's value is less than its</span></span>
<span class="line">        <span class="comment">// sibling's...</span></span>
<span class="line">        <span class="keyword">if</span> (child + <span class="number">1</span> &lt;= end &amp;&amp; a[child] &lt; a[child + <span class="number">1</span>]) &#123;</span>
<span class="line">            child = child + <span class="number">1</span>; <span class="comment">// ... then point to the right child instead</span></span>
<span class="line">        &#125;</span>
<span class="line">        <span class="keyword">if</span> (a[root] &lt; a[child]) &#123; <span class="comment">// out of max-heap order</span></span>
<span class="line">            <span class="keyword">int</span> tmp = a[root];</span>
<span class="line">            a[root] = a[child];</span>
<span class="line">            a[child] = tmp;</span>
<span class="line">            root = child; <span class="comment">// repeat to continue sifting down the child now</span></span>
<span class="line">        &#125; <span class="keyword">else</span> &#123;</span>
<span class="line">            <span class="keyword">return</span>;</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/堆_%28数据结构%29" target="_blank" rel="noopener">堆</a></li>
<li><a href="https://zh.wikipedia.org/wiki/堆排序" target="_blank" rel="noopener">堆排序</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sort </tag>
            
            <tag> algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用排序算法总结6一一快速排序]]></title>
      <url>https://craneyuan.github.io/2016/09/03/the-sort-algorithm-of-quick-sort/</url>
      <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote>
<p>快速排序（英文：quick Sort），又称划分交换排序（partition-exchange sort），一种排序算法，最早由东尼·霍尔提出。在平均状况下，排序n个项目要Ο(n log n)次比较。在最坏状况下则需要Ο(n2)次比较，但这种状况并不常见。事实上，快速排序通常明显比其他Ο(n log n)算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。</p>
</blockquote>
<p><img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1521871052/blog/dnwug2dzi4wanknfet31.gif" alt="快速排序演示动画1"></p>
<h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><p>快速排序使用分治法（divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。</p>
<p>步骤为：</p>
<ul>
<li>从数列中挑出一个元素，称为”基准”（pivot），</li>
<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</li>
<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li>
</ul>
<p>递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p>
<p>伪代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line">function quicksort(q)</span>
<span class="line">     var list less, pivotList, greater</span>
<span class="line">     if length(q) ≤ 1 &#123;</span>
<span class="line">         return q</span>
<span class="line">     &#125; else &#123;</span>
<span class="line">         select a pivot value pivot from q</span>
<span class="line">         for each x in q except the pivot element</span>
<span class="line">             if x &lt; pivot then add x to less</span>
<span class="line">             if x ≥ pivot then add x to greater</span>
<span class="line">         add pivot to pivotList</span>
<span class="line">         return concatenate(quicksort(less), pivotList, quicksort(greater))</span>
<span class="line">     &#125;</span>
</pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1521871088/blog/jcnonjpmuhgzscxjukci.png" alt="快速排序演示动画2"></p>
<h2 id="代码实现（java）"><a href="#代码实现（java）" class="headerlink" title="代码实现（java）"></a>代码实现（java）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span>
<span class="line"><span class="comment"> * 快速排序，递归版</span></span>
<span class="line"><span class="comment"> */</span></span>
<span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;? <span class="keyword">super</span> E&gt;&gt; <span class="function">List&lt;E&gt; <span class="title">quickSort</span><span class="params">(List&lt;E&gt; arr)</span> </span>&#123;</span>
<span class="line">    <span class="keyword">if</span> (!arr.isEmpty()) &#123;</span>
<span class="line">        E pivot = arr.get(<span class="number">0</span>); <span class="comment">// This pivot can change to get faster results</span></span>
<span class="line"></span>
<span class="line">        List&lt;E&gt; less = <span class="keyword">new</span> LinkedList&lt;E&gt;();</span>
<span class="line">        List&lt;E&gt; pivotList = <span class="keyword">new</span> LinkedList&lt;E&gt;();</span>
<span class="line">        List&lt;E&gt; more = <span class="keyword">new</span> LinkedList&lt;E&gt;();</span>
<span class="line"></span>
<span class="line">        <span class="comment">// Partition</span></span>
<span class="line">        <span class="keyword">for</span> (E i : arr) &#123;</span>
<span class="line">            <span class="keyword">if</span> (i.compareTo(pivot) &lt; <span class="number">0</span>) &#123;</span>
<span class="line">                less.add(i);</span>
<span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i.compareTo(pivot) &gt; <span class="number">0</span>) &#123;</span>
<span class="line">                more.add(i);</span>
<span class="line">            &#125; <span class="keyword">else</span> &#123;</span>
<span class="line">                pivotList.add(i);</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        <span class="comment">// Recursively sort sublists</span></span>
<span class="line">        less = quickSort(less);</span>
<span class="line">        more = quickSort(more);</span>
<span class="line"></span>
<span class="line">        <span class="comment">// Concatenate results</span></span>
<span class="line">        less.addAll(pivotList);</span>
<span class="line">        less.addAll(more);</span>
<span class="line">        <span class="keyword">return</span> less;</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">return</span> arr;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/快速排序" target="_blank" rel="noopener">快速排序</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sort </tag>
            
            <tag> algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用排序算法总结5一一希尔排序]]></title>
      <url>https://craneyuan.github.io/2016/09/02/the-sort-algorithm-of-shell-sort/</url>
      <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote>
<p>希尔排序（英文：shell sort），也称递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。</p>
</blockquote>
<p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p>
<ul>
<li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率</li>
<li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位</li>
</ul>
<p><img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1521871154/blog/hbg1dkhruwy1ia3f3adr.gif" alt="希尔排序演示动画1"></p>
<h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><p>希尔排序通过将比较的全部元素分为几个区域来提升插入排序的性能。这样可以让一个元素可以一次性地朝最终位置前进一大步。然后算法再取越来越小的步长进行排序，算法的最后一步就是普通的插入排序，但是到了这步，需排序的数据几乎是已排好的了（此时插入排序较快）。</p>
<ul>
<li>选择步长</li>
<li>按照选择的步长对序列进行排序</li>
<li>缩短步长</li>
<li>返回步骤二继续排序，直到步长为1</li>
</ul>
<h2 id="步长序列"><a href="#步长序列" class="headerlink" title="步长序列"></a>步长序列</h2><p>步长的选择是希尔排序的重要部分。只要最终步长为1任何步长序列都可以工作。算法最开始以一定的步长进行排序。然后会继续以一定步长进行排序，最终算法以步长为1进行排序。当步长为1时，算法变为插入排序，这就保证了数据一定会被排序。</p>
<p>Donald Shell最初建议步长选择为n/2并且对步长取半直到步长达到1。虽然这样取可以比O(n^2)类的算法（插入排序）更好，但这样仍然有减少平均时间和最差时间的余地。可能希尔排序最重要的地方在于当用较小步长排序后，以前用的较大步长仍然是有序的。比如，如果一个数列以步长5进行了排序然后再以步长3进行排序，那么该数列不仅是以步长3有序，而且是以步长5有序。如果不是这样，那么算法在迭代过程中会打乱以前的顺序，那就不会以如此短的时间完成排序了。</p>
<h2 id="常见的步长序列"><a href="#常见的步长序列" class="headerlink" title="常见的步长序列"></a>常见的步长序列</h2><p><img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1521871201/blog/qwkoxbuogg1nsjhntmjy.png" alt="常见的步长序列"></p>
<h2 id="代码实现（java）"><a href="#代码实现（java）" class="headerlink" title="代码实现（java）"></a>代码实现（java）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span>
<span class="line"><span class="comment"> * 希尔排序</span></span>
<span class="line"><span class="comment"> */</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span>
<span class="line">    <span class="keyword">int</span> gap = <span class="number">1</span>, i, j, len = nums.length;</span>
<span class="line">    <span class="keyword">int</span> temp;</span>
<span class="line">    <span class="comment">// 选择步长</span></span>
<span class="line">    <span class="keyword">while</span> (gap &lt; len / <span class="number">3</span>) &#123;</span>
<span class="line">        <span class="comment">// &lt;O(n^(3/2)) by Knuth,1973&gt;: 1, 4, 13, 40, 121, ...</span></span>
<span class="line">        gap = gap * <span class="number">3</span> + <span class="number">1</span>;</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">for</span> (; gap &gt; <span class="number">0</span>; gap /= <span class="number">3</span>) &#123;</span>
<span class="line">        <span class="keyword">for</span> (i = gap; i &lt; len; i++) &#123;</span>
<span class="line">            temp = nums[i];</span>
<span class="line">            <span class="keyword">for</span> (j = i - gap; j &gt;= <span class="number">0</span> &amp;&amp; nums[j] &gt; temp; j -= gap) &#123;</span>
<span class="line">                nums[j + gap] = nums[j];</span>
<span class="line">            &#125;</span>
<span class="line">            nums[j + gap] = temp;</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/希尔排序" target="_blank" rel="noopener">希尔排序</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sort </tag>
            
            <tag> algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中被搁置的“goto”保留字]]></title>
      <url>https://craneyuan.github.io/2016/08/30/the-reserved-word-of-goto/</url>
      <content type="html"><![CDATA[<p>goto语句一直被人所诟病，说它使得代码结构复杂化，但是语言设计者们还是没有放弃goto这个功能强大的语句。Java以面向对象所著称也没能够放弃goto，而是把它当做保留字，但是并未在语言中得到正式使用。</p>
<p>然而，从Java的break和continue这两个关键字的身上，我们依然能够看出一些goto的影子。</p>
<p>下面是《Thinking In Java 4th》中关于“goto”的介绍：</p>
<blockquote>
<h3 id="臭名昭著的“goto”"><a href="#臭名昭著的“goto”" class="headerlink" title="臭名昭著的“goto”"></a>臭名昭著的“goto”</h3><p>goto 关键字很早就在程序设计语言中出现。事实上，goto 是汇编语言的程序控制结构的始祖：“若条件A，则跳到这里；否则跳到那里”。若阅读由几乎所有编译器生成的汇编代码，就会发现程序控制里包含了许多<br>跳转。然而，goto 是在源码的级别跳转的，所以招致了不好的声誉。若程序总是从一个地方跳到另一个地方，还有什么办法能识别代码的流程呢？随着Edsger Dijkstra 著名的“Goto 有害”论的问世，goto 便从此<br>失宠。</p>
</blockquote>
<p>事实上，真正的问题并不在于使用goto，而在于goto 的滥用。而且在一些少见的情况下，goto 是组织控制流程的最佳手段。</p>
<p>尽管goto 仍是Java 的一个保留字，但并未在语言中得到正式使用；Java 没有goto。<strong><em>然而，在break 和continue 这两个关键字的身上，我们仍然能看出一些goto 的影子。</em></strong>它并不属于一次跳转，而是中断循环语句的一种方法。之所以把它们纳入goto 问题中一起讨论，是由于它们使用了相同的机制：标签。</p>
<h2 id="Java中的标签"><a href="#Java中的标签" class="headerlink" title="Java中的标签"></a>Java中的标签</h2><p>“标签”是后面跟一个冒号的标识符，就象下面这样：<br><code>label1:</code></p>
<p><strong><em>对Java 来说，唯一用到标签的地方是在循环语句之前。</em></strong>进一步说，它实际需要紧靠在循环语句的前方——在标签和循环之间置入任何语句都是不明智的。而在循环之前设置标签的唯一理由是：我们希望在其中嵌套另<br>一个循环或者一个开关。这是由于break 和continue 关键字通常只中断当前循环，但若随同标签使用，它们就会中断到存在标签的地方。如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
</pre></td><td class="code"><pre><span class="line">label1:</span>
<span class="line">外部循环&#123;</span>
<span class="line">内部循环&#123;</span>
<span class="line">//...</span>
<span class="line">break; //1</span>
<span class="line">//...</span>
<span class="line">continue; //2</span>
<span class="line">//...</span>
<span class="line">continue label1; //3</span>
<span class="line">//...</span>
<span class="line">break label1; //4</span>
<span class="line">&#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>在条件1 中，break 中断内部循环，并在外部循环结束。在条件2 中，continue 移回内部循环的起始处。但在条件3 中，continue label1 却同时中断内部循环以及外部循环，并移至label1 处。随后，它实际是继续循环，但却从外部循环开始。在条件4 中，break label1 也会中断所有循环，并回到label1 处，但并不重新进入循环。也就是说，它实际是完全中止了两个循环。</p>
<h2 id="代码测试（java）"><a href="#代码测试（java）" class="headerlink" title="代码测试（java）"></a>代码测试（java）</h2><blockquote>
<p>一下代码均已在jdk1.6版本中测试通过</p>
</blockquote>
<h3 id="break语句测试"><a href="#break语句测试" class="headerlink" title="break语句测试"></a>break语句测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line">public static void testLabel()</span>
<span class="line">&#123;</span>
<span class="line">    for (int i = 0; i &lt; 2; i++) &#123;</span>
<span class="line">        System.out.println(&quot;L1----&quot;+i);</span>
<span class="line">        for (int j = 0; j &lt; 4; j++) &#123;</span>
<span class="line">            if (j == 2) &#123;</span>
<span class="line">                break;</span>
<span class="line">            &#125;</span>
<span class="line">            System.out.println(&quot;--------L2---&quot;+j);</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line">L1----0</span>
<span class="line">--------L2---0</span>
<span class="line">--------L2---1</span>
<span class="line">L1----1</span>
<span class="line">--------L2---0</span>
<span class="line">--------L2---1</span>
</pre></td></tr></table></figure>
<p>这个代码中break直接中断内部的for循环。</p>
<h3 id="break-label语句测试"><a href="#break-label语句测试" class="headerlink" title="break+label语句测试"></a>break+label语句测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
</pre></td><td class="code"><pre><span class="line">public static void testLabel3()</span>
<span class="line">&#123;</span>
<span class="line">label1:</span>
<span class="line">    for (int i = 0; i &lt; 2; i++) &#123;</span>
<span class="line">        System.out.println(&quot;L1----&quot;+i);</span>
<span class="line">        for (int j = 0; j &lt; 4; j++) &#123;</span>
<span class="line">            if (j == 2) &#123;</span>
<span class="line">                break label1;</span>
<span class="line">            &#125;</span>
<span class="line">            System.out.println(&quot;--------L2---&quot;+j);</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">L1----0</span>
<span class="line">--------L2---0</span>
<span class="line">--------L2---1</span>
</pre></td></tr></table></figure>
<p>在这个代码中break中断标签label1处的外部for循环。</p>
<h3 id="continue语句测试"><a href="#continue语句测试" class="headerlink" title="continue语句测试"></a>continue语句测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line">public static void testLabel2() &#123;</span>
<span class="line">		for (int i = 0; i &lt; 2; i++) &#123;</span>
<span class="line">			System.out.println(&quot;L1----&quot;+i);</span>
<span class="line">			for (int j = 0; j &lt; 4; j++) &#123;</span>
<span class="line">				if (j == 2) &#123;</span>
<span class="line">					continue;</span>
<span class="line">				&#125;</span>
<span class="line">				System.out.println(&quot;--------L2---&quot;+j);</span>
<span class="line">			&#125;</span>
<span class="line">		&#125;</span>
<span class="line">	&#125;</span>
</pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line">L1----0</span>
<span class="line">--------L2---0</span>
<span class="line">--------L2---1</span>
<span class="line">--------L2---3</span>
<span class="line">L1----1</span>
<span class="line">--------L2---0</span>
<span class="line">--------L2---1</span>
<span class="line">--------L2---3</span>
</pre></td></tr></table></figure>
<p>在这个代码中continue中断掉内部的for循环后继续执行内部for循环。</p>
<h3 id="continue-label语句测试"><a href="#continue-label语句测试" class="headerlink" title="continue+label语句测试"></a>continue+label语句测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
</pre></td><td class="code"><pre><span class="line">public static void testLabel4()</span>
<span class="line">&#123;</span>
<span class="line">label1:</span>
<span class="line">    for (int i = 0; i &lt; 2; i++) &#123;</span>
<span class="line">        System.out.println(&quot;L1----&quot;+i);</span>
<span class="line">        for (int j = 0; j &lt; 4; j++) &#123;</span>
<span class="line">            if (j == 2) &#123;</span>
<span class="line">                continue label1;</span>
<span class="line">            &#125;</span>
<span class="line">            System.out.println(&quot;--------L2---&quot;+j);</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line">L1----0</span>
<span class="line">--------L2---0</span>
<span class="line">--------L2---1</span>
<span class="line">L1----1</span>
<span class="line">--------L2---0</span>
<span class="line">--------L2---1</span>
</pre></td></tr></table></figure>
<p>在这个代码中continue中断掉内部的for循环后继续执行跳到标签label1处的外部for循环，继续执行。</p>
]]></content>
      
        <categories>
            
            <category> Java平台 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用排序算法总结4一一归并排序]]></title>
      <url>https://craneyuan.github.io/2016/08/30/the-sort-algorithm-of-merge-sort/</url>
      <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote>
<p>归并排序（英文：merge sort），是创建在归并操作上的一种有效的排序算法，效率为O(n log n)。<br><strong>归并操作</strong>（merge），也叫归并算法，指的是将两个已经排序的序列合并成一个序列的操作。归并排序算法依赖归并操作。</p>
</blockquote>
<p><img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1521872711/blog/bwt19rrqdrfpokicdhsd.gif" alt="归并排序算法演示动画"></p>
<h2 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h2><p>原理如下（假设序列共有n个元素）：</p>
<ol>
<li>将序列每相邻两个数字进行归并操作，形成floor(n/2)个序列，排序后每个序列包含两个元素</li>
<li>将上述序列再次归并，形成floor(n/4)个序列，每个序列包含四个元素</li>
<li>重复步骤2，直到所有元素排序完毕</li>
</ol>
<h2 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h2><ol>
<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</li>
<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置</li>
<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li>
<li>重复步骤3直到某一指针到达序列尾</li>
<li>将另一序列剩下的所有元素直接复制到合并序列尾</li>
</ol>
<h2 id="代码实现（java）"><a href="#代码实现（java）" class="headerlink" title="代码实现（java）"></a>代码实现（java）</h2><h3 id="递归版"><a href="#递归版" class="headerlink" title="递归版"></a>递归版</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span>
<span class="line"><span class="comment"> * 归并排序，递归版</span></span>
<span class="line"><span class="comment"> */</span></span>
<span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;? <span class="keyword">super</span> E&gt;&gt; <span class="function">List&lt;E&gt; <span class="title">mergeSort</span><span class="params">(List&lt;E&gt; m)</span> </span>&#123;</span>
<span class="line">    <span class="keyword">if</span> (m.size() &lt;= <span class="number">1</span>) &#123;</span>
<span class="line">        <span class="keyword">return</span> m;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">int</span> middle = m.size() / <span class="number">2</span>;</span>
<span class="line">    List&lt;E&gt; left = m.subList(<span class="number">0</span>, middle);</span>
<span class="line">    List&lt;E&gt; right = m.subList(middle, m.size());</span>
<span class="line"></span>
<span class="line">    right = mergeSort(right);</span>
<span class="line">    left = mergeSort(left);</span>
<span class="line">    List&lt;E&gt; result = merge(left, right);</span>
<span class="line"></span>
<span class="line">    <span class="keyword">return</span> result;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;? <span class="keyword">super</span> E&gt;&gt; <span class="function">List&lt;E&gt; <span class="title">merge</span><span class="params">(List&lt;E&gt; left, List&lt;E&gt; right)</span> </span>&#123;</span>
<span class="line">    List&lt;E&gt; result = <span class="keyword">new</span> ArrayList&lt;E&gt;();</span>
<span class="line">    Iterator&lt;E&gt; it1 = left.iterator();</span>
<span class="line">    Iterator&lt;E&gt; it2 = right.iterator();</span>
<span class="line"></span>
<span class="line">    E x = it1.next();</span>
<span class="line">    E y = it2.next();</span>
<span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span>
<span class="line">        <span class="comment">// change the direction of this comparison to change the direction</span></span>
<span class="line">        <span class="comment">// of the sort</span></span>
<span class="line">        <span class="keyword">if</span> (x.compareTo(y) &lt;= <span class="number">0</span>) &#123;</span>
<span class="line">            result.add(x);</span>
<span class="line">            <span class="keyword">if</span> (it1.hasNext()) &#123;</span>
<span class="line">                x = it1.next();</span>
<span class="line">            &#125; <span class="keyword">else</span> &#123;</span>
<span class="line">                result.add(y);</span>
<span class="line">                <span class="keyword">while</span> (it2.hasNext()) &#123;</span>
<span class="line">                    result.add(it2.next());</span>
<span class="line">                &#125;</span>
<span class="line">                <span class="keyword">break</span>;</span>
<span class="line">            &#125;</span>
<span class="line">        &#125; <span class="keyword">else</span> &#123;</span>
<span class="line">            result.add(y);</span>
<span class="line">            <span class="keyword">if</span> (it2.hasNext()) &#123;</span>
<span class="line">                y = it2.next();</span>
<span class="line">            &#125; <span class="keyword">else</span> &#123;</span>
<span class="line">                result.add(x);</span>
<span class="line">                <span class="keyword">while</span> (it1.hasNext()) &#123;</span>
<span class="line">                    result.add(it1.next());</span>
<span class="line">                &#125;</span>
<span class="line">                <span class="keyword">break</span>;</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">return</span> result;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="迭代版"><a href="#迭代版" class="headerlink" title="迭代版"></a>迭代版</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span>
<span class="line"><span class="comment">     * 归并排序，迭代版</span></span>
<span class="line"><span class="comment">     */</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span>
<span class="line">        <span class="keyword">int</span> len = nums.length;</span>
<span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span>
<span class="line">        <span class="keyword">int</span> block, start;</span>
<span class="line"></span>
<span class="line">        <span class="keyword">for</span> (block = <span class="number">1</span>; block &lt; len * <span class="number">2</span>; block *= <span class="number">2</span>) &#123;</span>
<span class="line">            <span class="keyword">for</span> (start = <span class="number">0</span>; start &lt; len; start += <span class="number">2</span> * block) &#123;</span>
<span class="line">                <span class="keyword">int</span> low = start;</span>
<span class="line">                <span class="keyword">int</span> mid = (start + block) &lt; len ? (start + block) : len;</span>
<span class="line">                <span class="keyword">int</span> high = (start + <span class="number">2</span> * block) &lt; len ? (start + <span class="number">2</span> * block) : len;</span>
<span class="line">                <span class="comment">// 两个块的起始下标及结束下标</span></span>
<span class="line">                <span class="keyword">int</span> start1 = low, end1 = mid;</span>
<span class="line">                <span class="keyword">int</span> start2 = mid, end2 = high;</span>
<span class="line">                <span class="comment">// 开始对两个block进行归并排序</span></span>
<span class="line">                <span class="keyword">while</span> (start1 &lt; end1 &amp;&amp; start2 &lt; end2) &#123;</span>
<span class="line">                    result[low++] = nums[start1] &lt; nums[start2] ? nums[start1++] : nums[start2++];</span>
<span class="line">                &#125;</span>
<span class="line">                <span class="keyword">while</span> (start1 &lt; end1) &#123;</span>
<span class="line">                    result[low++] = nums[start1++];</span>
<span class="line">                &#125;</span>
<span class="line">                <span class="keyword">while</span> (start2 &lt; end2) &#123;</span>
<span class="line">                    result[low++] = nums[start2++];</span>
<span class="line">                &#125;</span>
<span class="line">            &#125;</span>
<span class="line">            <span class="keyword">int</span>[] temp = nums;</span>
<span class="line">            nums = result;</span>
<span class="line">            result = temp;</span>
<span class="line">        &#125;</span>
<span class="line">        result = nums;</span>
<span class="line">    &#125;</span>
</pre></td></tr></table></figure>
<h2 id="算法复杂度分析"><a href="#算法复杂度分析" class="headerlink" title="算法复杂度分析"></a>算法复杂度分析</h2><p>比较操作的次数介于(n*logn)/2(n log n)/2和n*logn?n+1。 赋值操作的次数是 n*logn。归并算法的空间复杂度为：O(n)。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/归并排序" target="_blank" rel="noopener">归并排序</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sort </tag>
            
            <tag> algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用排序算法总结3一一插入排序]]></title>
      <url>https://craneyuan.github.io/2016/08/29/the-sort-algorithm-of-insert-sort/</url>
      <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote>
<p>插入排序（英文：insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p>
</blockquote>
<p><img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1521872768/blog/a8gxde7srvn5wqtzkcva.gif" alt="插入排序演示动画1"></p>
<h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><p>插入排序算法的运作如下：</p>
<ul>
<li>从第一个元素开始，该元素可以认为已经被排序</li>
<li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li>
<li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li>
<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li>
<li>将新元素插入到该位置后</li>
<li>重复步骤2~5</li>
</ul>
<p>如果比较操作的代价比交换操作大的话，可以采用二分查找法来减少比较操作的数目。该算法可以认为是插入排序的一个变种，称为二分查找插入排序。</p>
<p>伪代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line">insertion_sort(array, length)</span>
<span class="line">&#123;</span>
<span class="line">    var i, j, temp;</span>
<span class="line">    for (i = 1; i &lt; length; i++) &#123;</span>
<span class="line">        temp = array[i]; //与已排序的数逐一比较，大于temp时，该数向后移</span>
<span class="line">        for (j = i - 1; j &gt;= 0 &amp;&amp; array[j] &gt; temp; j--) </span>
<span class="line">            array[j + 1] = array[j];</span>
<span class="line"></span>
<span class="line">        array[j+1] = temp; //被排序数放到正确的位置</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1521872817/blog/m2ww9jltfvwl3xltbzre.gif" alt="插入排序动画演示2"></p>
<h2 id="代码实现（java）"><a href="#代码实现（java）" class="headerlink" title="代码实现（java）"></a>代码实现（java）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span>
<span class="line"><span class="comment"> * 插入排序的简单实现</span></span>
<span class="line"><span class="comment"> */</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span>
<span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span>
<span class="line">        <span class="keyword">int</span> value = nums[i];</span>
<span class="line">        <span class="keyword">int</span> j = i - <span class="number">1</span>;</span>
<span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; nums[j] &gt; value) &#123;</span>
<span class="line">            nums[j + <span class="number">1</span>] = nums[j];</span>
<span class="line">            j = j - <span class="number">1</span>;</span>
<span class="line">        &#125;</span>
<span class="line">        nums[j + <span class="number">1</span>] = value;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="算法复杂度分析"><a href="#算法复杂度分析" class="headerlink" title="算法复杂度分析"></a>算法复杂度分析</h2><p>如果目标是把n个元素的序列升序排列，那么采用插入排序存在最好情况和最坏情况。最好情况就是，序列已经是升序排列了，在这种情况下，需要进行的比较操作需(n-1)次即可。最坏情况就是，序列是降序排列，那么此时需要进行的比较共有n(n-1)/2次。插入排序的赋值操作是比较操作的次数加上(n-1)次。平均来说插入排序算法复杂度为O(n2)。因而，插入排序不适合对于数据量比较大的排序应用。但是，如果需要排序的数据量很小，例如，量级小于千，那么插入排序还是一个不错的选择。 插入排序在工业级库中也有着广泛的应用，在STL的sort算法和stdlib的qsort算法中，都将插入排序作为快速排序的补充，用于少量元素的排序（通常为8个或以下）。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/插入排序" target="_blank" rel="noopener">插入排序</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sort </tag>
            
            <tag> algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用排序算法总结2一一选择排序]]></title>
      <url>https://craneyuan.github.io/2016/08/28/the-sort-algorithm-of-select-sort/</url>
      <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote>
<p>选择排序（英文：selection sort）是一种简单直观的排序算法。它首先在未排序的序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>
</blockquote>
<p><img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1521872863/blog/ycjwfucucvgowsx1fd00.gif" alt="选择排序演示动画"></p>
<p>选择排序的主要优点与数据移动有关。如果某个元素位于正确的最终位置上，则它不会被移动。选择排序每次交换一对元素，它们当中至少有一个将被移到其最终位置上，因此对n个元素的表进行排序总共进行至多n-1次交换。在所有的完全依靠交换去移动元素的排序方法中，选择排序属于非常好的一种。</p>
<h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><p>选择排序算法的运作如下：</p>
<ul>
<li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置</li>
<li>然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li>
<li>以此类推，直到所有元素均排序完毕。</li>
</ul>
<p>伪代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
</pre></td><td class="code"><pre><span class="line">selection_sort(array, length)</span>
<span class="line">&#123;</span>
<span class="line">    var i, j, min, temp;</span>
<span class="line">    for (i = 0; i &lt; length - 1; i++) &#123;</span>
<span class="line">		// 记录当前最小元素的位置</span>
<span class="line">        min = i;</span>
<span class="line">        for (j = i + 1; j &lt; length; j++)</span>
<span class="line">            if (array[min] &gt; array[j])</span>
<span class="line">                min = j;</span>
<span class="line">        temp = array[min];</span>
<span class="line">        array[min] = array[i];</span>
<span class="line">        array[i] = temp;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1521872907/blog/ai7fzn2szplbboiz6wem.gif" alt="选择排序演示动画二"></p>
<h2 id="代码实现（java）"><a href="#代码实现（java）" class="headerlink" title="代码实现（java）"></a>代码实现（java）</h2><h3 id="一般实现"><a href="#一般实现" class="headerlink" title="一般实现"></a>一般实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span>
<span class="line"><span class="comment"> * 选择排序的简单实现</span></span>
<span class="line"><span class="comment"> */</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span>
<span class="line">    <span class="keyword">int</span> temp;</span>
<span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> currentPlace = <span class="number">0</span>; currentPlace &lt; nums.length - <span class="number">1</span>; currentPlace++) &#123;</span>
<span class="line">        <span class="keyword">int</span> smallest = nums[currentPlace + <span class="number">1</span>];</span>
<span class="line">        <span class="keyword">int</span> smallestAt = currentPlace + <span class="number">1</span>;</span>
<span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> check = currentPlace; check &lt; nums.length; check++) &#123;</span>
<span class="line">            <span class="keyword">if</span> (nums[check] &lt; smallest) &#123;</span>
<span class="line">                smallestAt = check;</span>
<span class="line">                smallest = nums[check];</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;</span>
<span class="line">        temp = nums[currentPlace];</span>
<span class="line">        nums[currentPlace] = nums[smallestAt];</span>
<span class="line">        nums[smallestAt] = temp;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="通用实现"><a href="#通用实现" class="headerlink" title="通用实现"></a>通用实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span>
<span class="line"><span class="comment">     * 选择排序的简单实现（支持泛型）</span></span>
<span class="line"><span class="comment">     */</span></span>
<span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;? <span class="keyword">super</span> E&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(E[] comparable)</span> </span>&#123;</span>
<span class="line">        E temp;</span>
<span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> currentPlace = <span class="number">0</span>; currentPlace &lt; comparable.length - <span class="number">1</span>; currentPlace++) &#123;</span>
<span class="line">            E smallest = comparable[currentPlace + <span class="number">1</span>];</span>
<span class="line">            <span class="keyword">int</span> smallestAt = currentPlace + <span class="number">1</span>;</span>
<span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> check = currentPlace; check &lt; comparable.length; check++) &#123;</span>
<span class="line">                <span class="keyword">if</span> (comparable[check].compareTo(smallest) &lt; <span class="number">0</span>) &#123;</span>
<span class="line">                    smallestAt = check;</span>
<span class="line">                    smallest = comparable[check];</span>
<span class="line">                &#125;</span>
<span class="line">            &#125;</span>
<span class="line">            temp = comparable[currentPlace];</span>
<span class="line">            comparable[currentPlace] = comparable[smallestAt];</span>
<span class="line">            comparable[smallestAt] = temp;</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
</pre></td></tr></table></figure>
<h2 id="算法复杂度分析"><a href="#算法复杂度分析" class="headerlink" title="算法复杂度分析"></a>算法复杂度分析</h2><ul>
<li>选择排序的<strong><em>交换操作</em></strong>介于0和(n-1)次之间。选择排序的<strong><em>比较操作</em></strong>为n(n-1)/2次之间。选择排序的<strong><em>赋值操作</em></strong>介于0和3(n-1)次之间。</li>
<li>比较次数O(n^2)，比较次数与关键字的初始状态无关，总的比较次数N=(n-1)+(n-2)+…+1=n(n-1)/2。交换次数O(n)，最好情况是，已经有序，交换0次；最坏情况是，逆序，交换n-1次。交换次数比冒泡排序较少，由于交换所需CPU时间比比较所需的CPU时间多，值较小时，选择排序比冒泡排序快。</li>
<li>原地操作几乎是选择排序的唯一优点，当空间复杂度（space complexity）要求较高时，可以考虑选择排序；实际适用的场合非常罕见。</li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/选择排序" target="_blank" rel="noopener">选择排序</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sort </tag>
            
            <tag> algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用排序算法总结1一一冒泡排序]]></title>
      <url>https://craneyuan.github.io/2016/08/28/the-sort-algorithm-of-bubble-sort/</url>
      <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote>
<p>冒泡排序（英文：bubble Sort）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>
</blockquote>
<p><img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1521872975/blog/lsts2aa5n0mbvrtpdrl1.gif" alt="冒泡排序过程"></p>
<h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><p>冒泡排序算法的运作如下：</p>
<ul>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li>
<li>针对所有的元素重复以上的步骤，除了最后一个。</li>
<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>
</ul>
<p>伪代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line">function bubble_sort (array, length) &#123;</span>
<span class="line">    var i, j;</span>
<span class="line">    for(i from 0 to length-1)&#123;</span>
<span class="line">        for(j from 0 to length-1-i)&#123;</span>
<span class="line">            if (array[j] &gt; array[j+1])</span>
<span class="line">                swap(array[j], array[j+1])</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></p>
<h2 id="代码实现（java）"><a href="#代码实现（java）" class="headerlink" title="代码实现（java）"></a>代码实现（java）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span>
<span class="line"><span class="comment"> * 冒泡排序简单实现</span></span>
<span class="line"><span class="comment"> */</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span>
<span class="line">    <span class="keyword">int</span> tmp;</span>
<span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span>
<span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.length - i - <span class="number">1</span>; j++) &#123;</span>
<span class="line">            <span class="keyword">if</span> (nums[j] &gt; nums[j + <span class="number">1</span>]) &#123;</span>
<span class="line">                tmp = nums[j];</span>
<span class="line">                nums[j] = nums[j + <span class="number">1</span>];</span>
<span class="line">                nums[j + <span class="number">1</span>] = tmp;</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/排序算法" target="_blank" rel="noopener">排序算法</a></li>
<li><a href="https://zh.wikipedia.org/wiki/冒泡排序#JAVA" target="_blank" rel="noopener">冒泡排序</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sort </tag>
            
            <tag> algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中访问修饰符和构造函数的一点总结]]></title>
      <url>https://craneyuan.github.io/2016/08/24/the-summary-of-constructor-and-modifier/</url>
      <content type="html"><![CDATA[<h2 id="Java访问修饰符"><a href="#Java访问修饰符" class="headerlink" title="Java访问修饰符"></a>Java访问修饰符</h2><table>
<thead>
<tr>
<th>访问修饰符</th>
<th>作用范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>public</td>
<td>完全开发</td>
</tr>
<tr>
<td>private</td>
<td>只能本类访问</td>
</tr>
<tr>
<td>protected</td>
<td>同包及子类访问</td>
</tr>
<tr>
<td>default(无修饰符时)</td>
<td>同包访问</td>
</tr>
</tbody>
</table>
<h2 id="Java用于类的修饰符（2个）和限定符（2个）"><a href="#Java用于类的修饰符（2个）和限定符（2个）" class="headerlink" title="Java用于类的修饰符（2个）和限定符（2个）"></a>Java用于类的修饰符（2个）和限定符（2个）</h2><table>
<thead>
<tr>
<th>访问修饰符</th>
<th>作用范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>public</td>
<td>完全开放</td>
</tr>
<tr>
<td>default(无)</td>
<td>同包访问</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意：内部类可以拥有更多的访问修饰符</p>
</blockquote>
<hr>
<table>
<thead>
<tr>
<th>限定符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>abstract</td>
<td>指定为抽象类</td>
</tr>
<tr>
<td>final</td>
<td>指定为终态类，不可被继承</td>
</tr>
</tbody>
</table>
<h2 id="Java用于成员变量的修饰符"><a href="#Java用于成员变量的修饰符" class="headerlink" title="Java用于成员变量的修饰符"></a>Java用于成员变量的修饰符</h2><ul>
<li>public</li>
<li>protected </li>
<li>private </li>
<li>static </li>
<li>final</li>
<li>transient </li>
<li>volatile</li>
</ul>
<p>限定词含义：</p>
<table>
<thead>
<tr>
<th>限定符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>static</td>
<td>类属性，可通过类名直接调用</td>
</tr>
<tr>
<td>final</td>
<td>该成员不能被重写，即定义常量</td>
</tr>
<tr>
<td>transient</td>
<td>不序列化</td>
</tr>
<tr>
<td>volatile</td>
<td>可被多个线程访问 （同步变量）</td>
</tr>
</tbody>
</table>
<h2 id="Java用于成员方法的修饰符"><a href="#Java用于成员方法的修饰符" class="headerlink" title="Java用于成员方法的修饰符"></a>Java用于成员方法的修饰符</h2><ul>
<li>public</li>
<li>protected </li>
<li>private </li>
<li>static </li>
<li>final</li>
<li>abstract</li>
<li>native</li>
<li>synchronized</li>
</ul>
<p>限定词含义：<br>|限定符|描述|<br>| — | — |<br>|static|类(静态)方法，可通过类名直接调用|<br>|final|方法不能被重写|<br>|native| 集成其它语言的代码 本地方法|<br>|abstract|抽象方法，没有方法体|<br>|synchronized|控制多个并发线程的访问 （同步方法）|</p>
<h2 id="构造函数的一些注意事项"><a href="#构造函数的一些注意事项" class="headerlink" title="构造函数的一些注意事项"></a>构造函数的一些注意事项</h2><blockquote>
<p>在 Java 中，无论是 explicit（显式的） 还是 implicit（隐式的）方式，都要求在子类的构造方法中调用其父类的构造方法。</p>
</blockquote>
<p>如果父类无构造方法（其实是一个默认无参的构造方法），那么子类的构造方法中会自动进行调用；如果父类有自己的构造方法（这时父类不会有默认无参的构造方法），那么在子类的构造方法中，必须要调用父类的某个构造方法，而且必须是在构造方法的第一个语句 中进行调用。 究其原因，想必是 Java 语言设计者，要求子类有责任保证它所继承的父类尽快进入到一个稳定、完整的状态中。试想，如果没有这个约束，那么子类的某个继承自父类的方法可能会使用到父类中的一些变量，而这些变量并没有进行初始化，从而产生一些难以预料的后果。 </p>
<ul>
<li><p>构造函数必须满足的语法规则：方法名必须与类名相同；不要声明返回类型；不能被static、final、synchronized、abstract、native等修饰。</p>
</li>
<li><p>构造方法可以被重载，来表达对象的多种初始化行为。在重载构造方法中可以使用this语句来调用其他构造方法，使用时应该注意：如果在构造方法中使用了this语句，则必须作为构造方法的第一条语句；只能在一个构造方法中用this语句来调用类的其他构造方法，而不能在成员方法中调用类的构造方法；只能通过this语句来调用其他构造方法，不能通过方法名来直接调用构造方法。</p>
</li>
<li><p>在java中，如果用户定义的类中没有提供任何构造方法，java语言会自动提供一个默认的构造方法，该默认构造方法没有参数，用public修饰，且方法体为空。当然，程序中也可以显示的定义默认构造方法。</p>
</li>
<li><p>如果类中显示定义了一个或多个构造方法，并且所有的构造方法都带有参数，那么这个类就失去了java语言为其准备的默认构造方法，此时若使用该类的默认构造方法（即不含参数的构造方法）时就是编译出错。</p>
</li>
<li><p>父类的构造方法不能被子类继承，但是，在子类的构造方法中可以通过super语句调用父类的构造方法。使用super语句应该注意：在子类的构造方法中使用super语句，它必须作为第一条语句。</p>
</li>
<li><p>在创建子类的对象时，java虚拟机首先执行父类的构造方法，然后再执行子类的构造方法，在多级继承的情况下，将从继承树的最上层得父类开始，依次执行各个类的构造方法，这可以保证子类对象从所有直接或间接父类中继承的实例变量都被正确的初始化。</p>
</li>
<li><p>如果子类的构造方法中没有用super语句显示调用父类的构造方法，那么通过这个构造方法创建子类对象时，java虚拟机会自动先调用父类的默认构造方法，而此时若父类没有默认构造方法时，就是编译出错。<br>例如</p>
</li>
</ul>
<pre><code>class A //该类定义了含参数的构造方法，就失去了默认的无参的构造方法
{
    int i;
    A(int i) {
        this.i=i*2;
    }
}
public class B extends A
{
    B(int i) {
        //该构造方法没有super显示调用父类的构造方法，将自动调用父类的默认构造方法，而父类A没有默认构造方法，这里将编译错误
        System.out.println(i);
    }
    public static void main(String[] args) {
        B b=new B(2);
    }
}
</code></pre><ul>
<li><p>构造方法被调用的几种方式：</p>
<ul>
<li>当前类的其他构造方法通过this语句调用它；</li>
<li>当前类的子类的构造方法通过super语句调用它；</li>
<li>在程序中通过new语句调用它。</li>
</ul>
</li>
<li><p>构造方法可以处于public、protected、private和默认四种访问级别之一。当构造方法为private级别时，意味着只能在当前类访问它，不能被继承，不能被其他程序用new创建实例对象。可以对比其他几种修饰符的作用：abstract修饰的类，不允许被实例化，这点和private修饰构造方法相同，但abstract修饰的类可以被继承，拥有子类，可以创建子类的实例；final类禁止被继承，这点和private修饰构造方法相同，但是final类可以用new创建实例对象。</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Java平台 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中文件拷贝的几种实现方案]]></title>
      <url>https://craneyuan.github.io/2016/08/23/the-ways-of-copy-file/</url>
      <content type="html"><![CDATA[<p>在jdk1.7之前，java中没有直接的类提供文件复制功能。下面就文件复制，提出几种方案。</p>
<h2 id="jdk1-7中的文件复制"><a href="#jdk1-7中的文件复制" class="headerlink" title="jdk1.7中的文件复制"></a>jdk1.7中的文件复制</h2><p>在jdk1.7版本中可以直接使用Files.copy(File srcFile, File destFile)方法即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">private static void copyFileUsingJava7Files(File source, File dest) throws IOException &#123;</span>
<span class="line">    Files.copy(source.toPath(), dest.toPath());</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="使用FileInputStream复制"><a href="#使用FileInputStream复制" class="headerlink" title="使用FileInputStream复制"></a>使用FileInputStream复制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
</pre></td><td class="code"><pre><span class="line">public static void copyFileUsingStream(File source, File dest) throws IOException &#123;</span>
<span class="line">    InputStream is = null;</span>
<span class="line">    OutputStream os = null;</span>
<span class="line">    try &#123;</span>
<span class="line">        is = new FileInputStream(source);</span>
<span class="line">        os = new FileOutputStream(dest);</span>
<span class="line">        byte[] buffer = new byte[1024];</span>
<span class="line">        int length;</span>
<span class="line">        while ((length = is.read(buffer)) &gt; 0) &#123;</span>
<span class="line">            os.write(buffer, 0, length);</span>
<span class="line">        &#125;</span>
<span class="line">    &#125; finally &#123;</span>
<span class="line">        if (is != null) &#123;</span>
<span class="line">            is.close();</span>
<span class="line">        &#125;</span>
<span class="line">        if (os != null) &#123;</span>
<span class="line">            os.close();</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="使用FileChannel实现复制"><a href="#使用FileChannel实现复制" class="headerlink" title="使用FileChannel实现复制"></a>使用FileChannel实现复制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
</pre></td><td class="code"><pre><span class="line">public static void copyFileUsingChannel(File source, File dest) throws IOException &#123;</span>
<span class="line">    FileChannel sourceChannel = null;</span>
<span class="line">    FileChannel destChannel = null;</span>
<span class="line">    try &#123;</span>
<span class="line">        sourceChannel = new FileInputStream(source).getChannel();</span>
<span class="line">        destChannel = new FileOutputStream(dest).getChannel();</span>
<span class="line">        destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());</span>
<span class="line">    &#125; finally &#123;</span>
<span class="line">        if (sourceChannel != null) &#123;</span>
<span class="line">            sourceChannel.close();</span>
<span class="line">        &#125;</span>
<span class="line">        if (destChannel != null) &#123;</span>
<span class="line">            destChannel.close();</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="使用Apache-Commons-IO包中的FileUtils-copyFile复制"><a href="#使用Apache-Commons-IO包中的FileUtils-copyFile复制" class="headerlink" title="使用Apache Commons IO包中的FileUtils.copyFile复制"></a>使用Apache Commons IO包中的FileUtils.copyFile复制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">public static void copyFileUsingApacheIO(File source, File dest) throws IOException &#123;</span>
<span class="line">    FileUtils.copyFile(source, dest);</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="使用IO重定向实现复制"><a href="#使用IO重定向实现复制" class="headerlink" title="使用IO重定向实现复制"></a>使用IO重定向实现复制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
</pre></td><td class="code"><pre><span class="line">public static void copyFileUsingRedirection(File source, File dest) throws IOException &#123;</span>
<span class="line">    FileInputStream in = null;</span>
<span class="line">    PrintStream out = null;</span>
<span class="line">    try &#123;</span>
<span class="line">        in = new FileInputStream(source);</span>
<span class="line">        out = new PrintStream(dest);</span>
<span class="line">        System.setIn(in);</span>
<span class="line">        System.setOut(out);</span>
<span class="line">        Scanner sc = new Scanner(System.in);</span>
<span class="line">        while (sc.hasNext()) &#123;</span>
<span class="line">            System.out.println(sc.nextLine());</span>
<span class="line">        &#125;</span>
<span class="line">    &#125; finally &#123;</span>
<span class="line">        if (in != null) &#123;</span>
<span class="line">            in.close();</span>
<span class="line">        &#125;</span>
<span class="line">        if (out != null) &#123;</span>
<span class="line">            out.close();</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java平台 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> how-to </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中资源关闭的处理方式]]></title>
      <url>https://craneyuan.github.io/2016/08/23/the-way-to-release-resources/</url>
      <content type="html"><![CDATA[<p>原文链接：<a href="http://www.programcreek.com/2013/12/should-close-be-put-in-finally-block-or-not/" target="_blank" rel="noopener">should-close-be-put-in-finally-block-or-not</a></p>
<p>译者：craneyuan</p>
<p>[ 转载请保留原文出处、译者和译文链接。]</p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文就关于IO资源的处理问题，提出三种方案。</p>
<ul>
<li>close()放在try块中</li>
<li>close()放在finally块中</li>
<li>使用try-with-resource语句</li>
</ul>
<h2 id="close-放在try块中"><a href="#close-放在try块中" class="headerlink" title="close()放在try块中"></a>close()放在try块中</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line">//close() is in try clause</span>
<span class="line">try &#123;</span>
<span class="line">	PrintWriter out = new PrintWriter(</span>
<span class="line">			new BufferedWriter(</span>
<span class="line">			new FileWriter(&quot;out.txt&quot;, true)));</span>
<span class="line">	out.println(&quot;the text&quot;);</span>
<span class="line">	out.close();</span>
<span class="line">&#125; catch (IOException e) &#123;</span>
<span class="line">	e.printStackTrace();</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>这种方式容易造成IO资源的泄露，因为对于IO资源来说不管操作的结果如何都必须关闭。</p>
<h2 id="close-放在finally块中"><a href="#close-放在finally块中" class="headerlink" title="close()放在finally块中"></a>close()放在finally块中</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
</pre></td><td class="code"><pre><span class="line">//close() is in finally clause</span>
<span class="line">PrintWriter out = null;</span>
<span class="line">try &#123;</span>
<span class="line">	out = new PrintWriter(</span>
<span class="line">		new BufferedWriter(</span>
<span class="line">		new FileWriter(&quot;out.txt&quot;, true)));</span>
<span class="line">	out.println(&quot;the text&quot;);</span>
<span class="line">&#125; catch (IOException e) &#123;</span>
<span class="line">	e.printStackTrace();</span>
<span class="line">&#125; finally &#123;</span>
<span class="line">	if (out != null) &#123;</span>
<span class="line">		out.close();</span>
<span class="line">	&#125;</span>
</pre></td></tr></table></figure>
<p>这种方式在<code>JDK1.7</code>之前，推荐使用这种方式，但是，这种方式还是有问题，因为，在try块和finally块中可能都会发生Exception。</p>
<h2 id="使用try-with-resource语句"><a href="#使用try-with-resource语句" class="headerlink" title="使用try-with-resource语句"></a>使用<a href="http://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" target="_blank" rel="noopener">try-with-resource</a>语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line">//try-with-resource statement</span>
<span class="line">try (PrintWriter out2 = new PrintWriter(</span>
<span class="line">			new BufferedWriter(</span>
<span class="line">			new FileWriter(&quot;out.txt&quot;, true)))) &#123;</span>
<span class="line">	out2.println(&quot;the text&quot;);</span>
<span class="line">&#125; catch (IOException e) &#123;</span>
<span class="line">	e.printStackTrace();</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>这种方式可能是最好的，Java官方推荐使用这种方式，但是，使用的前提是你的jdk版本在1.7以上。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>因为不管什么情况下（异常或者非异常）资源都必须关闭，在jdk1.6之前，应该把close()放在finally块中，以确保资源的正确释放。</p>
<p>如果使用jdk1.7以上的版本，推荐使用<a href="http://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" target="_blank" rel="noopener">try-with-resources</a>语句。</p>
]]></content>
      
        <categories>
            
            <category> 译文 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> how-to </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法入门]]></title>
      <url>https://craneyuan.github.io/2016/08/20/the-introduction-of-algorithm/</url>
      <content type="html"><![CDATA[<p>最近在研究算法，发现其实算法也并不是特别难，只要抓住算法的核心思想，再静下心来，都可以自己实现的。在计算机领域，有一些常见的而且又经常使用的算法，这些算法我们应该掌握，比如常见的排序算法；还有一些算法就是特定领域中经常使用的算法了，这些算法我们可以在必须使用时再去学习就行了，比如图像处理中的快速傅里叶变换算法。</p>
<h2 id="算法定义"><a href="#算法定义" class="headerlink" title="算法定义"></a>算法定义</h2><p>让我们来看看算法的定义吧。（以下定义摘自中文维基百科）</p>
<blockquote>
<p>在数学和计算机科学/算学之中，算法/演算法/算则法（algorithm）为一个计算的具体步骤，常用于计算、数据处理和自动推理。精确而言，算法是一个表示为有限长列表的有效方法。算法应包含清晰定义的指令用于计算函数。</p>
<p>算法中的指令描述的是一个计算，当其运行时能从一个初始状态和初始输入（可能为空）开始，经过一系列有限而清晰定义的状态最终产生输出并停止于一个终态。一个状态到另一个状态的转移不一定是确定的。随机化算法在内的一些算法，包含了一些随机输入。</p>
<p>形式化算法的概念部分源自尝试解决希尔伯特提出的判定问题，并在其后尝试定义有效计算性或者有效方法中成形。这些尝试包括库尔特·哥德尔、雅克·埃尔布朗和斯蒂芬·科尔·克莱尼分别于1930年、1934年和1935年提出的递归函数，阿隆佐·邱奇于1936年提出的λ演算，1936年Emil Leon Post的Formulation 1和艾伦·图灵1937年提出的图灵机。即使在当前，依然常有直觉想法难以定义为形式化算法的情况。</p>
</blockquote>
<h2 id="算法的特征"><a href="#算法的特征" class="headerlink" title="算法的特征"></a>算法的特征</h2><p>以下是高德纳在他的著作《计算机程序设计艺术》里对算法的特征归纳：</p>
<ul>
<li>输入：一个算法必须有零个或以上输入量。</li>
<li>输出：一个算法应有一个或以上输出量，输出量是算法计算的结果。</li>
<li>明确性：算法的描述必须无歧义，以保证算法的实际执行结果是精确地匹配要求或期望，通常要求实际运行结果是确定的。</li>
<li>有限性：依据图灵的定义，一个算法是能够被任何图灵完备系统模拟的一串运算，而图灵机只有有限个状态、有限个输入符号和有限个转移函数（指令）。而一些定义更规定算法必须在有限个步骤内完成任务。</li>
<li>有效性：又称可行性。能够实现，算法中描述的操作都是可以通过已经实现的基本运算执行有限次来实现。</li>
</ul>
<h2 id="算法的基本要素"><a href="#算法的基本要素" class="headerlink" title="算法的基本要素"></a>算法的基本要素</h2><p>算法的核心是创建问题抽象的模型和明确求解目标，之后可以根据具体的问题选择不同的模式和方法完成算法的设计。</p>
<p>说起到算法，那么怎样衡量一个算法的好坏呢？答案是通过两方面来考虑，一是从时间上来考虑，也就是所谓的<code>时间复杂度</code>； 还有就是从空间上来考虑，也就是<code>空间复杂度</code>。</p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul>
<li>算法的时间复杂度是指算法需要消耗的时间资源。</li>
</ul>
<p>一般来说，计算机算法是问题规模n 的函数f(n)，算法的时间复杂度也因此记做<code>T(n)=O(f(n))</code>。 </p>
<p>算法执行时间的增长率与f(n) 的增长率正相关，称作渐近时间复杂度（Asymptotic Time Complexity），简称时间复杂度。</p>
<p>常见的时间复杂度有：常数阶O(1),对数阶O(log2n),线性阶O(n), 线性对数阶O(nlog2n),平方阶O(n2)，立方阶O(n3),…， k次方阶O(nk),指数阶O(2n)。随着问题规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低。</p>
<h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul>
<li>算法的空间复杂度是指算法需要消耗的空间资源。</li>
</ul>
<p>其计算和表示方法与时间复杂度类似，一般都用复杂度的渐近性来表示。同时间复杂度相比，空间复杂度的分析要简单得多。</p>
<blockquote>
<p>注意，如果你特别在意算法的时间，在条件允许的情况下可以考虑牺牲空间，也就是所谓的拿空间换取时间。</p>
</blockquote>
<h3 id="算法设计的方法"><a href="#算法设计的方法" class="headerlink" title="算法设计的方法"></a>算法设计的方法</h3><p>另外，对于算法的设计，通常有以下几种方法。</p>
<ul>
<li>穷举法</li>
<li>分治法</li>
<li>动态规划法</li>
<li>贪婪算法</li>
<li>线性规划法</li>
</ul>
<p>这些方法在此就不深入讲解了，因为每一个都可以单独拿出长长的一大篇文章来讲解，不过，我后面会继续深入普及这方面的知识的。</p>
<h3 id="算法实现的方法"><a href="#算法实现的方法" class="headerlink" title="算法实现的方法"></a>算法实现的方法</h3><p>除了了解到算法的常见设计方法，那么还有哪些常见的实现方法呢。</p>
<ul>
<li>一般方法</li>
<li>递归方法</li>
<li>迭代方法</li>
</ul>
<p>好了，讲了这么多理论，还是用一个例子来解释下算法到底是什么。</p>
<h2 id="求最大公约算法"><a href="#求最大公约算法" class="headerlink" title="求最大公约算法"></a>求最大公约算法</h2><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>求两个自然数的最大公约数，设两个变量M和N</p>
<h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a>解题步骤：</h3><p>1.如果M &lt; N，则交换M和N<br>2.M被N除，得到余数R<br>3.判断R＝0，正确则N即为“最大公约数”，否则下一步<br>4.将N赋值给M，将R赋值给N，重做第一步。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
</pre></td><td class="code"><pre><span class="line">void swapi(int *x, int *y)</span>
<span class="line">&#123;</span>
<span class="line">    int tmp = *x;</span>
<span class="line">    *x = *y;</span>
<span class="line">    *y = tmp;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line">int gcd(int m, int n)</span>
<span class="line">&#123;</span>
<span class="line">    int r;</span>
<span class="line">    do &#123;</span>
<span class="line">        if (m &lt; n)</span>
<span class="line">            swapi(&amp;m, &amp;n);</span>
<span class="line">        r = m % n;</span>
<span class="line">        m = n;</span>
<span class="line">        n = r;</span>
<span class="line">    &#125; while (r);</span>
<span class="line">    return m;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>好了就讲这么多了，如果有什么问题可以在下面评论或者发私信给我。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/算法" target="_blank" rel="noopener">算法</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中Scanner类和BufferReader类之间的区别]]></title>
      <url>https://craneyuan.github.io/2016/08/17/the-difference-between-scanner-and-bufferreader-class-in-java/</url>
      <content type="html"><![CDATA[<p>原文链接：<a href="http://www.geeksforgeeks.org/difference-between-scanner-and-bufferreader-class-in-java/" target="_blank" rel="noopener">Difference between Scanner and BufferReader Class in Java</a></p>
<p>译者：craneyuan</p>
<p>[ 转载请保留原文出处、译者和译文链接。]</p>
<hr>
<p>java.util.Scanner类是一个简单的文本扫描类，它可以解析基本数据类型和字符串。它本质上是使用正则表达式去读取不同的数据类型。</p>
<p>Java.io.BufferedReader类为了能够高效的读取字符序列，从字符输入流和字符缓冲区读取文本。</p>
<p>下面是两个类的不同之处：</p>
<p><strong><em>当nextLine()被用在nextXXX()之后，用Scanner类有什么问题</em></strong></p>
<p>尝试去猜测下面代码的输出内容；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
</pre></td><td class="code"><pre><span class="line">// Code using Scanner Class</span>
<span class="line">import java.util.Scanner;</span>
<span class="line">class Differ</span>
<span class="line">&#123;</span>
<span class="line">     public static void main(String args[])</span>
<span class="line">     &#123;</span>
<span class="line">         Scanner scn = new Scanner(System.in);</span>
<span class="line">         System.out.println(&quot;Enter an integer&quot;);</span>
<span class="line">         int a = scn.nextInt();</span>
<span class="line">         System.out.println(&quot;Enter a String&quot;);</span>
<span class="line">         String b = scn.nextLine();</span>
<span class="line">         System.out.printf(&quot;You have entered:- &quot;</span>
<span class="line">                 + a + &quot; &quot; + &quot;and name as &quot; + b);</span>
<span class="line">     &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>Input：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">50</span>
<span class="line">Geek</span>
</pre></td></tr></table></figure>
<p>Output：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">Enter an integer</span>
<span class="line">Enter a String</span>
<span class="line">You have entered:- 50 and name as</span>
</pre></td></tr></table></figure>
<p>让我们尝试使用BufferReader类，并且使用相同的输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
</pre></td><td class="code"><pre><span class="line">// Code using BufferedReader Class</span>
<span class="line">import java.io.*;</span>
<span class="line">class Differ</span>
<span class="line">&#123;</span>
<span class="line">    public static void main(String args[])</span>
<span class="line">                  throws IOException</span>
<span class="line">    &#123;</span>
<span class="line">        BufferedReader br = new BufferedReader(new</span>
<span class="line">        InputStreamReader(System.in));</span>
<span class="line">        System.out.println(&quot;Enter an integer&quot;);</span>
<span class="line">        int a = Integer.parseInt(br.readLine());</span>
<span class="line">        System.out.println(&quot;Enter a String&quot;);</span>
<span class="line">        String b = br.readLine();</span>
<span class="line">        System.out.printf(&quot;You have entered:- &quot; + a +</span>
<span class="line">                          &quot; and name as &quot; + b);</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>Input：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">50</span>
<span class="line">Geek</span>
</pre></td></tr></table></figure>
<p>Output：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">Enter an integer</span>
<span class="line">Enter a String</span>
<span class="line">you have entered:- 50 and name as Geek</span>
</pre></td></tr></table></figure>
<p>在Scanner类中如果我们在这任何7个nextXXX()方法之后调用nextLine()方法，这nextLine()方法不能够从控制台读取任何内容，并且，这游标不会进入控制台，它将跳过这一步。这nextXXX()方法是这些方法，<code>nextInt(),nextFloat(), nextByte(), nextShort(), nextDouble(), nextLong(), next()。</code></p>
<p>在BufferReader类中就没有那种问题。这种问题仅仅出现在Scanner类中，由于nextXXX()方法忽略<strong><em>换行符</em></strong>，但是，nextLine()并不忽略它。如果我们在nextXXX()方法和nextLine()方法之间使用超过一个以上的nextLine()方法，这个问题将不会出现了；因为nextLine()把换行符消耗了。可以参考这个程序的<a href="http://code.geeksforgeeks.org/CErAhD" target="_blank" rel="noopener">正确写法</a>。这个问题和<a href="http://www.geeksforgeeks.org/problem-with-scanf-when-there-is-fgetsgetsscanf-after-it/" target="_blank" rel="noopener">C/C++</a>中的scanf()方法紧跟gets()方法的问题一样。</p>
<p>其他的不同点：</p>
<ul>
<li>BufferedReader是支持同步的，而Scanner不支持。如果我们处理多线程程序，BufferedReader应当使用。</li>
<li>BufferedReader相对于Scanner有足够大的缓冲区内存。</li>
<li>Scanner有很少的缓冲区(1KB字符缓冲)相对于BufferedReader(8KB字节缓冲)，但是这是绰绰有余的。</li>
<li>BufferedReader相对于Scanner来说要快一点，因为Scanner对输入数据进行类解析，而BufferedReader只是简单地读取字符序列。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 译文 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用双引号""创建Java字符串还是使用String构造函数？]]></title>
      <url>https://craneyuan.github.io/2016/08/15/create-java-string-by-double-quotes-vs-by-constructor/</url>
      <content type="html"><![CDATA[<p>原文链接：<a href="http://www.programcreek.com/2014/03/create-java-string-by-double-quotes-vs-by-constructor/" target="_blank" rel="noopener">Create Java String Using ” ” or Constructor? </a></p>
<p>译者：craneyuan</p>
<p>[ 转载请保留原文出处、译者和译文链接。]</p>
<hr>
<p>在Java中，一个字符串可以使用下面这两种方式进行创建：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">String x = &quot;abc&quot;;</span>
<span class="line">String y = new String(&quot;abc&quot;);</span>
</pre></td></tr></table></figure>
<h2 id="这两种创建字符串的方式有什么不同呢？"><a href="#这两种创建字符串的方式有什么不同呢？" class="headerlink" title="这两种创建字符串的方式有什么不同呢？"></a>这两种创建字符串的方式有什么不同呢？</h2><h3 id="双引号-VS-构造函数"><a href="#双引号-VS-构造函数" class="headerlink" title="双引号 VS 构造函数"></a>双引号 VS 构造函数</h3><p>这个问题可以用下面这两个简单的代码实例来回答。</p>
<ul>
<li>例子1：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">String a = &quot;abcd&quot;;</span>
<span class="line">String b = &quot;abcd&quot;;</span>
<span class="line">System.out.println(a == b);  // True</span>
<span class="line">System.out.println(a.equals(b)); // True</span>
</pre></td></tr></table></figure>
<p>a==b是true，因为a和b都引用同一块内存地址。</p>
<p>当相同字符内容的字符串多次创建时，编译器只为其分配一块内存，这叫做“字符串驻留机制”。Java中所有的编译期间常量都将自动“驻留”。</p>
<ul>
<li>例子2</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">String c = new String(&quot;abcd&quot;);</span>
<span class="line">String d = new String(&quot;abcd&quot;);</span>
<span class="line">System.out.println(c == d);  // False</span>
<span class="line">System.out.println(c.equals(d)); // True</span>
</pre></td></tr></table></figure>
<p>c==d是false，因为c和d在堆中引用两个不同的对象。不同的对象总是会有不同的内存地址引用。</p>
<p>下面这插图将解释上面两种情况：<br><img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1521873120/blog/swrnmjfvjxiqmbfzrctu.png" alt="双引号VS构造函数"></p>
<h3 id="运行期字符串驻留技术"><a href="#运行期字符串驻留技术" class="headerlink" title="运行期字符串驻留技术"></a>运行期字符串驻留技术</h3><p>感谢LukasEder（他的讲解如下）：</p>
<p>尽管两个字符串使用字符串构造函数进行的创建，字符串驻留仍然可以在运行期间进行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">String c = new String(&quot;abcd&quot;).intern();</span>
<span class="line">String d = new String(&quot;abcd&quot;).intern();</span>
<span class="line">System.out.println(c == d);  // Now true</span>
<span class="line">System.out.println(c.equals(d)); // True</span>
</pre></td></tr></table></figure>
<h3 id="两种方法的使用场景"><a href="#两种方法的使用场景" class="headerlink" title="两种方法的使用场景"></a>两种方法的使用场景</h3><p>因为字符串“abcd”已经是String类型，使用字符串构造函数将会创建额外没有必要的对象。因此，如果你只想要创建一个字符串对象时，双引号“”推荐使用。如果你的确想要在堆中创建一个新的对象，字符串构造函数将可以使用。</p>
]]></content>
      
        <categories>
            
            <category> 译文 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中class的初始化顺序]]></title>
      <url>https://craneyuan.github.io/2016/08/15/the-procedure-of-init-class-in-java/</url>
      <content type="html"><![CDATA[<h2 id="class的装载"><a href="#class的装载" class="headerlink" title="class的装载"></a>class的装载</h2><p>在讲class的初始化之前，我们来讲解下class的装载顺序。</p>
<p>以下摘自《Thinking in Java 4》</p>
<blockquote>
<p>由于Java 中的一切东西都是对象，所以许多活动<br>变得更加简单，这个问题便是其中的一例。正如下一章会讲到的那样，每个对象的代码都存在于独立的文件<br>中。除非真的需要代码，否则那个文件是不会载入的。通常，我们可认为除非那个类的一个对象构造完毕，<br>否则代码不会真的载入。由于static 方法存在一些细微的歧义，所以也能认为“类代码在首次使用的时候载入”。<br>首次使用的地方也是static 初始化发生的地方。装载的时候，所有static 对象和static 代码块都会按照本<br>来的顺序初始化（亦即它们在类定义代码里写入的顺序）。当然，static 数据只会初始化一次。</p>
</blockquote>
<p>简要的说就是，在类有继承关系时，类加载器上溯造型，进行相关类的加载工作。</p>
<p>比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">Class B extends Class A</span>
<span class="line">当我们new B()时，类加载器自动加载A的代码</span>
</pre></td></tr></table></figure>
<h2 id="class的初始化顺序"><a href="#class的初始化顺序" class="headerlink" title="class的初始化顺序"></a>class的初始化顺序</h2><p>通常是以下这样的初始化顺序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">(static对象和static代码块，依据他们的顺序进行初始化)&gt;成员变量&gt;构造函数</span>
</pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1521873161/blog/fwqguukmi7cabttdmvmh.jpg" alt="class初始化"></p>
<h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
</pre></td><td class="code"><pre><span class="line">public class ClassInit &#123;</span>
<span class="line"></span>
<span class="line">	/**</span>
<span class="line">	 * @Title: 			main</span>
<span class="line">	 * @Description: 	类初始化顺序测试</span>
<span class="line">	 * @param: 			@param args   </span>
<span class="line">	 * @return: 		void   </span>
<span class="line">	 * @throws</span>
<span class="line">	 */</span>
<span class="line">	public static void main(String[] args) &#123;</span>
<span class="line">		// TODO Auto-generated method stub		</span>
<span class="line">		new B();</span>
<span class="line">	&#125;</span>
<span class="line"></span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line">class A &#123;</span>
<span class="line">	static&#123;</span>
<span class="line">		System.out.println(&quot;A的static代码块...&quot;);</span>
<span class="line">	&#125;</span>
<span class="line">	public String s1 = prtString(&quot;A的成员变量...&quot;);</span>
<span class="line">	public static String s2 = prtString(&quot;A的static变量...&quot;);</span>
<span class="line">	public A()&#123;</span>
<span class="line">		System.out.println(&quot;A的构造函数...&quot;);</span>
<span class="line">	&#125;</span>
<span class="line">	</span>
<span class="line">	public static String prtString(String str) &#123;</span>
<span class="line">		System.out.println(str);</span>
<span class="line">		return null;</span>
<span class="line">	&#125;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line">class B extends A&#123;</span>
<span class="line">	public String ss1 = prtString(&quot;B的成员变量...&quot;);</span>
<span class="line">	public static String ss2 = prtString(&quot;B的static变量...&quot;);</span>
<span class="line">	public B()&#123;</span>
<span class="line">		System.out.println(&quot;B的构造函数...&quot;);</span>
<span class="line">	&#125;</span>
<span class="line">	private static A a = new A();</span>
<span class="line">	static&#123;</span>
<span class="line">		System.out.println(&quot;B的static代码块...&quot;);</span>
<span class="line">	&#125;</span>
<span class="line">	&#123;</span>
<span class="line">		System.out.println(&quot;代码块...&quot;);</span>
<span class="line">	&#125;	</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line">A的static代码块...</span>
<span class="line">A的static变量...</span>
<span class="line">B的static变量...</span>
<span class="line">A的成员变量...</span>
<span class="line">A的构造函数...</span>
<span class="line">B的static代码块...</span>
<span class="line">A的成员变量...</span>
<span class="line">A的构造函数...</span>
<span class="line">B的成员变量...</span>
<span class="line">代码块...</span>
<span class="line">B的构造函数...</span>
</pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java平台 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中Map按Value排序]]></title>
      <url>https://craneyuan.github.io/2016/08/15/the-map-of-java-sorted-by-value/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Map是键值对的集合接口，它的实现类主要包括：HashMap,TreeMap,Hashtable以及LinkedHashMap等。</p>
<h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><p>基于红黑树（red-black tree）的 NavigableMap 实现，该映射根据其键的自然顺序进行排序，或者根据创建映射时提供的 Comparator 进行排序，具体取决于使用的构造方法。</p>
<h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>HashMap的值是没有顺序的，它是按照key的HashCode来实现的，对于这个无序的HashMap我们要怎么来实现排序呢？参照TreeMap的value排序。</p>
<blockquote>
<p>Map.Entry返回Collections视图。</p>
</blockquote>
<h2 id="按key排序"><a href="#按key排序" class="headerlink" title="按key排序"></a>按key排序</h2><p>TreeMap默认是升序的，如果我们需要改变排序方式，则需要使用比较器：Comparator。Comparator可以对集合对象或者数组进行排序的比较器接口，实现该接口的public compare(T o1,To2)方法即可实现排序。</p>
<blockquote>
<p>注意：以下代码均已在Jdk1.6测试通过了</p>
</blockquote>
<h3 id="TreeMap默认按key升序排序"><a href="#TreeMap默认按key升序排序" class="headerlink" title="TreeMap默认按key升序排序"></a>TreeMap默认按key升序排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
</pre></td><td class="code"><pre><span class="line">public static void keyUpSort() &#123;</span>
<span class="line">    // 默认情况，TreeMap按key升序排序</span>
<span class="line">    Map&lt;String, Integer&gt; map = new TreeMap&lt;String, Integer&gt;();</span>
<span class="line">    map.put(&quot;acb1&quot;, 5);</span>
<span class="line">    map.put(&quot;bac1&quot;, 3);</span>
<span class="line">    map.put(&quot;bca1&quot;, 20);</span>
<span class="line">    map.put(&quot;cab1&quot;, 80);</span>
<span class="line">    map.put(&quot;cba1&quot;, 1);</span>
<span class="line">    map.put(&quot;abc1&quot;, 10);</span>
<span class="line">    map.put(&quot;abc2&quot;, 12);</span>
<span class="line"></span>
<span class="line">    // 默认情况下，TreeMap对key进行升序排序</span>
<span class="line">    System.out.println(&quot;------------正常情况，TreeMap按key升序排序--------------------&quot;);</span>
<span class="line">    for (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) &#123;</span>
<span class="line">        System.out.println(entry.getKey() + &quot;:&quot; + entry.getValue());</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="修改TreeMap的排序方式，按key降序排序"><a href="#修改TreeMap的排序方式，按key降序排序" class="headerlink" title="修改TreeMap的排序方式，按key降序排序"></a>修改TreeMap的排序方式，按key降序排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
</pre></td><td class="code"><pre><span class="line">public static void keyDownSort() &#123;</span>
<span class="line">    // TreeMap,按key降序排序</span>
<span class="line">    // 降序排序比较器</span>
<span class="line">    Comparator&lt;String&gt; keyComparator = new Comparator&lt;String&gt;() &#123;</span>
<span class="line"></span>
<span class="line">        @Override</span>
<span class="line">        public int compare(String o1, String o2) &#123;</span>
<span class="line">            // TODO Auto-generated method stub</span>
<span class="line">            return o2.compareTo(o1);</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;;</span>
<span class="line"></span>
<span class="line">    Map&lt;String, Integer&gt; map = new TreeMap&lt;String, Integer&gt;(keyComparator);</span>
<span class="line">    map.put(&quot;acb1&quot;, 5);</span>
<span class="line">    map.put(&quot;bac1&quot;, 3);</span>
<span class="line">    map.put(&quot;bca1&quot;, 20);</span>
<span class="line">    map.put(&quot;cab1&quot;, 80);</span>
<span class="line">    map.put(&quot;cba1&quot;, 1);</span>
<span class="line">    map.put(&quot;abc1&quot;, 10);</span>
<span class="line">    map.put(&quot;abc2&quot;, 12);</span>
<span class="line"></span>
<span class="line">    System.out.println(&quot;------------TreeMap按key降序排序--------------------&quot;);</span>
<span class="line">    for (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) &#123;</span>
<span class="line">        System.out.println(entry.getKey() + &quot;:&quot; + entry.getValue());</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="按Value排序"><a href="#按Value排序" class="headerlink" title="按Value排序"></a>按Value排序</h2><blockquote>
<p>以下只演示按TreeMap按Value升序排序，这同样适用于HashMap。</p>
</blockquote>
<h3 id="修改TreeMap的排序方式，按Value升序排序"><a href="#修改TreeMap的排序方式，按Value升序排序" class="headerlink" title="修改TreeMap的排序方式，按Value升序排序"></a>修改TreeMap的排序方式，按Value升序排序</h3><blockquote>
<p>注意：正常情况下Map是不可以使用Collections.sort()方法进行排序的，不过可以将Map转换成list之后再进行排序。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
</pre></td><td class="code"><pre><span class="line">public static void valueUpSort() &#123;</span>
<span class="line">    // 默认情况，TreeMap按key升序排序</span>
<span class="line">    Map&lt;String, Integer&gt; map = new TreeMap&lt;String, Integer&gt;();</span>
<span class="line">    map.put(&quot;acb1&quot;, 5);</span>
<span class="line">    map.put(&quot;bac1&quot;, 3);</span>
<span class="line">    map.put(&quot;bca1&quot;, 20);</span>
<span class="line">    map.put(&quot;cab1&quot;, 80);</span>
<span class="line">    map.put(&quot;cba1&quot;, 1);</span>
<span class="line">    map.put(&quot;abc1&quot;, 10);</span>
<span class="line">    map.put(&quot;abc2&quot;, 12);</span>
<span class="line">    </span>
<span class="line">    // 升序比较器</span>
<span class="line">    Comparator&lt;Map.Entry&lt;String, Integer&gt;&gt; valueComparator = new Comparator&lt;Map.Entry&lt;String,Integer&gt;&gt;() &#123;</span>
<span class="line">        @Override</span>
<span class="line">        public int compare(Entry&lt;String, Integer&gt; o1,</span>
<span class="line">                Entry&lt;String, Integer&gt; o2) &#123;</span>
<span class="line">            // TODO Auto-generated method stub</span>
<span class="line">            return o1.getValue()-o2.getValue();</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;;</span>
<span class="line"></span>
<span class="line">    // map转换成list进行排序</span>
<span class="line">    List&lt;Map.Entry&lt;String, Integer&gt;&gt; list = new ArrayList&lt;Map.Entry&lt;String,Integer&gt;&gt;(map.entrySet());</span>
<span class="line"></span>
<span class="line">    // 排序</span>
<span class="line">    Collections.sort(list,valueComparator);</span>
<span class="line"></span>
<span class="line">    // 默认情况下，TreeMap对key进行升序排序</span>
<span class="line">    System.out.println(&quot;------------map按照value升序排序--------------------&quot;);</span>
<span class="line">    for (Map.Entry&lt;String, Integer&gt; entry : list) &#123;</span>
<span class="line">        System.out.println(entry.getKey() + &quot;:&quot; + entry.getValue());</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
</pre></td><td class="code"><pre><span class="line">------------正常情况，TreeMap按key升序排序--------------------</span>
<span class="line">abc1:10</span>
<span class="line">abc2:12</span>
<span class="line">acb1:5</span>
<span class="line">bac1:3</span>
<span class="line">bca1:20</span>
<span class="line">cab1:80</span>
<span class="line">cba1:1</span>
<span class="line">------------TreeMap按key降序排序--------------------</span>
<span class="line">cba1:1</span>
<span class="line">cab1:80</span>
<span class="line">bca1:20</span>
<span class="line">bac1:3</span>
<span class="line">acb1:5</span>
<span class="line">abc2:12</span>
<span class="line">abc1:10</span>
<span class="line">------------map按照value升序排序--------------------</span>
<span class="line">cba1:1</span>
<span class="line">bac1:3</span>
<span class="line">acb1:5</span>
<span class="line">abc1:10</span>
<span class="line">abc2:12</span>
<span class="line">bca1:20</span>
<span class="line">cab1:80</span>
</pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java平台 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中的Date和Calendar的常用用法]]></title>
      <url>https://craneyuan.github.io/2016/08/04/java-date-calendar/</url>
      <content type="html"><![CDATA[<p>在java中用到的最多的时间类莫过于 java.util.Date了<br>由于Date类中将getYear(),getMonth()等获取年、月、日的方法都废弃了<br>所以要借助于Calendar来获取年、月、日、周等比较常用的日期格式</p>
<blockquote>
<p>注意：以下代码均已在jdk1.6中测试通过，其他版本可能使用不同，请注意！</p>
</blockquote>
<p>Date与String的互转用法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line">/**</span>
<span class="line"> * Date与String的互转用法，这里需要用到SimpleDateFormat</span>
<span class="line"> */</span>
<span class="line">Date currentTime = new Date();</span>
<span class="line">SimpleDateFormat formatter = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span>
<span class="line">String dateString = formatter.format(currentTime);</span>
<span class="line">Date date = formatter.parse(dateString);</span>
</pre></td></tr></table></figure>
<p>Date与Calendar之间的互转</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line">/**</span>
<span class="line"> * Date与Calendar之间的互转</span>
<span class="line"> */</span>
<span class="line">Calendar  cal = Calendar.getInstance();</span>
<span class="line">cal.setTime(new Date());</span>
<span class="line">Date date1 = cal.getTime();</span>
</pre></td></tr></table></figure>
<p>利用Calendar获取年、月、周、日、小时等时间域</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line">/**</span>
<span class="line"> * 利用Calendar获取年、月、周、日、小时等时间域</span>
<span class="line"> */</span>
<span class="line">cal.get(Calendar.YEAR);</span>
<span class="line">cal.get(Calendar.MONTH);</span>
<span class="line">cal.get(Calendar.WEEK_OF_MONTH);</span>
<span class="line">cal.get(Calendar.DAY_OF_MONTH);</span>
</pre></td></tr></table></figure>
<p>对时间进行加减</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">/**</span>
<span class="line"> * 对时间进行加减</span>
<span class="line"> */</span>
<span class="line">cal.add(Calendar.MONTH, 1);</span>
<span class="line">System.out.println(cal.getTime());</span>
</pre></td></tr></table></figure>
<p>算出给定日期是属于星期几</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line">Calendarcal = Calendar.getInstance();</span>
<span class="line">cal.set(<span class="number">2016</span>,<span class="number">08</span>,<span class="number">01</span>);</span>
<span class="line">String[] strDays = <span class="keyword">new</span> String[] &#123; <span class="string">"SUNDAY"</span>, <span class="string">"MONDAY"</span>, <span class="string">"TUESDAY"</span>,</span>
<span class="line">                                  <span class="string">"WEDNESDAY"</span>, <span class="string">"THURSDAY"</span>, <span class="string">"FRIDAY"</span>, <span class="string">"SATURDAY"</span></span>
<span class="line">                                &#125;;</span>
<span class="line">System.out.println(strDays[cal.get(Calendar.DAY_OF_WEEK) - <span class="number">1</span>]);</span>
</pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java平台 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UML类之间的六大关系总结]]></title>
      <url>https://craneyuan.github.io/2016/08/02/the-relationship-of-uml-class/</url>
      <content type="html"><![CDATA[<h2 id="在UML类图中，常见的有以下几种关系"><a href="#在UML类图中，常见的有以下几种关系" class="headerlink" title="在UML类图中，常见的有以下几种关系:"></a>在UML类图中，常见的有以下几种关系:</h2><ul>
<li>泛化（Generalization）</li>
<li>实现（Realization）</li>
<li>关联（Association)</li>
<li>聚合（Aggregation）</li>
<li>组合(Composition)</li>
<li>依赖(Dependency)</li>
</ul>
<p>各种关系的强弱顺序：</p>
<p><strong>泛化= 实现&gt; 组合&gt; 聚合&gt; 关联&gt; 依赖</strong></p>
<h2 id="泛化（Generalization）："><a href="#泛化（Generalization）：" class="headerlink" title="泛化（Generalization）："></a>泛化（Generalization）：</h2><p>类之间的继承关系用泛化。</p>
<p>【箭头指向】：带三角箭头的实线，箭头指向父类</p>
<p> <img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1521873252/blog/bgypavn4afoa3p6enyrj.jpg" alt="泛化"></p>
<h2 id="实现（Realization）"><a href="#实现（Realization）" class="headerlink" title="实现（Realization）"></a>实现（Realization）</h2><p>类实现接口的关系使用实现。</p>
<p>【箭头指向】：带三角箭头的虚线，箭头指向接口</p>
<p><img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1521873286/blog/rhsoclwf6nqqwb8prlzg.jpg" alt="Realization"></p>
<h2 id="关联（Association"><a href="#关联（Association" class="headerlink" title="关联（Association)"></a>关联（Association)</h2><p>类之间的拥有关系用关联。</p>
<p>【箭头及指向】：带普通箭头的实心线，指向被拥有者</p>
<p><img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1521873316/blog/gilhimkbdoquwsijwgep.jpg" alt="Association"></p>
<h2 id="聚合（Aggregation）"><a href="#聚合（Aggregation）" class="headerlink" title="聚合（Aggregation）"></a>聚合（Aggregation）</h2><p>聚合是一种弱的整体与部分的关系，整体可以脱离部分而单独存在。</p>
<p>【箭头及指向】：带空心菱形的实心线，菱形指向整体</p>
<p><img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1521873344/blog/aflh0zijvujt6yrpn27v.jpg" alt="Aggregation"></p>
<h2 id="组合-Composition"><a href="#组合-Composition" class="headerlink" title="组合(Composition)"></a>组合(Composition)</h2><p>组合是一种强的整体与部分的关系，整体不可脱离部分而存在。</p>
<p>【箭头及指向】：带实心菱形的实线，菱形指向整体</p>
<p><img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1521873373/blog/sco73yha04z7sj7lidc6.jpg" alt="Composition"></p>
<h2 id="依赖-Dependency"><a href="#依赖-Dependency" class="headerlink" title="依赖(Dependency)"></a>依赖(Dependency)</h2><p>依赖是一种使用的关系。</p>
<p>【箭头及指向】：带箭头的虚线，指向被使用者</p>
<p><img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1521873396/blog/xogmqiwvlo1tle7ljxcu.jpg" alt="Dependency"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一个完整的uml类图。</p>
<p> <img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1521873422/blog/wm7p67qohskj3pjbptdl.jpg" alt="完整uml图"></p>
]]></content>
      
        <categories>
            
            <category> 软件工程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> uml </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[最大子串和]]></title>
      <url>https://craneyuan.github.io/2016/07/31/the-max-sub-sum/</url>
      <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote>
<p>在长度为N的整形数组中，求连续子串的和的最大值。</p>
<p>例如：1 2 4 5 -11 5 -3，结果为6。</p>
<p>注意：要考虑到数组中元素都为负数的情况。</p>
</blockquote>
<h2 id="O-n-解法"><a href="#O-n-解法" class="headerlink" title="O(n)解法"></a>O(n)解法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxSubSum</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span>
<span class="line">    <span class="keyword">int</span> maxSum = a[<span class="number">0</span>];</span>
<span class="line">    <span class="keyword">int</span> curSum = <span class="number">0</span>;</span>
<span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.length; j++) &#123;</span>
<span class="line">        curSum += a[j];</span>
<span class="line">        <span class="keyword">if</span> (curSum &gt; maxSum) &#123;</span>
<span class="line">            maxSum = curSum;</span>
<span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (curSum &lt; <span class="number">0</span>) &#123;</span>
<span class="line">            curSum = <span class="number">0</span>;</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">return</span> maxSum;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p><strong>本算法的关键在于，对于一个子序列，如果其和为负数，则不可能作为最大子串的前缀。</strong></p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux下获取软件源码的几种方法]]></title>
      <url>https://craneyuan.github.io/2016/07/15/how-to-get-sourcecode-by-linux/</url>
      <content type="html"><![CDATA[<h2 id="直接在源码网站下载"><a href="#直接在源码网站下载" class="headerlink" title="直接在源码网站下载"></a>直接在源码网站下载</h2><ul>
<li><a href="https://github.com/" target="_blank" rel="noopener">github</a></li>
<li><a href="http://ftp.gnu.org/" target="_blank" rel="noopener">gnu软件列表</a></li>
<li>Linux各种发行版的在线软件列表，列如<a href="https://www.archlinux.org/packages/?q=coreutils" target="_blank" rel="noopener">ArchLinux在线软件包</a></li>
</ul>
<h2 id="在Linux发行版下通过包管理器下载"><a href="#在Linux发行版下通过包管理器下载" class="headerlink" title="在Linux发行版下通过包管理器下载"></a>在Linux发行版下通过包管理器下载</h2><p>因为不同的发行版有不同的软件包管理机制，所以在此我只简单介绍ArchLinux和Ubuntu的源码下载方法，其他的发行版请自行参考网上相关文档。</p>
<h3 id="ArchLinux下通过abs-Arch-Build-System-下载"><a href="#ArchLinux下通过abs-Arch-Build-System-下载" class="headerlink" title="ArchLinux下通过abs(Arch Build System)下载"></a><strong>ArchLinux下通过abs(Arch Build System)下载</strong></h3><p>首先，通过pacman安装abs工具</p>
<p><code>sudo pacman -S base-devel abs</code></p>
<p>然后，下载abs树</p>
<p><code>sudo abs</code></p>
<p>接着，下载特定的软件包</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line">sudo abs [package_name]</span>
<span class="line">列如find包：</span>
<span class="line">pacman -Qo  $(<span class="built_in">which</span> find)</span>
<span class="line">结果显示：<span class="string">"/usr/bin/find is owned by findutils 4.4.2-3"</span></span>
<span class="line">cp -r /var/abs/core/findutils /home/your_name/findutils</span>
<span class="line"><span class="built_in">cd</span> /home/your_name/findutils</span>
<span class="line">makepkg -od</span>
</pre></td></tr></table></figure>
<p>makepkg简单用法</p>
<ul>
<li><code>makepkg -od</code> 获取软件源码，不进行构建</li>
<li><code>makepkg -s</code> 自动处理软件相关依赖</li>
<li><code>makepkg -e</code> 构建本地软件包</li>
</ul>
<p>如果你想要手动安装构建的软件包</p>
<p><code>pacman -U name-of-package.xz</code></p>
<h3 id="Ubuntu下通过apt系列工具下载"><a href="#Ubuntu下通过apt系列工具下载" class="headerlink" title="Ubuntu下通过apt系列工具下载"></a><strong>Ubuntu下通过apt系列工具下载</strong></h3><p>Ubuntu下依然以find命令作为列子</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">dpkg -s $(<span class="built_in">which</span> find)</span>
<span class="line">结果显示：findutils: /usr/bin/find</span>
<span class="line">sudo apt-get <span class="built_in">source</span> findutils</span>
<span class="line"><span class="built_in">cd</span> /usr/src/findutils-XXX <span class="comment">#XXX表示版本号  </span></span>
<span class="line">sudo tar zxvf findutils-XXX.tar.gz</span>
</pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://wiki.archlinux.org/" target="_blank" rel="noopener">ArchLinux Wiki</a></li>
<li><a href="http://ftp.gnu.org/" target="_blank" rel="noopener">GNU FTP</a></li>
<li><a href="http://blog.csdn.net/earbao/article/details/17955815" target="_blank" rel="noopener">如何查看linux命令源代码</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[动态分配二维数组]]></title>
      <url>https://craneyuan.github.io/2016/05/21/dynamic-allocate-two-dimension-array/</url>
      <content type="html"><![CDATA[<p>为二维数组动态分配内存涉及以下两个问题：</p>
<ul>
<li>数组元素是否需要连续</li>
<li>数组是否规则</li>
</ul>
<p>在这里我们暂时不考虑数组是否规则，我们从数组元素的分配是否连续考虑。</p>
<h2 id="已知第二维"><a href="#已知第二维" class="headerlink" title="已知第二维"></a>已知第二维</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组指针</span></span>
<span class="line"><span class="keyword">char</span> (*a1)[COLUMNS];</span>
<span class="line">a1 = (<span class="keyword">char</span>(*)[COLUMNS])<span class="built_in">calloc</span>(ROWS,<span class="keyword">sizeof</span>(<span class="keyword">char</span>*));</span>
</pre></td></tr></table></figure>
<h2 id="已知第一维"><a href="#已知第一维" class="headerlink" title="已知第一维"></a>已知第一维</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// 指针数组</span></span>
<span class="line"><span class="keyword">char</span> *a2[ROWS];</span>
<span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ROWS; i++) &#123;</span>
<span class="line">	a2[i] = (<span class="keyword">char</span>*)<span class="built_in">calloc</span>(COLUMNS, <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="已知第一维，一次分配内存（保证内存分配的连续性）"><a href="#已知第一维，一次分配内存（保证内存分配的连续性）" class="headerlink" title="已知第一维，一次分配内存（保证内存分配的连续性）"></a>已知第一维，一次分配内存（保证内存分配的连续性）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// 指针数组</span></span>
<span class="line"><span class="keyword">char</span> *a3[ROWS];</span>
<span class="line">a3[<span class="number">0</span>] = (<span class="keyword">char</span> *)<span class="built_in">calloc</span>(ROWS*COLUMNS, <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span>
<span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ROWS; i++) &#123;</span>
<span class="line">    a3[i] = a3[i<span class="number">-1</span>] + COLUMNS;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="两维都未知"><a href="#两维都未知" class="headerlink" title="两维都未知"></a>两维都未知</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// 二级指针</span></span>
<span class="line"><span class="keyword">char</span> **a4;</span>
<span class="line">a4 = (<span class="keyword">char</span> **)<span class="built_in">calloc</span>(ROWS, <span class="keyword">sizeof</span>(<span class="keyword">char</span>*));</span>
<span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ROWS; i++) &#123;</span>
<span class="line">    a4[i] = (<span class="keyword">char</span>*)<span class="built_in">calloc</span>(COLUMNS, <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="两维都未知，一次分配内存（保证内存分配的连续性）"><a href="#两维都未知，一次分配内存（保证内存分配的连续性）" class="headerlink" title="两维都未知，一次分配内存（保证内存分配的连续性）"></a>两维都未知，一次分配内存（保证内存分配的连续性）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// 二级指针</span></span>
<span class="line"><span class="keyword">char</span> **a5;</span>
<span class="line">a5 = (<span class="keyword">char</span>**)<span class="built_in">calloc</span>(ROWS, <span class="keyword">sizeof</span>(<span class="keyword">char</span>*));</span>
<span class="line">a5[<span class="number">0</span>] = (<span class="keyword">char</span>*)<span class="built_in">calloc</span>(ROWS*COLUMNS, <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span>
<span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ROWS; i++) &#123;</span>
<span class="line">    a5[i] = a5[i<span class="number">-1</span>] + COLUMNS;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
<span class="line">72</span>
<span class="line">73</span>
<span class="line">74</span>
<span class="line">75</span>
<span class="line">76</span>
<span class="line">77</span>
<span class="line">78</span>
<span class="line">79</span>
<span class="line">80</span>
<span class="line">81</span>
<span class="line">82</span>
<span class="line">83</span>
<span class="line">84</span>
<span class="line">85</span>
<span class="line">86</span>
<span class="line">87</span>
<span class="line">88</span>
<span class="line">89</span>
<span class="line">90</span>
<span class="line">91</span>
<span class="line">92</span>
<span class="line">93</span>
<span class="line">94</span>
<span class="line">95</span>
<span class="line">96</span>
<span class="line">97</span>
<span class="line">98</span>
<span class="line">99</span>
<span class="line">100</span>
<span class="line">101</span>
<span class="line">102</span>
<span class="line">103</span>
<span class="line">104</span>
<span class="line">105</span>
<span class="line">106</span>
<span class="line">107</span>
<span class="line">108</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span>
<span class="line"><span class="comment"> * 二维数组的动态内存分配</span></span>
<span class="line"><span class="comment"> * 测试指针和数组之间的关系</span></span>
<span class="line"><span class="comment"> */</span></span>
<span class="line"></span>
<span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROWS 6</span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">define</span> COLUMNS 5</span></span>
<span class="line"></span>
<span class="line"><span class="meta">#<span class="meta-keyword">define</span> P(a) \</span></span>
<span class="line">        &#123; \</span>
<span class="line">            <span class="built_in">printf</span>(<span class="string">"sizeof(%s):\t%d\n"</span>,#a, (<span class="keyword">sizeof</span>((a)))); \</span>
<span class="line">            <span class="built_in">printf</span>(<span class="string">"sizeof(%s[0]):\t%d\n"</span>,#a,(<span class="keyword">sizeof</span>((a)[<span class="number">0</span>]))); \</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line"><span class="meta">#<span class="meta-keyword">define</span> OUT(a) \</span></span>
<span class="line">        &#123;        \</span>
<span class="line">         <span class="built_in">printf</span>(<span class="string">"%s:\t  addr:%p\n"</span>,(#a),(a)); \</span>
<span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ROWS; i++)&#123; \</span>
<span class="line">            <span class="built_in">printf</span>(<span class="string">"%s[%d]:\t  addr:%p\n"</span>,#a,i,((a)[i])); \</span>
<span class="line">         &#125; \</span>
<span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ROWS; i++)&#123; \</span>
<span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; COLUMNS; j++)&#123; \</span>
<span class="line">                <span class="built_in">printf</span>(<span class="string">"%s[%d][%d]: addr:%p\t"</span>,(#a),i,j,&amp;a[i][j]);\</span>
<span class="line">            &#125; \</span>
<span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>); \</span>
<span class="line">         &#125; \</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line"><span class="comment">// 打印数组的地址信息</span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFO(a) \</span></span>
<span class="line">        &#123; \</span>
<span class="line">         P(a) \</span>
<span class="line">         OUT(a) \</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span>
<span class="line"><span class="function"></span>&#123;</span>
<span class="line">    <span class="built_in">printf</span>(<span class="string">"-----二维数组-----\n"</span>);</span>
<span class="line">    <span class="built_in">printf</span>(<span class="string">"a[%d][%d]\n"</span>,ROWS,COLUMNS);</span>
<span class="line">    <span class="comment">// #1 已知第二维</span></span>
<span class="line">    <span class="comment">// 数组指针</span></span>
<span class="line">    <span class="keyword">char</span> (*a1)[COLUMNS];</span>
<span class="line">    a1 = (<span class="keyword">char</span>(*)[COLUMNS])<span class="built_in">calloc</span>(ROWS,<span class="keyword">sizeof</span>(<span class="keyword">char</span>*));</span>
<span class="line">    <span class="built_in">printf</span>(<span class="string">"*****数组指针*****\n"</span>);</span>
<span class="line">    INFO(a1)</span>
<span class="line"></span>
<span class="line">    <span class="comment">// #2 已知第一维</span></span>
<span class="line">    <span class="comment">// 指针数组</span></span>
<span class="line">    <span class="keyword">char</span> *a2[ROWS];</span>
<span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ROWS; i++) &#123;</span>
<span class="line">        a2[i] = (<span class="keyword">char</span>*)<span class="built_in">calloc</span>(COLUMNS, <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="built_in">printf</span>(<span class="string">"*****指针数组*****\n"</span>);</span>
<span class="line">    INFO(a2)</span>
<span class="line"></span>
<span class="line">    <span class="comment">// #3 已知第一维，一次分配内存（保证内存分配的连续性）</span></span>
<span class="line">    <span class="comment">// 指针数组</span></span>
<span class="line">    <span class="keyword">char</span> *a3[ROWS];</span>
<span class="line">    a3[<span class="number">0</span>] = (<span class="keyword">char</span> *)<span class="built_in">calloc</span>(ROWS*COLUMNS, <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span>
<span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ROWS; i++) &#123;</span>
<span class="line">        a3[i] = a3[i<span class="number">-1</span>] + COLUMNS;</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="built_in">printf</span>(<span class="string">"*****指针数组，一次分配内存*****\n"</span>);</span>
<span class="line">    INFO(a3)</span>
<span class="line"></span>
<span class="line">    <span class="comment">// #4 两维都未知</span></span>
<span class="line">    <span class="comment">// 二级指针</span></span>
<span class="line">    <span class="keyword">char</span> **a4;</span>
<span class="line">    a4 = (<span class="keyword">char</span> **)<span class="built_in">calloc</span>(ROWS, <span class="keyword">sizeof</span>(<span class="keyword">char</span>*));</span>
<span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ROWS; i++) &#123;</span>
<span class="line">        a4[i] = (<span class="keyword">char</span>*)<span class="built_in">calloc</span>(COLUMNS, <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="built_in">printf</span>(<span class="string">"*****两维都未知*****\n"</span>);</span>
<span class="line">    INFO(a4)</span>
<span class="line"></span>
<span class="line">    <span class="comment">// #5 两维都未知，一次分配内存（保证内存分配的连续性）</span></span>
<span class="line">    <span class="comment">// 二级指针</span></span>
<span class="line">    <span class="keyword">char</span> **a5;</span>
<span class="line">    a5 = (<span class="keyword">char</span>**)<span class="built_in">calloc</span>(ROWS, <span class="keyword">sizeof</span>(<span class="keyword">char</span>*));</span>
<span class="line">    a5[<span class="number">0</span>] = (<span class="keyword">char</span>*)<span class="built_in">calloc</span>(ROWS*COLUMNS, <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span>
<span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ROWS; i++) &#123;</span>
<span class="line">        a5[i] = a5[i<span class="number">-1</span>] + COLUMNS;</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="built_in">printf</span>(<span class="string">"*****两维都未知，一次分配内存*****\n"</span>);</span>
<span class="line">    INFO(a5)</span>
<span class="line"></span>
<span class="line">    <span class="comment">// 统一释放申请的内存空间</span></span>
<span class="line">    <span class="comment">// free a1</span></span>
<span class="line">    <span class="built_in">free</span>(a1);</span>
<span class="line">    <span class="comment">// free a2</span></span>
<span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ROWS; i++) &#123;</span>
<span class="line">        <span class="built_in">free</span>(a2[i]);</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="comment">// free a3</span></span>
<span class="line">    <span class="built_in">free</span>(a3[<span class="number">0</span>]);</span>
<span class="line">    <span class="comment">// free a4</span></span>
<span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ROWS; i++) &#123;</span>
<span class="line">        <span class="built_in">free</span>(a4[i]);</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="built_in">free</span>(a4);</span>
<span class="line">    <span class="comment">// free a5</span></span>
<span class="line">    <span class="built_in">free</span>(a5[<span class="number">0</span>]);</span>
<span class="line">    <span class="built_in">free</span>(a5);</span>
<span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
<span class="line">72</span>
<span class="line">73</span>
<span class="line">74</span>
<span class="line">75</span>
<span class="line">76</span>
<span class="line">77</span>
<span class="line">78</span>
<span class="line">79</span>
<span class="line">80</span>
<span class="line">81</span>
<span class="line">82</span>
</pre></td><td class="code"><pre><span class="line">-----二维数组-----</span>
<span class="line">a[6][5]</span>
<span class="line">*****数组指针*****</span>
<span class="line">sizeof(a1):	4</span>
<span class="line">sizeof(a1[0]):	5</span>
<span class="line">a1:	  addr:0x9bb2008</span>
<span class="line">a1[0]:	  addr:0x9bb2008</span>
<span class="line">a1[1]:	  addr:0x9bb200d</span>
<span class="line">a1[2]:	  addr:0x9bb2012</span>
<span class="line">a1[3]:	  addr:0x9bb2017</span>
<span class="line">a1[4]:	  addr:0x9bb201c</span>
<span class="line">a1[5]:	  addr:0x9bb2021</span>
<span class="line">a1[0][0]: addr:0x9bb2008	a1[0][1]: addr:0x9bb2009	a1[0][2]: addr:0x9bb200a	a1[0][3]: addr:0x9bb200b	a1[0][4]: addr:0x9bb200c	</span>
<span class="line">a1[1][0]: addr:0x9bb200d	a1[1][1]: addr:0x9bb200e	a1[1][2]: addr:0x9bb200f	a1[1][3]: addr:0x9bb2010	a1[1][4]: addr:0x9bb2011	</span>
<span class="line">a1[2][0]: addr:0x9bb2012	a1[2][1]: addr:0x9bb2013	a1[2][2]: addr:0x9bb2014	a1[2][3]: addr:0x9bb2015	a1[2][4]: addr:0x9bb2016	</span>
<span class="line">a1[3][0]: addr:0x9bb2017	a1[3][1]: addr:0x9bb2018	a1[3][2]: addr:0x9bb2019	a1[3][3]: addr:0x9bb201a	a1[3][4]: addr:0x9bb201b	</span>
<span class="line">a1[4][0]: addr:0x9bb201c	a1[4][1]: addr:0x9bb201d	a1[4][2]: addr:0x9bb201e	a1[4][3]: addr:0x9bb201f	a1[4][4]: addr:0x9bb2020	</span>
<span class="line">a1[5][0]: addr:0x9bb2021	a1[5][1]: addr:0x9bb2022	a1[5][2]: addr:0x9bb2023	a1[5][3]: addr:0x9bb2024	a1[5][4]: addr:0x9bb2025	</span>
<span class="line">*****指针数组*****</span>
<span class="line">sizeof(a2):	24</span>
<span class="line">sizeof(a2[0]):	4</span>
<span class="line">a2:	  addr:0xbfbbbc60</span>
<span class="line">a2[0]:	  addr:0x9bb2028</span>
<span class="line">a2[1]:	  addr:0x9bb2038</span>
<span class="line">a2[2]:	  addr:0x9bb2048</span>
<span class="line">a2[3]:	  addr:0x9bb2058</span>
<span class="line">a2[4]:	  addr:0x9bb2068</span>
<span class="line">a2[5]:	  addr:0x9bb2078</span>
<span class="line">a2[0][0]: addr:0x9bb2028	a2[0][1]: addr:0x9bb2029	a2[0][2]: addr:0x9bb202a	a2[0][3]: addr:0x9bb202b	a2[0][4]: addr:0x9bb202c	</span>
<span class="line">a2[1][0]: addr:0x9bb2038	a2[1][1]: addr:0x9bb2039	a2[1][2]: addr:0x9bb203a	a2[1][3]: addr:0x9bb203b	a2[1][4]: addr:0x9bb203c	</span>
<span class="line">a2[2][0]: addr:0x9bb2048	a2[2][1]: addr:0x9bb2049	a2[2][2]: addr:0x9bb204a	a2[2][3]: addr:0x9bb204b	a2[2][4]: addr:0x9bb204c	</span>
<span class="line">a2[3][0]: addr:0x9bb2058	a2[3][1]: addr:0x9bb2059	a2[3][2]: addr:0x9bb205a	a2[3][3]: addr:0x9bb205b	a2[3][4]: addr:0x9bb205c	</span>
<span class="line">a2[4][0]: addr:0x9bb2068	a2[4][1]: addr:0x9bb2069	a2[4][2]: addr:0x9bb206a	a2[4][3]: addr:0x9bb206b	a2[4][4]: addr:0x9bb206c	</span>
<span class="line">a2[5][0]: addr:0x9bb2078	a2[5][1]: addr:0x9bb2079	a2[5][2]: addr:0x9bb207a	a2[5][3]: addr:0x9bb207b	a2[5][4]: addr:0x9bb207c	</span>
<span class="line">*****指针数组，一次分配内存*****</span>
<span class="line">sizeof(a3):	24</span>
<span class="line">sizeof(a3[0]):	4</span>
<span class="line">a3:	  addr:0xbfbbbc78</span>
<span class="line">a3[0]:	  addr:0x9bb2088</span>
<span class="line">a3[1]:	  addr:0x9bb208d</span>
<span class="line">a3[2]:	  addr:0x9bb2092</span>
<span class="line">a3[3]:	  addr:0x9bb2097</span>
<span class="line">a3[4]:	  addr:0x9bb209c</span>
<span class="line">a3[5]:	  addr:0x9bb20a1</span>
<span class="line">a3[0][0]: addr:0x9bb2088	a3[0][1]: addr:0x9bb2089	a3[0][2]: addr:0x9bb208a	a3[0][3]: addr:0x9bb208b	a3[0][4]: addr:0x9bb208c	</span>
<span class="line">a3[1][0]: addr:0x9bb208d	a3[1][1]: addr:0x9bb208e	a3[1][2]: addr:0x9bb208f	a3[1][3]: addr:0x9bb2090	a3[1][4]: addr:0x9bb2091	</span>
<span class="line">a3[2][0]: addr:0x9bb2092	a3[2][1]: addr:0x9bb2093	a3[2][2]: addr:0x9bb2094	a3[2][3]: addr:0x9bb2095	a3[2][4]: addr:0x9bb2096	</span>
<span class="line">a3[3][0]: addr:0x9bb2097	a3[3][1]: addr:0x9bb2098	a3[3][2]: addr:0x9bb2099	a3[3][3]: addr:0x9bb209a	a3[3][4]: addr:0x9bb209b	</span>
<span class="line">a3[4][0]: addr:0x9bb209c	a3[4][1]: addr:0x9bb209d	a3[4][2]: addr:0x9bb209e	a3[4][3]: addr:0x9bb209f	a3[4][4]: addr:0x9bb20a0	</span>
<span class="line">a3[5][0]: addr:0x9bb20a1	a3[5][1]: addr:0x9bb20a2	a3[5][2]: addr:0x9bb20a3	a3[5][3]: addr:0x9bb20a4	a3[5][4]: addr:0x9bb20a5	</span>
<span class="line">*****两维都未知*****</span>
<span class="line">sizeof(a4):	4</span>
<span class="line">sizeof(a4[0]):	4</span>
<span class="line">a4:	  addr:0x9bb20b0</span>
<span class="line">a4[0]:	  addr:0x9bb20d0</span>
<span class="line">a4[1]:	  addr:0x9bb20e0</span>
<span class="line">a4[2]:	  addr:0x9bb20f0</span>
<span class="line">a4[3]:	  addr:0x9bb2100</span>
<span class="line">a4[4]:	  addr:0x9bb2110</span>
<span class="line">a4[5]:	  addr:0x9bb2120</span>
<span class="line">a4[0][0]: addr:0x9bb20d0	a4[0][1]: addr:0x9bb20d1	a4[0][2]: addr:0x9bb20d2	a4[0][3]: addr:0x9bb20d3	a4[0][4]: addr:0x9bb20d4	</span>
<span class="line">a4[1][0]: addr:0x9bb20e0	a4[1][1]: addr:0x9bb20e1	a4[1][2]: addr:0x9bb20e2	a4[1][3]: addr:0x9bb20e3	a4[1][4]: addr:0x9bb20e4	</span>
<span class="line">a4[2][0]: addr:0x9bb20f0	a4[2][1]: addr:0x9bb20f1	a4[2][2]: addr:0x9bb20f2	a4[2][3]: addr:0x9bb20f3	a4[2][4]: addr:0x9bb20f4	</span>
<span class="line">a4[3][0]: addr:0x9bb2100	a4[3][1]: addr:0x9bb2101	a4[3][2]: addr:0x9bb2102	a4[3][3]: addr:0x9bb2103	a4[3][4]: addr:0x9bb2104	</span>
<span class="line">a4[4][0]: addr:0x9bb2110	a4[4][1]: addr:0x9bb2111	a4[4][2]: addr:0x9bb2112	a4[4][3]: addr:0x9bb2113	a4[4][4]: addr:0x9bb2114	</span>
<span class="line">a4[5][0]: addr:0x9bb2120	a4[5][1]: addr:0x9bb2121	a4[5][2]: addr:0x9bb2122	a4[5][3]: addr:0x9bb2123	a4[5][4]: addr:0x9bb2124	</span>
<span class="line">*****两维都未知，一次分配内存*****</span>
<span class="line">sizeof(a5):	4</span>
<span class="line">sizeof(a5[0]):	4</span>
<span class="line">a5:	  addr:0x9bb2130</span>
<span class="line">a5[0]:	  addr:0x9bb2150</span>
<span class="line">a5[1]:	  addr:0x9bb2155</span>
<span class="line">a5[2]:	  addr:0x9bb215a</span>
<span class="line">a5[3]:	  addr:0x9bb215f</span>
<span class="line">a5[4]:	  addr:0x9bb2164</span>
<span class="line">a5[5]:	  addr:0x9bb2169</span>
<span class="line">a5[0][0]: addr:0x9bb2150	a5[0][1]: addr:0x9bb2151	a5[0][2]: addr:0x9bb2152	a5[0][3]: addr:0x9bb2153	a5[0][4]: addr:0x9bb2154	</span>
<span class="line">a5[1][0]: addr:0x9bb2155	a5[1][1]: addr:0x9bb2156	a5[1][2]: addr:0x9bb2157	a5[1][3]: addr:0x9bb2158	a5[1][4]: addr:0x9bb2159	</span>
<span class="line">a5[2][0]: addr:0x9bb215a	a5[2][1]: addr:0x9bb215b	a5[2][2]: addr:0x9bb215c	a5[2][3]: addr:0x9bb215d	a5[2][4]: addr:0x9bb215e	</span>
<span class="line">a5[3][0]: addr:0x9bb215f	a5[3][1]: addr:0x9bb2160	a5[3][2]: addr:0x9bb2161	a5[3][3]: addr:0x9bb2162	a5[3][4]: addr:0x9bb2163	</span>
<span class="line">a5[4][0]: addr:0x9bb2164	a5[4][1]: addr:0x9bb2165	a5[4][2]: addr:0x9bb2166	a5[4][3]: addr:0x9bb2167	a5[4][4]: addr:0x9bb2168	</span>
<span class="line">a5[5][0]: addr:0x9bb2169	a5[5][1]: addr:0x9bb216a	a5[5][2]: addr:0x9bb216b	a5[5][3]: addr:0x9bb216c	a5[5][4]: addr:0x9bb216d</span>
</pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.cnblogs.com/bigshow/archive/2009/01/03/1367661.html" target="_blank" rel="noopener">二维数组的动态分配及参数传递</a> </li>
</ul>
]]></content>
      
        <categories>
            
            <category> C语言 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode-Number of 1 Bits]]></title>
      <url>https://craneyuan.github.io/2016/05/18/leetcode-number-of-1-bits/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><blockquote>
<p>Write a function that takes an unsigned integer and returns the number of ’1’ bits it has (also known as the Hamming weight).</p>
<p>For example, the 32-bit integer ’11’ has binary representation 00000000000000000000000000001011, so the function should return 3.</p>
</blockquote>
<h2 id="解说"><a href="#解说" class="headerlink" title="解说"></a>解说</h2><p>这道题的意思是统计32位无符号整数二进制格式下的‘1’的个数。</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="right-shift-counting"><a href="#right-shift-counting" class="headerlink" title="right-shift counting"></a>right-shift counting</h3><p>The simplest technique is right-shift the number 32 times, counting the number of times you right-shift a one bit off.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hammingWeight_A</span><span class="params">(<span class="keyword">uint32_t</span> num)</span> </span>&#123;</span>
<span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span>
<span class="line">    <span class="keyword">int</span> cur = num;</span>
<span class="line">    <span class="keyword">int</span> i;</span>
<span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span>
<span class="line">        ret += cur &amp; <span class="number">1</span>;</span>
<span class="line">        cur &gt;&gt;= <span class="number">1</span>;</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">return</span> ret;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>A similar alternative checks each bit of the number from right to left.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hammingWeight_B</span><span class="params">(<span class="keyword">uint32_t</span> num)</span> </span>&#123;</span>
<span class="line"> <span class="keyword">int</span> ret = <span class="number">0</span>;</span>
<span class="line">    <span class="keyword">int</span> mask = <span class="number">1</span>;</span>
<span class="line">    <span class="keyword">int</span> i;</span>
<span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span>
<span class="line">        <span class="keyword">if</span> ((num &amp; mask) != <span class="number">0</span>) ret++;</span>
<span class="line">        mask &lt;&lt;= <span class="number">1</span>;</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">return</span> ret;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="bit-manipulation-trick"><a href="#bit-manipulation-trick" class="headerlink" title="bit manipulation trick"></a>bit manipulation trick</h3><p>In my interview at Microsoft, I composed essentially <code>hammingWeight_B()</code>, which impressed the interviewer well enough. But then he showed me a different technique, which I have to admit is pretty clever. It begins with the observation that, when you subtract a number by 1, all of the lowest bits change up to and including the lowest 1 bit; but the rest of the bits stay the same. So if I do a bitwise AND of n with n − 1, essentially I will remove the last one bit from n.</p>
<p>Once we observe this, we have only to write code that counts how many times we can remove the final bit in this way before we reach a number with no 1 bits at all (i.e., 0).</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hammingWeight_C</span><span class="params">(<span class="keyword">uint32_t</span> num)</span> </span>&#123;</span>
<span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span>
<span class="line">    <span class="keyword">int</span> cur = num;</span>
<span class="line">    <span class="keyword">while</span> (cur != <span class="number">0</span>) &#123;</span>
<span class="line">        cur &amp;= cur - <span class="number">1</span>;</span>
<span class="line">        ret++;</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">return</span> ret;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="more-better-bit-trick"><a href="#more-better-bit-trick" class="headerlink" title="more better bit trick"></a>more better bit trick</h3><p>Much later, I heard of yet another technique, which is yet more clever.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hammingWeight_D</span><span class="params">(<span class="keyword">uint32_t</span> num)</span> </span>&#123;</span>
<span class="line">    <span class="keyword">int</span> ret;</span>
<span class="line">    ret = (num &amp; <span class="number">0x55555555</span>)</span>
<span class="line">        + ((num &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</span>
<span class="line">    ret = (ret &amp; <span class="number">0x33333333</span>)</span>
<span class="line">        + ((ret &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</span>
<span class="line">    ret = (ret &amp; <span class="number">0x0F0F0F0F</span>)</span>
<span class="line">        + ((ret &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F0F0F0F</span>);</span>
<span class="line">    ret = (ret &amp; <span class="number">0x00FF00FF</span>)</span>
<span class="line">        + ((ret &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0x00FF00FF</span>);</span>
<span class="line">    ret = (ret &amp; <span class="number">0x0000FFFF</span>)</span>
<span class="line">        + ((ret &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0x0000FFFF</span>);</span>
<span class="line">    <span class="keyword">return</span> ret;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p><code>hammingWeight_D()</code>主要是采用分治的思想，通过0x55555555（0x01010101010101010101010101010101），统计相邻两位的‘1’的个数，也就是<code>ret = (num &amp; 0x55555555) + ((num &gt;&gt; 1) &amp; 0x55555555);</code><br>通过0x33333333（0x00110011001100110011001100110011），统计相邻四位的‘1’的个数，也就是<code>ret = (ret &amp; 0x33333333) + ((ret &gt;&gt; 2) &amp; 0x33333333);</code> 后面的代码以此类推。</p>
<p>例子：</p>
<p>ret = 0x50005308（01010000000000000101001100001000）</p>
<table>
<thead>
<tr>
<th>二进制数</th>
<th>十六进制数</th>
<th>操作</th>
</tr>
</thead>
<tbody>
<tr>
<td>01010000000000000101001100001000</td>
<td>0x50005308</td>
<td>原数</td>
</tr>
<tr>
<td>01010000000000000101001000000100</td>
<td>0x50005204</td>
<td>第一次运算后</td>
</tr>
<tr>
<td>00100000000000000010001000000001</td>
<td>0x20002201</td>
<td>第二次运算后</td>
</tr>
<tr>
<td>00000010000000000000010000000001</td>
<td>0x2000401</td>
<td>第三次运算后</td>
</tr>
<tr>
<td>00000000000000100000000000000101</td>
<td>0x20005</td>
<td>第四次运算后</td>
</tr>
<tr>
<td>00000000000000000000000000000111</td>
<td>0x7</td>
<td>第五次运算后</td>
</tr>
</tbody>
</table>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://www.toves.org/books/bitops/#s3.3" target="_blank" rel="noopener">Using bit operators</a></li>
<li><a href="https://leetcode.com/articles/number-1-bits/" target="_blank" rel="noopener">LeetCode-Number of 1 Bits</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode-TwoSum]]></title>
      <url>https://craneyuan.github.io/2016/05/06/leetcode-twosum/</url>
      <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><blockquote>
<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.<br>You may assume that each input would have exactly one solution.<br>Example:<br>Given nums = [2, 7, 11, 15], target = 9,<br>Because nums[0] + nums[1] = 2 + 7 = 9,<br>return [0, 1].<br>UPDATE (2016/2/13):<br>The return format had been changed to zero-based indices. Please read the above updated description carefully. </p>
</blockquote>
<h2 id="解说"><a href="#解说" class="headerlink" title="解说"></a>解说</h2><p>这道题的大概意思就是在一个整数列表中找到两个数，使得它们之和等于给定的值，最后返回位置列表。</p>
<h2 id="Quick-Navigation快速导航"><a href="#Quick-Navigation快速导航" class="headerlink" title="Quick Navigation快速导航"></a>Quick Navigation快速导航</h2><ul>
<li><a href="#solution">Solution解决方法</a><ul>
<li><a href="#Approach1">Approach #1 (Brute Force暴力解法) [Accepted]</a></li>
<li><a href="#Approach2">Approach #2 (Two-pass Hash Table二路哈希表解法) [Accepted]</a></li>
<li><a href="#Approach3">Approach #3 (One-pass Hash Table一路哈希表解法) [Accepted]</a></li>
</ul>
</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a><span id="solution">Solution</span></h2><h3 id="Approach-1-Brute-Force-Accepted"><a href="#Approach-1-Brute-Force-Accepted" class="headerlink" title="Approach #1 (Brute Force) [Accepted]"></a><span id="Approach1">Approach #1 (Brute Force) [Accepted]</span></h3><p>The brute force approach is simple. Loop through each element xxx and find if there is another value that equals to target−xtarget - xtarget−x.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span>
<span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span>
<span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span>
<span class="line">            <span class="keyword">if</span> (nums[j] == target - nums[i]) &#123;</span>
<span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; i, j &#125;;</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="Complexity-Analysis"><a href="#Complexity-Analysis" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h4><pre><code>Time complexity : O(n2)O(n^2)O(n​2​​). For each element, we try to find its complement by looping through the rest of array which takes O(n)O(n)O(n) time. Therefore, the time complexity is O(n2)O(n^2)O(n​2​​).

Space complexity : O(1)O(1)O(1).
</code></pre><h3 id="Approach-2-Two-pass-Hash-Table-Accepted"><a href="#Approach-2-Two-pass-Hash-Table-Accepted" class="headerlink" title="Approach #2 (Two-pass Hash Table) [Accepted]"></a><span id="Approach2">Approach #2 (Two-pass Hash Table) [Accepted]</span></h3><p>To improve our run time complexity, we need a more efficient way to check if the complement exists in the array. If the complement exists, we need to look up its index. What is the best way to maintain a mapping of each element in the array to its index? A hash table.</p>
<p>We reduce the look up time from O(n)O(n)O(n) to O(1)O(1)O(1) by trading space for speed. A hash table is built exactly for this purpose, it supports fast look up in near constant time. I say “near” because if a collision occurred, a look up could degenerate to O(n)O(n)O(n) time. But look up in hash table should be amortized O(1)O(1)O(1) time as long as the hash function was chosen carefully.</p>
<p>A simple implementation uses two iterations. In the first iteration, we add each element’s value and its index to the table. Then, in the second iteration we check if each element’s complement (target−nums[i]target - nums[i]target−nums[i]) exists in the table. Beware that the complement must not be nums[i]nums[i]nums[i] itself!</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span>
<span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span>
<span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span>
<span class="line">        map.put(nums[i], i);</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span>
<span class="line">        <span class="keyword">int</span> complement = target - nums[i];</span>
<span class="line">        <span class="keyword">if</span> (map.containsKey(complement) &amp;&amp; map.get(complement) != i) &#123;</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; i, map.get(complement) &#125;;</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="Complexity-Analysis-1"><a href="#Complexity-Analysis-1" class="headerlink" title="Complexity Analysis:"></a>Complexity Analysis:</h4><pre><code>Time complexity : O(n)O(n)O(n). We traverse the list containing nnn elements exactly twice. Since the hash table reduces the look up time to O(1)O(1)O(1), the time complexity is O(n)O(n)O(n).

Space complexity : O(n)O(n)O(n). The extra space required depends on the number of items stored in the hash table, which stores exactly nnn elements.
</code></pre><h3 id="Approach-3-One-pass-Hash-Table-Accepted"><a href="#Approach-3-One-pass-Hash-Table-Accepted" class="headerlink" title="Approach #3 (One-pass Hash Table) [Accepted]"></a><span id="Approach3">Approach #3 (One-pass Hash Table) [Accepted]</span></h3><p>It turns out we can do it in one-pass. While we iterate and inserting elements into the table, we also look back to check if current element’s complement already exists in the table. If it exists, we have found a solution and return immediately.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span>
<span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span>
<span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span>
<span class="line">        <span class="keyword">int</span> complement = target - nums[i];</span>
<span class="line">        <span class="keyword">if</span> (map.containsKey(complement)) &#123;</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; map.get(complement), i &#125;;</span>
<span class="line">        &#125;</span>
<span class="line">        map.put(nums[i], i);</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="Complexity-Analysis-2"><a href="#Complexity-Analysis-2" class="headerlink" title="Complexity Analysis:"></a>Complexity Analysis:</h4><pre><code>Time complexity : O(n)O(n)O(n). We traverse the list containing nnn elements only once. Each look up in the table costs only O(1)O(1)O(1) time.

Space complexity : O(n)O(n)O(n). The extra space required depends on the number of items stored in the hash table, which stores at most nnn elements.
</code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="noopener">LeetCode-TwoSum</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言单元测试框架Check]]></title>
      <url>https://craneyuan.github.io/2016/04/10/the-frame-of-c-test/</url>
      <content type="html"><![CDATA[<h2 id="什么是Check"><a href="#什么是Check" class="headerlink" title="什么是Check"></a>什么是Check</h2><p><a href="http://libcheck.github.io/check/" target="_blank" rel="noopener">Check</a>是C语言的一个单元测试框架。它提供一个小巧的单元测试接口。测试案例运行在各自独立的地址空间，所以断言失败和代码错误造成的段错误或者其他的信号可以被捕捉到。另外，测试的结果显示也兼容以下这些格式：Subunit、TAP、XML和通用的日志格式。</p>
<blockquote>
<p>Check is a unit testing framework for C. It features a simple interface for defining unit tests, putting little in the way of the developer. Tests are run in a separate address space, so both assertion failures and code errors that cause segmentation faults or other signals can be caught. Test results are reportable in the following: Subunit, TAP, XML, and a generic logging format.</p>
</blockquote>
<h2 id="Check支持的平台"><a href="#Check支持的平台" class="headerlink" title="Check支持的平台"></a>Check支持的平台</h2><p>Check支持大部分的UNIX兼容平台。</p>
<p>可以通过以下命令得到Check的最新版本。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/libcheck/check.git</span>
</pre></td></tr></table></figure>
<h2 id="Check使用"><a href="#Check使用" class="headerlink" title="Check使用"></a>Check使用</h2><p>本人以一个只做减法的工程来进行说明Check的使用。</p>
<p>直接看工程目录结构：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line">.</span>
<span class="line">├── include</span>
<span class="line">│   ├── sub.h</span>
<span class="line">│   └── unit_test.h</span>
<span class="line">├── makefile</span>
<span class="line">├── sub</span>
<span class="line">│   └── sub.c</span>
<span class="line">└── unit_test</span>
<span class="line">    ├── test_main.c</span>
<span class="line">    └── test_sub.c</span>
</pre></td></tr></table></figure>
<h3 id="sub-c文件"><a href="#sub-c文件" class="headerlink" title="sub.c文件"></a>sub.c文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">#include "sub.h"</span></span>
<span class="line"></span>
<span class="line">int sub(int a, int b) &#123;</span>
<span class="line">    <span class="built_in">return</span> 0;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="sub-h文件"><a href="#sub-h文件" class="headerlink" title="sub.h文件"></a>sub.h文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">#ifndef _SUB_H</span></span>
<span class="line"><span class="comment">#define _SUB_H</span></span>
<span class="line">int sub(int a, int b);</span>
<span class="line"><span class="comment">#endif</span></span>
</pre></td></tr></table></figure>
<h3 id="unit-test-h文件"><a href="#unit-test-h文件" class="headerlink" title="unit_test.h文件"></a>unit_test.h文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">#ifndef _UNI_TEST_H</span></span>
<span class="line"><span class="comment">#define _UNI_TEST_H</span></span>
<span class="line"><span class="comment">#include "check.h"</span></span>
<span class="line">Suite *make_sub_suite(void);</span>
<span class="line"><span class="comment">#endif</span></span>
</pre></td></tr></table></figure>
<h3 id="test-sub-c文件"><a href="#test-sub-c文件" class="headerlink" title="test_sub.c文件"></a>test_sub.c文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">#include "check.h"</span></span>
<span class="line"><span class="comment">#include "unit_test.h"</span></span>
<span class="line"><span class="comment">#include "sub.h"</span></span>
<span class="line">START_TEST(test_sub) &#123;</span>
<span class="line">    fail_unless(sub(6, 2) == 4, <span class="string">"error, 6 - 2 != 4"</span>); </span>
<span class="line">&#125;</span>
<span class="line">END_TEST</span>
<span class="line"></span>
<span class="line">Suite * make_sub_suite(void) &#123;</span>
<span class="line">    Suite *s = suite_create(<span class="string">"sub"</span>);       // 建立Suite</span>
<span class="line">    TCase *tc_sub = tcase_create(<span class="string">"sub"</span>);  // 建立测试用例集</span>
<span class="line">    suite_add_tcase(s, tc_sub);           // 将测试用例加到Suite中</span>
<span class="line">    tcase_add_test(tc_sub, test_sub);     // 测试用例加到测试集中</span>
<span class="line">    <span class="built_in">return</span> s;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="test-main-c文件"><a href="#test-main-c文件" class="headerlink" title="test_main.c文件"></a>test_main.c文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">#include "unit_test.h"</span></span>
<span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span>
<span class="line"></span>
<span class="line">int main(void) &#123;</span>
<span class="line">    int n, n1;</span>
<span class="line">    SRunner *sr, *sr1;</span>
<span class="line">    sr = srunner_create(make_sub_suite()); // 将Suite加入到SRunner</span>
<span class="line">    srunner_run_all(sr, CK_NORMAL);</span>
<span class="line">    n = srunner_ntests_failed(sr);         // 运行所有测试用例</span>
<span class="line">    srunner_free(sr);</span>
<span class="line">    <span class="built_in">return</span> (n == 0) ? EXIT_SUCCESS : EXIT_FAILURE;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="makefile文件"><a href="#makefile文件" class="headerlink" title="makefile文件"></a>makefile文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
</pre></td><td class="code"><pre><span class="line">vpath %.h include  <span class="comment">#vpath 指定搜索路径</span></span>
<span class="line">vpath %.c sub add</span>
<span class="line">vpath %.c unit_test</span>
<span class="line"></span>
<span class="line">objects = sub.o test_sub.o</span>
<span class="line"><span class="built_in">test</span>: test_main.c $(objects)</span>
<span class="line">	gcc -I include $^ -o <span class="built_in">test</span> -lcheck </span>
<span class="line"></span>
<span class="line">all: $(objects)</span>
<span class="line">$(objects): %.o: %.c</span>
<span class="line">	gcc -c -I include $&lt; -o <span class="variable">$@</span></span>
<span class="line"></span>
<span class="line">.PHONY: clean</span>
<span class="line">clean:</span>
<span class="line">	rm *.o <span class="built_in">test</span></span>
</pre></td></tr></table></figure>
<p>工程配置完成后，直接在工程目录下运行命令<code>make test</code>即可生成可执行文件test</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">gcc -c -I include sub/sub.c -o sub.o</span>
<span class="line">gcc -c -I include unit_test/test_sub.c -o test_sub.o</span>
<span class="line">gcc -I include unit_test/test_main.c sub.o test_sub.o -o <span class="built_in">test</span> -lcheck</span>
</pre></td></tr></table></figure>
<p>之后运行<code>./test</code>就可以看到测试结果了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">Running suite(s): sub</span>
<span class="line">0%: Checks: 1, Failures: 1, Errors: 0</span>
<span class="line">unit_test/test_sub.c:12:F:sub:test_sub:0: error, 6 - 2 != 4</span>
</pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://blog.csdn.net/ZCF1002797280/article/details/50421336" target="_blank" rel="noopener">Check—强大的C语言单元测试框架</a> </li>
<li><a href="http://libcheck.github.io/check/doc/check_html/check_3.html" target="_blank" rel="noopener">Tutorial: Basic Unit Testing</a> </li>
</ul>
]]></content>
      
        <categories>
            
            <category> C语言 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[常见License辨析]]></title>
      <url>https://craneyuan.github.io/2016/04/05/introduction-of-general-license/</url>
      <content type="html"><![CDATA[<p>什么也不说，上图<br><img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1521873546/blog/qn1dxwagc0hdmhhrsqwr.jpg" alt="常见License"></p>
]]></content>
      
        <categories>
            
            <category> 杂项 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Autotools使用介绍]]></title>
      <url>https://craneyuan.github.io/2016/04/04/how-to-use-autotools/</url>
      <content type="html"><![CDATA[<h2 id="autotools系列工具—-自动生成Makefile"><a href="#autotools系列工具—-自动生成Makefile" class="headerlink" title="autotools系列工具—-自动生成Makefile"></a>autotools系列工具—-自动生成Makefile</h2><p>在较大项目中, 如果手动维护Makefile, 那将是一件复杂并痛苦的事情. 那么, 有没有一种轻松的手段生成Makefile呢? autotools系列工具正是在这样的呼声中诞生的. 它只需用户输入简单的目标文件, 依赖文件, 文件目录等就可以轻松地生成Makefile了. 另外, 这些工具还可以完成系统配置信息的收集, 从而可以方便地处理各种移植性问题. autotools是系列工具, 它含有:</p>
<ul>
<li>autoscan</li>
<li>aclocal</li>
<li>autoconf</li>
<li>autoheader</li>
<li>automake</li>
</ul>
<h2 id="autotools-使用流程"><a href="#autotools-使用流程" class="headerlink" title="autotools 使用流程"></a>autotools 使用流程</h2><p>下面用一个简单的hello.c程序, 演示autotools的使用流程. hello.c如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line">username@pc:~/automake$ ls</span>
<span class="line">hello.c</span>
<span class="line">username@pc:~/automake$ cat hello.c</span>
<span class="line"><span class="comment">#include </span></span>
<span class="line">int main()</span>
<span class="line">&#123;</span>
<span class="line">  <span class="built_in">printf</span>(<span class="string">"Hello, autotools!\n"</span>);</span>
<span class="line">  <span class="built_in">return</span> 0;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="使用autoscan命令自动生成configure-scan文件"><a href="#使用autoscan命令自动生成configure-scan文件" class="headerlink" title="使用autoscan命令自动生成configure.scan文件"></a>使用autoscan命令自动生成configure.scan文件</h3><p>它会在给定目录及其子目录树中检查源文件, 若没有给出目录, 就在当前目录及其子目录树中进行检查.它会搜索源文件以寻找一般的移植性问题并创建一个文件”configure.scan”, 该文件就是接下来autoconf要用到的”configure.ac”原型.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">username@pc:~/automake$ autoscan</span>
<span class="line">username@pc:~/automake$ ls</span>
<span class="line">autoscan.log  configure.scan  hello.c</span>
</pre></td></tr></table></figure>
<h3 id="将configure-scan重命名为configure-in"><a href="#将configure-scan重命名为configure-in" class="headerlink" title="将configure.scan重命名为configure.in"></a>将configure.scan重命名为configure.in</h3><p>并做适当修改 configure.scan的内容:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
</pre></td><td class="code"><pre><span class="line">username@pc:~/automake$ cat configure.scan</span>
<span class="line"><span class="comment">#                                               -*- Autoconf -*-</span></span>
<span class="line"><span class="comment"># Process this file with autoconf to produce a configure script.</span></span>
<span class="line"></span>
<span class="line">AC_PREREQ([2.65])</span>
<span class="line">AC_INIT([FULL-PACKAGE-NAME], [VERSION], [BUG-REPORT-ADDRESS])</span>
<span class="line">AC_CONFIG_SRCDIR([hello.c])</span>
<span class="line">AC_CONFIG_HEADERS([config.h])</span>
<span class="line"></span>
<span class="line"><span class="comment"># Checks for programs.</span></span>
<span class="line">AC_PROG_CC</span>
<span class="line"></span>
<span class="line"><span class="comment"># Checks for libraries.</span></span>
<span class="line"></span>
<span class="line"><span class="comment"># Checks for header files.</span></span>
<span class="line"></span>
<span class="line"><span class="comment"># Checks for typedefs, structures, and compiler characteristics.</span></span>
<span class="line"></span>
<span class="line"><span class="comment"># Checks for library functions.</span></span>
<span class="line"></span>
<span class="line">AC_OUTPUT</span>
</pre></td></tr></table></figure>
<p>将configure.scan重命名为configure.ac</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">username@pc:~/automake$ mv configure.scan configure.in</span>
</pre></td></tr></table></figure>
<p>根据具体情况, 适当修改, 以下加粗部分是修改的内容:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
</pre></td><td class="code"><pre><span class="line">username@pc:~/automake$ cat configure.in</span>
<span class="line"><span class="comment">#                                               -*- Autoconf -*-</span></span>
<span class="line"><span class="comment"># Process this file with autoconf to produce a configure script.</span></span>
<span class="line"></span>
<span class="line">AC_PREREQ([2.65])</span>
<span class="line"><span class="comment">#AC_INIT([FULL-PACKAGE-NAME], [VERSION], [BUG-REPORT-ADDRESS]) </span></span>
<span class="line">AC_INIT(hello,1.0)</span>
<span class="line">AC_CONFIG_SRCDIR([hello.c])</span>
<span class="line">AC_CONFIG_HEADERS([config.h])</span>
<span class="line">AM_INIT_AUTOMAKE</span>
<span class="line"></span>
<span class="line"><span class="comment"># Checks for programs.</span></span>
<span class="line">AC_PROG_CC</span>
<span class="line"></span>
<span class="line"><span class="comment"># Checks for libraries.</span></span>
<span class="line"></span>
<span class="line"><span class="comment"># Checks for header files.</span></span>
<span class="line"></span>
<span class="line"><span class="comment"># Checks for typedefs, structures, and compiler characteristics.</span></span>
<span class="line"></span>
<span class="line"><span class="comment"># Checks for library functions.</span></span>
<span class="line">AC_CONFIG_FILES([Makefile])</span>
<span class="line">AC_OUTPUT</span>
</pre></td></tr></table></figure>
<p>说明:</p>
<ul>
<li>以”#”号开始的行为注释</li>
<li>AC_PREREQ宏声明本文要求的autoconf版本, 如本例中的版本 2.65</li>
<li>AC_INIT宏用来定义软件的名称和版本等信息, 在本例中省略了BUG-REPROT-ADDRESS, 一般为作者的E-mail</li>
<li>AM_INIT_AUTOMAKE是手动添加的, 它是automake所必备的宏, 也同前面一样, PACKAGE是所要产生软件套件的名称,VERSION是版本编号.</li>
<li>AC_CONFIG_SCRDIR宏用来侦测所指定的源码文件是否存在, 来确定源码目录的有效性. 在此处指当前目录下hello.c</li>
<li>AC_CONFIG_FILES宏用于生成相应的Makefile文件.</li>
</ul>
<h3 id="运行aclocal命令-生成”aclocal-m4”文件"><a href="#运行aclocal命令-生成”aclocal-m4”文件" class="headerlink" title="运行aclocal命令,生成”aclocal.m4”文件"></a>运行aclocal命令,生成”aclocal.m4”文件</h3><p>该文件主要处理本地的宏定义</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">username@pc:~/automake$ aclocal</span>
<span class="line">username@pc:~/automake$ ls</span>
<span class="line">aclocal.m4 autom4te.cache  autoscan.log  configure.in  hello.c</span>
</pre></td></tr></table></figure>
<h3 id="运行autoconf命令生成configure可执行文件"><a href="#运行autoconf命令生成configure可执行文件" class="headerlink" title="运行autoconf命令生成configure可执行文件"></a>运行autoconf命令生成configure可执行文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">username@pc:~/automake$ autoconf</span>
<span class="line">username@pc:~/automake$ ls</span>
<span class="line">aclocal.m4 autom4te.cache  autoscan.log  configure  configure.in  hello.c</span>
</pre></td></tr></table></figure>
<h3 id="运行autoheader命令-生成config-h-in文件"><a href="#运行autoheader命令-生成config-h-in文件" class="headerlink" title="运行autoheader命令, 生成config.h.in文件."></a>运行autoheader命令, 生成config.h.in文件.</h3><p>该工具通常会从”acconfig.h”文件中复制用户附加的符号定义. 本例中没有附加的符号定义, 所以不需要创建”acconfig.h”文件.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">username@pc:~/automake$ autoheader</span>
<span class="line">username@pc:~/automake$ ls</span>
<span class="line">aclocal.m4 autom4te.cache  autoscan.log  config.h.in  configure  configure.in  hello.c</span>
</pre></td></tr></table></figure>
<h3 id="运行automake命令-生成Makefile-in文件"><a href="#运行automake命令-生成Makefile-in文件" class="headerlink" title="运行automake命令, 生成Makefile.in文件"></a>运行automake命令, 生成Makefile.in文件</h3><p>这一步是创建Makefile很重要的一步, automake要用的脚本配置文件是Makefile.am, 用户需要自己创建相应的文件. 之后, automake工具将自动转换成Makefile.in 本例中, 创建的文件为Makefile.am, 内容如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">username@pc:~/automake$ cat Makefile.am</span>
<span class="line">AUTOMAKE_OPTIONS=foreign</span>
<span class="line">bin_PROGRAMS=hello</span>
<span class="line">hello_SOURCES=hello.c</span>
</pre></td></tr></table></figure>
<p>说明:</p>
<ul>
<li>其中的AUTOMAKE_OPTIONS为设置automake的选项. 由于GNU对自己发布的软件有严格的规范, 比如必须附带许可证声明文件COPYING等, 否则automake执行时会报错. automake提供了3中软件等级:foreign, gnu和gnits, 供用户选择. 默认级别是gnu. 在本例中, 使用了foreign等级, 它只检测必须的文件.</li>
<li>bin_PROGRAMS定义要产生的执行文件名. 如果要产生多个执行文件, 每个文件名用空格隔开</li>
<li>hello_SOURCES 定义”hello”这个可执行程序所需的原始文件. 如果”hello”这个程序是由多个源文件所产生的, 则必须把它所用到的所有源文件都列出来, 并用空格隔开. 如果要定义多个可执行程序, 那么需要对每个可执行程序建立对应的file_SOURCES.</li>
</ul>
<p>在这里使用”–add-missiing”选项可以让automake自动添加一些必须的脚本文件.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line">username@pc:~/automake$ automake --add-missing</span>
<span class="line">configure.in:7: installing `./install-sh<span class="string">'</span></span>
<span class="line"><span class="string">configure.in:7: installing `./missing'</span></span>
<span class="line">Makefile.am: installing `./depcomp<span class="string">'</span></span>
<span class="line"><span class="string">username@pc:~/automake$ ls</span></span>
<span class="line"><span class="string">aclocal.m4      autoscan.log  configure     depcomp  install-sh   Makefile.in</span></span>
<span class="line"><span class="string">autom4te.cache  config.h.in   configure.in  hello.c  Makefile.am  missing</span></span>
</pre></td></tr></table></figure>
<h3 id="运行configure-生成Makfefile文件"><a href="#运行configure-生成Makfefile文件" class="headerlink" title="运行configure, 生成Makfefile文件"></a>运行configure, 生成Makfefile文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
</pre></td><td class="code"><pre><span class="line">username@pc:~/automake$ ./configure</span>
<span class="line">checking <span class="keyword">for</span> a BSD-compatible install... /usr/bin/install -c</span>
<span class="line">checking whether build environment is sane... yes</span>
<span class="line">checking <span class="keyword">for</span> a thread-safe mkdir -p... /bin/mkdir -p</span>
<span class="line">checking <span class="keyword">for</span> gawk... gawk</span>
<span class="line">checking whether make sets $(MAKE)... yes</span>
<span class="line">checking <span class="keyword">for</span> gcc... gcc</span>
<span class="line">checking whether the C compiler works... yes</span>
<span class="line">checking <span class="keyword">for</span> C compiler default output file name... a.out</span>
<span class="line">checking <span class="keyword">for</span> suffix of executables...</span>
<span class="line">checking whether we are cross compiling... no</span>
<span class="line">checking <span class="keyword">for</span> suffix of object files... o</span>
<span class="line">checking whether we are using the GNU C compiler... yes</span>
<span class="line">checking whether gcc accepts -g... yes</span>
<span class="line">checking <span class="keyword">for</span> gcc option to accept ISO C89... none needed</span>
<span class="line">checking <span class="keyword">for</span> style of include used by make... GNU</span>
<span class="line">checking dependency style of gcc... gcc3</span>
<span class="line">configure: creating ./config.status</span>
<span class="line">config.status: creating Makefile</span>
<span class="line">config.status: creating config.h</span>
<span class="line">config.status: executing depfiles commands</span>
<span class="line">username@pc:~/automake$ ls</span>
<span class="line">aclocal.m4      config.h     config.status  depcomp     Makefile     missing</span>
<span class="line">autom4te.cache  config.h.in  configure      hello.c     Makefile.am  stamp-h1</span>
<span class="line">autoscan.log    config.log   configure.in   install-sh  Makefile.in</span>
</pre></td></tr></table></figure>
<p>autotools生成Makefile流程图如下: </p>
<p><img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1521873647/blog/hvzguvk6qem6og4xx2hh.jpg" alt="autotools生成的Makefile流程图"><br><img src="https://res.cloudinary.com/dvspi0fq0/image/upload/v1521873670/blog/nn3gprh9plvypg7yijkd.jpg" alt="autotools生成Makefile的流程图"></p>
<h2 id="使用由autotools生成的Makefile"><a href="#使用由autotools生成的Makefile" class="headerlink" title="使用由autotools生成的Makefile"></a>使用由autotools生成的Makefile</h2><p>autotools生成的Makefile具有以下主要功能: </p>
<h3 id="make-编译源程序"><a href="#make-编译源程序" class="headerlink" title="make 编译源程序"></a>make 编译源程序</h3><p>键入make, 默认执行”make all”命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line">username@pc:~/automake$ make</span>
<span class="line">make  all-am</span>
<span class="line">make[1]: Entering directory <span class="string">'/home/username/automake'</span></span>
<span class="line">gcc -DHAVE_CONFIG_H -I.     -g -O2 -MT hello.o -MD -MP -MF .deps/hello.Tpo -c -o hello.o hello.c</span>
<span class="line">mv -f .deps/hello.Tpo .deps/hello.Po</span>
<span class="line">gcc  -g -O2   -o hello hello.o</span>
<span class="line">make[1]: Leaving directory `/home/username/automake<span class="string">'</span></span>
</pre></td></tr></table></figure>
<p>此时在本目录下就生成了可执行文件”hello”, 运行”./hello”就能看到程序的执行结果:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">username@pc:~/automake$ ./hello</span>
<span class="line">Hello, autotools!</span>
</pre></td></tr></table></figure>
<h3 id="make-install-执行该命令"><a href="#make-install-执行该命令" class="headerlink" title="make install 执行该命令"></a>make install 执行该命令</h3><p>可以把程序安装到系统目录中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">username@pc:~/automake$ sudo make install</span>
</pre></td></tr></table></figure>
<p>此时, 直接在console输入hello, 就可以看到程序的运行结果 </p>
<h3 id="make-clean"><a href="#make-clean" class="headerlink" title="make clean"></a>make clean</h3><p>清除之前所编译的可执行文件及目标文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">username@pc:~/automake$ make clean</span>
<span class="line"><span class="built_in">test</span> -z <span class="string">"hello"</span> || rm -f hello</span>
<span class="line">rm -f *.o</span>
</pre></td></tr></table></figure>
<h3 id="make-dist"><a href="#make-dist" class="headerlink" title="make dist"></a>make dist</h3><p>将程序和相关的文档打包为一个压缩文档以供发布</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">username@pc:~/automake$ make dist</span>
<span class="line">username@pc:~/automake$ ls -l hello-1.0.tar.gz</span>
<span class="line">hello-1.0.tar.gz</span>
</pre></td></tr></table></figure>
<p>可见该命令生成了一个hello-1.0.tar.gz的压缩文档.</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.worldhello.net/2010/04/07/954.html" target="_blank" rel="noopener">autotools系列工具–自动生成Makefile</a></li>
<li><a href="https://www.lrde.epita.fr/~adl/dl/autotools.pdf" target="_blank" rel="noopener">autotools官方教程文档</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[位图排序的简单实现]]></title>
      <url>https://craneyuan.github.io/2016/03/30/realization-of-bitmap-sort/</url>
      <content type="html"><![CDATA[<h2 id="位图排序简介"><a href="#位图排序简介" class="headerlink" title="位图排序简介"></a>位图排序简介</h2><p>位图排序的直接思路是想通过有限位数（比如1位）去映射一个整数，从而节省存储空间，而间接带来的好处是给指定数据集合排序了。</p>
<h2 id="实际案例介绍"><a href="#实际案例介绍" class="headerlink" title="实际案例介绍"></a>实际案例介绍</h2><p>本案例摘抄自《编程珠玑》一书。</p>
<p>输入：</p>
<blockquote>
<p>所输入的是一个文件，至多包含n个正整数，每个正整数都要小于n，这里n=10^7。如果输入时某一个整数出现了两次，就会产生一个致命的错误。这些整数与其他任何数据都不关联。</p>
</blockquote>
<p>输出：</p>
<blockquote>
<p>以非递减形式输出经过排序的整数列表。</p>
</blockquote>
<p>约束：</p>
<blockquote>
<p>至多（大概）只要1MB的可用主存；但是可用磁盘空间非常充足。运行时间至多只允许几分钟；10分钟是最适宜的运行时间。</p>
</blockquote>
<h2 id="代码实现如下"><a href="#代码实现如下" class="headerlink" title="代码实现如下"></a>代码实现如下</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
<span class="line">72</span>
<span class="line">73</span>
<span class="line">74</span>
<span class="line">75</span>
<span class="line">76</span>
<span class="line">77</span>
<span class="line">78</span>
<span class="line">79</span>
<span class="line">80</span>
<span class="line">81</span>
<span class="line">82</span>
<span class="line">83</span>
<span class="line">84</span>
<span class="line">85</span>
<span class="line">86</span>
<span class="line">87</span>
<span class="line">88</span>
<span class="line">89</span>
<span class="line">90</span>
<span class="line">91</span>
<span class="line">92</span>
<span class="line">93</span>
<span class="line">94</span>
<span class="line">95</span>
<span class="line">96</span>
<span class="line">97</span>
<span class="line">98</span>
<span class="line">99</span>
<span class="line">100</span>
<span class="line">101</span>
<span class="line">102</span>
<span class="line">103</span>
<span class="line">104</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="meta">#<span class="meta-keyword">define</span> BITSPERWORD     32</span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">define</span> SHIFT           5</span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">define</span> MASK            0x1F</span></span>
<span class="line"><span class="meta">#<span class="meta-keyword">define</span> N               10000000</span></span>
<span class="line"></span>
<span class="line"><span class="keyword">int</span> a[<span class="number">1</span> + N/BITSPERWORD];    </span>
<span class="line"><span class="keyword">int</span> x[N];</span>
<span class="line"></span>
<span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span>
<span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clr</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span>
<span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span>
<span class="line"><span class="function"><span class="keyword">int</span> <span class="title">randint</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> u)</span></span>;</span>
<span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span></span>;</span>
<span class="line"><span class="function"><span class="keyword">void</span> <span class="title">generate_rand_num</span><span class="params">()</span></span>;</span>
<span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bitmap_sort</span><span class="params">()</span></span>;</span>
<span class="line"></span>
<span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span>
<span class="line"><span class="function"></span>&#123;</span>
<span class="line">    bitmap_sort();</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> i)</span></span></span>
<span class="line"><span class="function"></span>&#123;</span>
<span class="line">    a[i&gt;&gt;SHIFT] |= (<span class="number">1</span>&lt;&lt;(i &amp; MASK));</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clr</span><span class="params">(<span class="keyword">int</span> i)</span></span></span>
<span class="line"><span class="function"></span>&#123;</span>
<span class="line">    a[i&gt;&gt;SHIFT] &amp;= ~(<span class="number">1</span>&lt;&lt;(i &amp; MASK));</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> i)</span></span></span>
<span class="line"><span class="function"></span>&#123;</span>
<span class="line">    <span class="keyword">return</span> a[i&gt;&gt;SHIFT] &amp; (<span class="number">1</span>&lt;&lt;(i &amp; MASK));</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="function"><span class="keyword">int</span> <span class="title">randint</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> u)</span></span></span>
<span class="line"><span class="function"></span>&#123;</span>
<span class="line">    <span class="keyword">int</span> temp;</span>
<span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span>
<span class="line">    temp = <span class="built_in">floor</span>(<span class="number">1</span> + (<span class="number">1.0</span>*rand()/RAND_MAX)*(u - l + <span class="number">1</span>));</span>
<span class="line">    <span class="keyword">return</span> temp;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span></span></span>
<span class="line"><span class="function"></span>&#123;</span>
<span class="line">    <span class="keyword">int</span> temp;</span>
<span class="line">    temp = *a;</span>
<span class="line">    *a = *b;</span>
<span class="line">    *b = temp;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="comment">/*</span></span>
<span class="line"><span class="comment"> * 生成1～N之间的随机数</span></span>
<span class="line"><span class="comment"> */</span></span>
<span class="line"><span class="function"><span class="keyword">void</span> <span class="title">generate_rand_num</span><span class="params">()</span></span></span>
<span class="line"><span class="function"></span>&#123;</span>
<span class="line">    FILE *fp;</span>
<span class="line">    <span class="keyword">int</span> k = N;</span>
<span class="line">    <span class="keyword">int</span> i;</span>
<span class="line">    fp = fopen(<span class="string">"in.txt"</span>, <span class="string">"w"</span>);</span>
<span class="line"></span>
<span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)&#123;</span>
<span class="line">        x[i] = i + <span class="number">1</span>;</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; k; i++)&#123;</span>
<span class="line">        swap(&amp;x[i], &amp;x[randint(i, N<span class="number">-1</span>)]);</span>
<span class="line">        <span class="built_in">fprintf</span>(fp,<span class="string">"%d\n"</span>,x[i]);</span>
<span class="line">    &#125;</span>
<span class="line">    fclose(fp);</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="comment">/*</span></span>
<span class="line"><span class="comment"> * 位图排序</span></span>
<span class="line"><span class="comment"> */</span></span>
<span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bitmap_sort</span><span class="params">()</span></span></span>
<span class="line"><span class="function"></span>&#123;</span>
<span class="line">    <span class="keyword">int</span> i;</span>
<span class="line">    FILE *in, *out;</span>
<span class="line">    <span class="keyword">int</span> num;</span>
<span class="line">    in = fopen(<span class="string">"in.txt"</span>, <span class="string">"r"</span>); </span>
<span class="line">    out = fopen(<span class="string">"out.txt"</span>, <span class="string">"w"</span>);</span>
<span class="line"></span>
<span class="line">    generate_rand_num();</span>
<span class="line"></span>
<span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; N; i++)&#123;</span>
<span class="line">        clr(i);</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">while</span>(<span class="built_in">fscanf</span>(in, <span class="string">"%d"</span>, &amp;num) != EOF)&#123;</span>
<span class="line">        <span class="built_in">set</span>(num);</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; N; i++)&#123;</span>
<span class="line">        <span class="keyword">if</span>(test(i))&#123;</span>
<span class="line">            <span class="built_in">fprintf</span>(out, <span class="string">"%d\n"</span>, i);</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">    fclose(in);</span>
<span class="line">    fclose(out);</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sort </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo优化（5）：添加网站访问统计]]></title>
      <url>https://craneyuan.github.io/2016/03/25/hexo-05-add-site-statistics/</url>
      <content type="html"><![CDATA[<p>本文主要说明<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子</a>访问统计在Landscape-plus主题下的应用，理论上下面的方法同样适用于Landscape主题。<br>关于light主题下不蒜子的应用可以参考：<a href="http://jackroyal.github.io/2015/05/30/hexo-setting-with-comments-and-visitors/" target="_blank" rel="noopener">给hexo配置上评论和访问量</a></p>
<h2 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h2><p>这是使用不蒜子的前提，即要使用它必须先添加它的脚本。<br>打开themes\landscape-plus\layout_partial\after-footer.ejs,在最后添加上下面的脚本即可，当然你也可以添加到 header.ejs 或 footer.ejs 中。目前最新版本2.3。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">&lt;script async src=<span class="string">"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;&lt;/script&gt;</span>
</pre></td></tr></table></figure>
<h2 id="网站访问量统计"><a href="#网站访问量统计" class="headerlink" title="网站访问量统计"></a>网站访问量统计</h2><p>打开themes/landscape-plus/layout/_partial/footer.ejs，在需要的地方添加下面的代码，可以选择添加任意一种代码或同时添加两种代码。<br>算法a：pv的方式，单个用户连续点击n篇文章，记录n次访问量。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">&lt;span id=<span class="string">"busuanzi_container_site_pv"</span>&gt;</span>
<span class="line">    本站总访问量&lt;span id=<span class="string">"busuanzi_value_site_pv"</span>&gt;&lt;/span&gt;次</span>
<span class="line">&lt;/span&gt;</span>
</pre></td></tr></table></figure>
<p>算法b：uv的方式，单个用户连续点击n篇文章，只记录1次访客数。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">&lt;span id=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span>
<span class="line">  本站访客数&lt;span id=<span class="string">"busuanzi_value_site_uv"</span>&gt;&lt;/span&gt;人次</span>
<span class="line">&lt;/span&gt;</span>
</pre></td></tr></table></figure>
<p>本站是在Theme by <a href="https://github.com/xiangming/landscape-plus" target="_blank">Landscape-plus</a>语句后面添加下面的代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">&lt;!-- 不蒜统计 --&gt;</span>
<span class="line">&lt;br&gt;</span>
<span class="line">&lt;span style=<span class="string">"display: inline;"</span> id=<span class="string">"busuanzi_container_site_uv"</span>&gt;本站总访客数 &lt;span id=<span class="string">"busuanzi_value_site_uv"</span> font=<span class="string">"微软雅黑"</span> style=<span class="string">"color:white"</span>&gt;&lt;/span&gt; 次&lt;/span&gt;</span>
<span class="line">&lt;span style=<span class="string">"display: inline;"</span> id=<span class="string">"busuanzi_container_site_pv"</span>&gt;本站总访问量 &lt;span id=<span class="string">"busuanzi_value_site_pv"</span> font=<span class="string">"微软雅黑"</span> style=<span class="string">"color:white"</span>&gt;&lt;/span&gt; 次&lt;/span&gt;</span>
</pre></td></tr></table></figure>
<h2 id="文章访问量和评论数统计"><a href="#文章访问量和评论数统计" class="headerlink" title="文章访问量和评论数统计"></a>文章访问量和评论数统计</h2><p>不蒜子之所以称为极客的算子，正是因为不蒜子自身只提供标签+数字，至于显示的style和css动画效果，任你发挥。</p>
<p>busuanzi_value_site_pv 的作用是异步回填访问数，这个id一定要正确。<br>busuanzi_container_site_pv的作用是为防止计数服务访问出错或超时（3秒）的情况下，使整个标签自动隐藏显示，带来更好的体验。这个id可以省略。</p>
<p>因此，你也可以使用极简模式：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">本站总访问量&lt;span id=<span class="string">"busuanzi_value_site_pv"</span>&gt;&lt;/span&gt;次</span>
<span class="line">本站访客数&lt;span id=<span class="string">"busuanzi_value_site_uv"</span>&gt;&lt;/span&gt;人次</span>
<span class="line">本文总阅读量&lt;span id=<span class="string">"busuanzi_value_page_pv"</span>&gt;&lt;/span&gt;次</span>
</pre></td></tr></table></figure>
<h2 id="修改多说样式"><a href="#修改多说样式" class="headerlink" title="修改多说样式"></a>修改多说样式</h2><p>由于landscape-plus已经集成了多说评论，因此，只需要按照<a href="http://jackroyal.github.io/2015/05/30/hexo-setting-with-comments-and-visitors/" target="_blank" rel="noopener">给hexo配置上评论和访问量</a>一文中，在多说的管理页面找到配置-&gt;自定义文本，找到暂无评论,1条评论,{num}条评论,这几个设置,修改成自己要的格式,也可以参照我的修改,0,1,{num}。</p>
<h2 id="配置文章访问量和评论数"><a href="#配置文章访问量和评论数" class="headerlink" title="配置文章访问量和评论数"></a>配置文章访问量和评论数</h2><p>1.修改themes/landscape-plus/layout/_partial/article.ejs,在header标签的末尾添加以下代码:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
</pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (post.excerpt &amp;&amp; index)&#123; %&gt; </span>
<span class="line">&lt;% &#125; <span class="keyword">else</span> &#123; %&gt; </span>
<span class="line">&lt;div class=<span class="string">"busuanzi_container_page_pv"</span>&gt; </span>
<span class="line">  &lt;span class=<span class="string">"head-plus"</span>&gt;   </span>
<span class="line">	&lt;i class=<span class="string">"fa fa-user"</span>&gt;&lt;/i&gt;</span>
<span class="line"> &lt;span id=<span class="string">"busuanzi_value_page_pv"</span>&gt;</span>
<span class="line">	&lt;i class=<span class="string">"fa fa-spinner fa-spin"</span>&gt;&lt;/i&gt;</span>
<span class="line"> &lt;/span&gt;次访问   &lt;/span&gt;  </span>
<span class="line"> &lt;span class=<span class="string">"head-plus"</span>&gt;  </span>
<span class="line"> 	&lt;i class=<span class="string">"fa fa-comments"</span>&gt;&lt;/i&gt;</span>
<span class="line"> &lt;span class=<span class="string">"ds-thread-count"</span> data-thread-key=<span class="string">"&lt;%= post.path %&gt;"</span>&gt;</span>
<span class="line">	&lt;i class=<span class="string">"fa fa-spinner fa-spin"</span>&gt;&lt;/i&gt;&lt;/span&gt;条评论  </span>
<span class="line"> &lt;/span&gt; </span>
<span class="line">&lt;/div&gt; </span>
<span class="line">&lt;% &#125; %&gt;</span>
</pre></td></tr></table></figure>
<h2 id="优化样式"><a href="#优化样式" class="headerlink" title="优化样式"></a>优化样式</h2><p>打开themes\landscape-plus\source\css_partial\article.styl,在.article-entry前面添加下面的代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line">.busuanzi_container_page_pv</span>
<span class="line">    margin:20px 0</span>
<span class="line">    color: <span class="comment">#817C7C</span></span>
<span class="line">    font-size: 12px</span>
<span class="line"><span class="comment">#busuanzi_value_page_pv</span></span>
<span class="line">    padding-left:4px</span>
<span class="line">.head-plus</span>
<span class="line">    padding-left:4px</span>
<span class="line">.ds-thread-count</span>
<span class="line">    padding-left:4px</span>
</pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://blog.wleyuan.me/2015/07/26/Hexo-AddStatistics/" target="_blank" rel="noopener">Hexo博客添加网站统计</a></li>
<li><a href="http://jackroyal.github.io/2015/05/30/hexo-setting-with-comments-and-visitors/" target="_blank" rel="noopener">给hexo配置上评论和访问量</a></li>
<li><a href="http://dev.duoshuo.com/threads/541d3b2b40b5abcd2e4df0e9" target="_blank" rel="noopener">Hexo使用多说教程</a></li>
<li><a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo优化（4）：添加多说评论最近评论]]></title>
      <url>https://craneyuan.github.io/2016/03/24/hexo-04-add-duoshuo-discuss/</url>
      <content type="html"><![CDATA[<h2 id="安装多说评论系统"><a href="#安装多说评论系统" class="headerlink" title="安装多说评论系统"></a>安装多说评论系统</h2><p>实际上landscape-plus主题上已经集成了多说评论系统，我们只需要添加duoshuo_shortname到两个配置文件就行了。</p>
<p>多说的shortname就是你注册多说时的用户名。</p>
<p>接下来在博客根目录下的配置文件和主题下的配置文件_config.yml中加入如下代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment"># Duoshuo</span></span>
<span class="line">duoshuo_shortname: XXX</span>
</pre></td></tr></table></figure>
<h2 id="添加多说最近评论"><a href="#添加多说最近评论" class="headerlink" title="添加多说最近评论"></a>添加多说最近评论</h2><p>以landscape-plus主题为例：</p>
<p>在landscape-plus\layout_widget\目录下新建recent_comments.ejs文件，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.duoshuo_shortname)&#123; %&gt;</span>
<span class="line">&lt;div class=<span class="string">"widget-wrap"</span>&gt;</span>
<span class="line">  &lt;h3 class=<span class="string">"widget-title"</span>&gt;&lt;%= __(<span class="string">'最近评论'</span>) %&gt;&lt;/h3&gt;</span>
<span class="line">&lt;div class=<span class="string">"widget"</span>&gt;</span>
<span class="line">&lt;ul class=<span class="string">"ds-recent-comments"</span> data-num-items=<span class="string">"5"</span> data-show-avatars=<span class="string">"1"</span> data-show-time=<span class="string">"1"</span> data-show-title=<span class="string">"1"</span> data-show-admin=<span class="string">"1"</span> data-excerpt-length=<span class="string">"70"</span>&gt;&lt;/ul&gt;</span>
<span class="line">&lt;/div&gt;</span>
<span class="line">  &lt;/div&gt;</span>
<span class="line">&lt;% &#125; %&gt;</span>
</pre></td></tr></table></figure>
<p>注：其中上述代码第5行<code>&lt;ul class=&quot;ds-recent-comments&quot; data-num-items=&quot;5&quot; data-show-avatars=&quot;1&quot; data-show-time=&quot;1&quot; data-show-title=&quot;1&quot; data-show-admin=&quot;1&quot; data-excerpt-length=&quot;70&quot;&gt;&lt;/ul&gt;</code>按照官方提示可以自行修改：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line">//以下参数均为可选</span>
<span class="line">data-num-items=<span class="string">"10"</span>     //显示最新评论的条数，最大支持200条</span>
<span class="line">data-show-avatars=<span class="string">"1"</span>   //是否显示头像，1：显示，0：不显示</span>
<span class="line">data-show-time=<span class="string">"1"</span>      //是否显示时间，1：显示，0：不显示</span>
<span class="line">data-show-title=<span class="string">"0"</span>     //是否显示标题，1：显示，0：不显示</span>
<span class="line">data-show-admin=<span class="string">"1"</span>     //是否显示管理员的评论，1：显示，0：不显示</span>
<span class="line">data-excerpt-length=<span class="string">"70"</span>//最大显示评论汉字数</span>
</pre></td></tr></table></figure>
<p>然后在landscape-plus目录下的_config.yml下的widgets中添加recent_comments：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line">widgets:</span>
<span class="line">- category</span>
<span class="line">- recent_posts</span>
<span class="line">- archive</span>
<span class="line">- tagcloud</span>
<span class="line">- tag</span>
<span class="line">- links</span>
<span class="line">- recent_comments</span>
</pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.jianshu.com/p/05289a4bc8b2#" target="_blank" rel="noopener">如何搭建一个独立博客</a></p>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo优化（3）：彩色标签云]]></title>
      <url>https://craneyuan.github.io/2016/03/24/hexo-03-colourful-tag-cloud/</url>
      <content type="html"><![CDATA[<p>在你的主题目录\layout_widget\下找到tagcloud.ejs文件，编辑这个文件，找到标签&lt;%-tagcloud，然后把整个代码修改为如下样式：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
</pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (site.tags.length)&#123; %&gt;</span>
<span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"widget-wrap"</span>&gt;</span>
<span class="line">    &lt;h3 <span class="class"><span class="keyword">class</span></span>=<span class="string">"widget-title"</span>&gt;&lt;%= __('tagcloud') %&gt;&lt;/h3&gt;</span>
<span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"widget tagcloud"</span>&gt;</span>
<span class="line">      &lt;%- tagcloud(site.tags, &#123;</span>
<span class="line">        min_font: <span class="number">13</span>,</span>
<span class="line">        max_font: <span class="number">23</span>,</span>
<span class="line">        amount: <span class="number">65</span>,</span>
<span class="line">        orderby: <span class="string">'count'</span>,</span>
<span class="line">        color: <span class="literal">true</span>,</span>
<span class="line">        start_color: <span class="string">'#9900FF'</span>,</span>
<span class="line">        end_color: <span class="string">'#FF0000'</span></span>
<span class="line">      &#125;) %&gt;</span>
<span class="line">    &lt;<span class="regexp">/div&gt;</span></span>
<span class="line"><span class="regexp">  &lt;/</span>div&gt;</span>
<span class="line">&lt;% &#125; %&gt;</span>
</pre></td></tr></table></figure>
<p>其中，start_color为颜色变化的起始端，end_color为颜色变化的结束端。</p>
<a id="more"></a>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://starsky.gitcafe.io/2015/05/16/Hexo%E5%BD%A9%E8%89%B2%E6%A0%87%E7%AD%BE%E4%BA%91/" target="_blank" rel="noopener">Hexo彩色云标签</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo优化（2）：部署时保证README.md文件不被渲染]]></title>
      <url>https://craneyuan.github.io/2016/03/24/hexo-02-not-render-md/</url>
      <content type="html"><![CDATA[<p>其实确保README.md文件不被渲染也挺容易的，只要在博客根目录下的配置文件_config.yml中配置一下”skip_render”选项就行了，将不需要渲染的文件名称加入的其选项下就行了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">skip_render: README.md</span>
</pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://starsky.gitcafe.io/2015/12/31/Hexo%E4%B8%8A%E4%BC%A0README.md%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">Hexo上传README.md文件</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo优化（1）：添加新主题]]></title>
      <url>https://craneyuan.github.io/2016/03/24/hexo-01-add-new-theme/</url>
      <content type="html"><![CDATA[<h2 id="配置主题landscape-plus"><a href="#配置主题landscape-plus" class="headerlink" title="配置主题landscape-plus"></a>配置主题landscape-plus</h2><p>首先切换到博客根目录下，使用如下命令安装landscap-plus:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/xiangming/landscape-plus.git themes/landscape-plus</span>
</pre></td></tr></table></figure>
<ul>
<li>然后修改根目录下的配置文件_config.yml, 把theme选项的值设置为：landscape-plus。</li>
</ul>
<a id="more"></a>
<ul>
<li>配置主题目录下的配置文件_config.yml， 把menu菜单项中的各选项配置为自己喜欢的样式，比如把英文的菜单改为中文的。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">menu:</span>
<span class="line">  首页: /</span>
<span class="line">  文章列表: /archives</span>
<span class="line">  关于: /about</span>
</pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Hexo的其他主题安装配置也是类似的，大家可以去<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo主题官网</a>下载自己喜欢的主题。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://starsky.gitcafe.io/2015/05/05/Hexo%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="noopener">Hexo主题配置与优化(1)</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[优化 Hexo 默认主题之为博客添加目录]]></title>
      <url>https://craneyuan.github.io/2016/03/22/hexo-06-add-category/</url>
      <content type="html"><![CDATA[<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>本文转载自：<a href="http://kuangqi.me/tricks/enable-table-of-contents-on-hexo/" target="_blank" rel="noopener">The Bloom of Youth|锦瑟华年</a></p>
<p>Hexo 博客系统的核心支持生成目录（Table of Contents），但其默认的主题 Landscape 并不支持目录的显示。我们只需对 Landscape 的主题文件稍作修改并添加一点目录的 CSS 就可以在文章前面显示友好的目录了。</p>
<h2 id="修改-Landscape-主题的-ejs-文件"><a href="#修改-Landscape-主题的-ejs-文件" class="headerlink" title="修改 Landscape 主题的 ejs 文件"></a>修改 Landscape 主题的 ejs 文件</h2><p>我们首先要编辑文章显示页面的模板，也就是 themes/landscape/layout/_partial/article.ejs 文件。为了将目录生成在正文之前，我们首先在这个文件中找到&lt;%- post.content %&gt;，并在这一行之前加入如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line">&lt;!-- Table <span class="keyword">of</span> Contents --&gt;</span>
<span class="line">&lt;% <span class="keyword">if</span> (!index &amp;&amp; post.toc)&#123; %&gt;</span>
<span class="line">&lt;div id=<span class="string">"toc"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"toc-article"</span>&gt;</span>
<span class="line">&lt;strong <span class="class"><span class="keyword">class</span></span>=<span class="string">"toc-title"</span>&gt;文章目录&lt;<span class="regexp">/strong&gt;</span></span>
<span class="line"><span class="regexp">&lt;%- toc(post.content) %&gt;</span></span>
<span class="line"><span class="regexp">&lt;/</span>div&gt;</span>
<span class="line">&lt;% &#125; %&gt;</span>
</pre></td></tr></table></figure>
<p>这段代码的含义清晰明了，if 语句中有两个条件，!index 是为了不在首页的文章摘要中生成目录，post.toc 确保了只在显式地标记了 toc: true 的文章中生成目录。若这两个条件满足，则创建一个目录的<div>。</div></p>
<p>修改完这个文件之后，找一篇包含了多个子标题的文章，并在文章开头的 front-matter 中添加一句 toc: true，在浏览器中访问这篇文章，应该可以看到文章的开头处已经有了带链接的目录。但是这样的目录实在太难看，我们还需要添加相应的 CSS 来将其指定为我们想要的样式。</p>
<h2 id="为目录编写-CSS-文件"><a href="#为目录编写-CSS-文件" class="headerlink" title="为目录编写 CSS 文件"></a>为目录编写 CSS 文件</h2><p>要指定目录的样式，我们要修改的文件是 themes/landscape/source/css/_partial/article.styl。在文件的最后，添加如下代码：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/*toc*/</span></span>
<span class="line"><span class="selector-class">.toc-article</span></span>
<span class="line"><span class="selector-tag">background</span> <span class="selector-id">#eee</span></span>
<span class="line"><span class="selector-tag">border</span> 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#bbb</span></span>
<span class="line"><span class="selector-tag">border-radius</span> 10<span class="selector-tag">px</span></span>
<span class="line"><span class="selector-tag">margin</span> 1<span class="selector-class">.5em</span> 0 0<span class="selector-class">.3em</span> 1<span class="selector-class">.5em</span></span>
<span class="line"><span class="selector-tag">padding</span> 1<span class="selector-class">.2em</span> 1<span class="selector-tag">em</span> 0 1<span class="selector-tag">em</span></span>
<span class="line"><span class="selector-tag">max-width</span> 28%</span>
<span class="line"></span>
<span class="line"><span class="selector-class">.toc-title</span></span>
<span class="line"><span class="selector-tag">font-size</span> 120%</span>
<span class="line"></span>
<span class="line"><span class="selector-id">#toc</span></span>
<span class="line"><span class="selector-tag">line-height</span> 1<span class="selector-tag">em</span></span>
<span class="line"><span class="selector-tag">font-size</span> 0<span class="selector-class">.9em</span></span>
<span class="line"><span class="selector-tag">float</span> <span class="selector-tag">right</span></span>
<span class="line"><span class="selector-class">.toc</span></span>
<span class="line"><span class="selector-tag">padding</span> 0</span>
<span class="line"><span class="selector-tag">margin</span> 1<span class="selector-tag">em</span></span>
<span class="line"><span class="selector-tag">line-height</span> 1<span class="selector-class">.8em</span></span>
<span class="line"><span class="selector-tag">li</span></span>
<span class="line"><span class="selector-tag">list-style-type</span> <span class="selector-tag">none</span></span>
<span class="line"></span>
<span class="line"><span class="selector-class">.toc-child</span></span>
<span class="line"><span class="selector-tag">margin-left</span> 1<span class="selector-tag">em</span></span>
</pre></td></tr></table></figure>
<p>第一段的 toc-article 指定了目录整个<div>的背景色、边框色、倒角半径、各种间距以及最大的宽度。注意这里最好指定目录的最大宽度，我将其设为了 28%，也就是文章正文那个框的宽度的 28%，也可以设为一个固定的长度，比如在笔记本电脑上 16em 就是个不错的宽度，但为了能适配各种不同尺寸的屏幕，最好还是设置为百分比。如果不指定最大宽度，遇到比较长的标题时，生成的目录会非常难看。这个最大宽度的设置是我在网上其他添加目录的方法中没有见到的。</div></p>
<p>第二段的 toc-title 指的就是“文章目录”那四个字，这四个字要比其他字大一些，将其字号设为其他字的 120%。</p>
<p>第三段的#toc.toc 指定了目录列表的一些细节，将 font-size 设为 0.9em 会让目录的字比文章的字稍小一些。最后的。toc-child 指定了二级目录的缩进量。</p>
<p>再次生成页面，应该已经可以显示比较美观的目录了。</p>
<h2 id="收尾工作"><a href="#收尾工作" class="headerlink" title="收尾工作"></a>收尾工作</h2><p>通常情况下我们不需要为每一篇文章都添加目录，因为大部分文章的长度还是相对较短，或者结构简单而没有添加小标题。在我的博客上，需要添加目录的长文还是相对较少的。因为我选择了默认不生成目录，而手动为需要目录的文章添加显式地标记。</p>
<p>下面我就需要编辑每一篇需要添加目录的文章，在文章开头的 front-matter 中加入 toc: true。</p>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 Hexo+GitHub 搭建独立博客]]></title>
      <url>https://craneyuan.github.io/2016/03/19/hexo-00-generate-blog-by-hexo/</url>
      <content type="html"><![CDATA[<h2 id="什么是博客"><a href="#什么是博客" class="headerlink" title="什么是博客"></a>什么是博客</h2><p>个人感觉博客就是在线的公开日记本，用来记录一些东西，或好、或环，都值得一记。<br>并且个人感觉，不要把博客弄得太社交化（或许本人只是太喜欢安静的思考和写些东西），太社交化容易使作者分心，哈哈，这也只是本人的个人看法了。</p>
<p>对于“博客”，wiki 上的解释如下：</p>
<blockquote>
<p>博客 (Blog) 是 (Web log 网络日志）的简称，又译为网络日志、部落格或部落阁等，是一种通常由个人管理、不定期张贴新的文章的网站。博客上的文章通常根据张贴时间，以倒序方式由新到旧排列。许多博客专注在特定的课题上提供评论或新闻，其他的则被作为比较个人的日记。</p>
</blockquote>
<h2 id="为什么搭建独立博客"><a href="#为什么搭建独立博客" class="headerlink" title="为什么搭建独立博客"></a>为什么搭建独立博客</h2><p>对于这个问题，我只想借用 Linus 的一句话：“just for fun.”</p>
<h2 id="选择什么方式搭建"><a href="#选择什么方式搭建" class="headerlink" title="选择什么方式搭建"></a>选择什么方式搭建</h2><p>既然喜欢折腾，那就折腾到底呗，所以，我就选用 Github + Hexo 去搭建独立的博客。</p>
<h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><h3 id="在-GitHub-创建一个特殊仓库"><a href="#在-GitHub-创建一个特殊仓库" class="headerlink" title="在 GitHub 创建一个特殊仓库"></a>在 GitHub 创建一个特殊仓库</h3><p>注意仓库命名得是：username.github.io【username 为你 GitHub 账户名称，如果没有 GitHub 账户，那就请先注册吧】</p>
<h3 id="在本地电脑上下载安装-Hexo，并配置好相关环境"><a href="#在本地电脑上下载安装-Hexo，并配置好相关环境" class="headerlink" title="在本地电脑上下载安装 Hexo，并配置好相关环境"></a>在本地电脑上下载安装 <a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo</a>，并配置好相关环境</h3><p>首先，请先去 Hexo 官网查看下 Hexo 的介绍文档吧。</p>
<p>了解了什么是 Hexo 的话，那就按照官方的文档来进行安装吧。</p>
<p>首先在安装 Hexo 之前系统必须有 Node.js 和 Git，如果没有，就按照下面的步骤进行安装吧。</p>
<p>Node.js 安装【本教程假设你的系统为 Ubuntu LTS 14.04，若是其他系统，请自行上网查询安装方法吧】</p>
<p>安装 Node.js 的最佳方式是使用 nvm（nodejs 版本管理器），那就先安装 nvm 吧。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</span>
</pre></td></tr></table></figure>
<p>如果系统报告没有 curl，请自行安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sudo apt-get install curl</span>
</pre></td></tr></table></figure>
<p>Git 安装【同上】<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git</span>
</pre></td></tr></table></figure></p>
<p>上述软件安装完毕之后，现在可以进行安装 Hexo 了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span>
</pre></td></tr></table></figure>
<p>如果系统报告没有 npm，请自行安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ sudo apt-get install npm</span>
</pre></td></tr></table></figure>
<h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>现在，所有环境已经配置完毕了，让我们开始创建第一个博客站点吧。</p>
<h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">$ hexo init folder</span>
<span class="line">$ <span class="built_in">cd</span> folder</span>
<span class="line">$ npm install</span>
</pre></td></tr></table></figure>
<p>这样一个新的博客站点也就建好了，指定的文件夹目录如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line">.</span>
<span class="line">├── _config.yml</span>
<span class="line">├── package.json</span>
<span class="line">├── scaffolds</span>
<span class="line">├── <span class="built_in">source</span></span>
<span class="line">|   ├── _drafts</span>
<span class="line">|   └── _posts</span>
<span class="line">└── themes</span>
</pre></td></tr></table></figure>
<p>（注解：folder 指的是，网站博客的根目录）</p>
<h3 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h3><p>站点新建完毕后可以开始写博客了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ hexo new title</span>
</pre></td></tr></table></figure>
<p>（注解：title 指的是，文章标题）</p>
<p>然后切换到 source/_posts 目录下，找到刚才新建的文章，进行编辑、保存。</p>
<p>保存好文章之后，现在可以发布文章了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ hexo g &amp;&amp; hexo s</span>
</pre></td></tr></table></figure>
<p>打开 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就可以看到网站博客了。</p>
<h3 id="部署到-GitHub-上"><a href="#部署到-GitHub-上" class="headerlink" title="部署到 GitHub 上"></a>部署到 GitHub 上</h3><p>首先得安装 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span>
</pre></td></tr></table></figure>
<p>修改配置文件_config.yml</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">deploy:</span>
<span class="line"><span class="built_in">type</span>:git</span>
<span class="line">repo:repository url</span>
</pre></td></tr></table></figure>
<p>（repository url 指的是你先前创建的仓库的公网访问地址，既 <a href="https://username.github.io）" target="_blank" rel="noopener">https://username.github.io）</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在此，我们就初步成功搭建完了我们的独立博客了，嘻嘻。<br>至于美化、优化等步骤，有兴趣的可以慢慢折腾，我也会继续折腾我的博客的。</p>
<p>另外，如果有什么不清楚的问题，可以请教 Google（哦，Google 不能访问啊，那就将就百度吧，哈哈），也可以私信本人，联系方式请见关于页面。</p>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
